{"mappings":"C,A,W,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,EkBgJA,E,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,CVhJA,SAAS,EAAmB,CAAG,CAAE,CAAO,CAAE,CAAM,CAAE,CAAK,CAAE,CAAM,CAAE,CAAG,CAAE,CAAG,EACrE,GAAI,CACA,IAAI,EAAO,CAAG,CAAC,EAAI,CAAC,GAChB,EAAQ,EAAK,KAAK,AAC1B,CAAE,MAAO,EAAO,CACZ,EAAO,GACP,MACJ,CACI,EAAK,IAAI,CAAE,EAAQ,GAClB,QAAQ,OAAO,CAAC,GAAO,IAAI,CAAC,EAAO,EAC5C,CACO,SAAS,EAAoB,CAAE,EAClC,OAAO,WACH,IAAI,EAAO,IAAI,CAAE,EAAO,UAExB,OAAO,IAAI,QAAQ,SAAS,CAAO,CAAE,CAAM,EACvC,IAAI,EAAM,EAAG,KAAK,CAAC,EAAM,GAEzB,SAAS,EAAM,CAAK,EAChB,EAAmB,EAAK,EAAS,EAAQ,EAAO,EAAQ,OAAQ,EACpE,CAEA,SAAS,EAAO,CAAG,EACf,EAAmB,EAAK,EAAS,EAAQ,EAAO,EAAQ,QAAS,EACrE,CAEA,EAAM,KAAA,EACV,EACJ,CACJ,CE7BO,SAAA,EAAA,CAAA,EAGH,OAAO,GAAO,AAAkB,aAAlB,OAAO,QAA0B,EAAI,WAAW,GAAK,OAAS,SAAW,OAAO,CAClG,CDwHO,SAAS,EAAY,CAAO,CAAE,CAAI,EACrC,IAAsG,EAAG,EAAG,EAAG,EAA3G,EAAI,CAAE,MAAO,EAAG,KAAM,WAAa,GAAI,AAAO,EAAP,CAAC,CAAC,EAAE,CAAM,MAAM,CAAC,CAAC,EAAE,CAAE,OAAO,CAAC,CAAC,EAAE,AAAE,EAAG,KAAM,EAAE,CAAE,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,MACA,KACA,QACA,iBACA,OACA,SACA,SACA,SACA,UACA,SACA,aACA,SACA,SACA,OACA,OACA,SACA,QACA,QACA,UACA,WACA,KACA,MACA,MACA,UACA,YACA,aACA,OACA,MACA,WACA,UACA,SACA,OACA,YACA,QACA,OACA,gBACA,UACA,QACA,OACA,cACA,aACA,cACA,eACA,KACA,UACA,gBACA,aACA,YACA,gBACA,WACA,WACA,UACA,WACA,QACA,OACA,OACA,YACA,MACA,MACA,QACA,YACA,aACA,aACA,YACA,WACA,YACA,UACA,OACA,UACA,YACA,aACA,WACA,OACA,MACA,MACA,MACA,MACA,SACA,eACA,KACA,MACA,cACA,aACA,QACA,SACA,UACA,eACA,YACA,YACA,WACA,WACA,OACA,UACA,YACA,OACA,UACA,YACA,UACA,OACA,OACA,QACA,OACA,YACA,QACA,QACA,QACA,QACA,iBACA,SACA,aACA,aACA,cACA,aACA,aACA,cACA,aACA,aACA,cACA,SACA,SACA,aACA,YACA,SACA,YACA,iBACA,OACA,WACA,QACA,YACA,cACA,UACA,OACA,QACA,SACA,OACA,QACA,SACA,OACA,OACA,UACA,SACA,cACA,UACA,iBACA,OACA,OACA,SACA,aACA,SACA,aACA,SACA,MACA,OACA,QACA,OACA,UACA,YA7MJ,C1B6FA,IAAM29C,EAAkB,SAACrD,CAAAA,CAAMoB,CAA/B,EACI,IAAMC,EAAgB,CAClB9uC,MAAO,EACPC,IAAK,CAFa,EAgBtB,OAZA4uC,EAAWnH,QAAX,CAAoBgH,OAApB,CAA6BlsC,SAAAA,CAA7BqsC,EACyB,UAAjBrsC,EAAQC,IAAR,GACID,EAAQrO,KAAR,CAAc2yC,QAAd,CAAuB,wBACvBgI,EAAc9uC,KAAd,CAAsBwC,EAAQxC,KAA9B,CACOwC,EAAQrO,KAAR,CAAc2yC,QAAd,CAAuB,uBAC9BgI,CAAAA,EAAc7uC,GAAd,CAAoBuC,EAAQvC,GAA5B,AAA4BA,EAGvC,GAIM,CACH8tC,YAHgBN,EAAKkB,SAAL,CAAe,EAAG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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/bundles/runtime-d2bfa6cd3f4db08f.js","node_modules/acorn/dist/acorn.mjs","node_modules/espree/package.json","node_modules/espree/node_modules/eslint-visitor-keys/lib/index.js","node_modules/espree/node_modules/eslint-visitor-keys/lib/visitor-keys.json","node_modules/estraverse/package.json","src/replace-jquery-browser.js","node_modules/@swc/helpers/esm/_async_to_generator.js","node_modules/tslib/tslib.es6.js","node_modules/@swc/helpers/esm/_type_of.js","src/utils.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/espree/espree.js","node_modules/acorn-jsx/index.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_get.js","node_modules/@swc/helpers/esm/_super_prop_base.js","node_modules/@swc/helpers/esm/_get_prototype_of.js","node_modules/@swc/helpers/esm/_inherits.js","node_modules/@swc/helpers/esm/_set_prototype_of.js","node_modules/@swc/helpers/esm/_create_super.js","node_modules/@swc/helpers/esm/_is_native_reflect_construct.js","node_modules/@swc/helpers/esm/_possible_constructor_return.js","node_modules/@swc/helpers/esm/_assert_this_initialized.js","node_modules/acorn-jsx/xhtml.js","node_modules/espree/lib/ast-node-types.js","node_modules/espree/lib/espree.js","node_modules/espree/lib/token-translator.js","node_modules/espree/lib/options.js","node_modules/estraverse/estraverse.js","src/all-methods.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequiref6b1\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequiref6b1\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"jVLb9\", function(module, exports) {\nmodule.exports = \"export class Utils {\\n    constructor(selector) {\\n        this.elements = Utils.getSelector(selector);\\n        this.element = this.get(0);\\n        return this;\\n    }\\n\\n    /* $$ Template START $$ */\\n\\n    each(func) {\\n        if (!this.elements.length) {\\n            return this;\\n        }\\n        this.elements.forEach((el, index) => {\\n            func.call(el, el, index);\\n        });\\n        return this;\\n    }\\n\\n    prev() {\\n        if (!this.element) {\\n            return this;\\n        }\\n        return new Utils(this.element.previousElementSibling);\\n    }\\n\\n    next() {\\n        if (!this.element) {\\n            return this;\\n        }\\n        return new Utils(this.element.nextElementSibling);\\n    }\\n\\n    prevAll(filter) {\\n        if (!this.element) {\\n            return this;\\n        }\\n        const sibs = [];\\n        while ((this.element = this.element.previousSibling)) {\\n            if (this.element.nodeType === 3) {\\n                continue; // ignore text nodes\\n            }\\n            if (!filter || filter(this.element)) sibs.push(this.element);\\n        }\\n        return new Utils(sibs);\\n    }\\n\\n    nextAll(filter) {\\n        if (!this.element) {\\n            return this;\\n        }\\n        const sibs = [];\\n        let nextElem = this.element.parentNode.firstChild;\\n        do {\\n            if (nextElem.nodeType === 3) continue; // ignore text nodes\\n            if (nextElem === this.element) continue; // ignore this.element of target\\n            if (nextElem === this.element.nextElementSibling) {\\n                if (!filter || filter(this.element)) {\\n                    sibs.push(nextElem);\\n                    this.element = nextElem;\\n                }\\n            }\\n        } while ((nextElem = nextElem.nextSibling));\\n        return new Utils(sibs);\\n    }\\n\\n    closest(selector) {\\n        if (!this.element) {\\n            return this;\\n        }\\n        const matchesSelector =\\n            this.element.matches ||\\n            this.element.webkitMatchesSelector ||\\n            this.element.mozMatchesSelector ||\\n            this.element.msMatchesSelector;\\n\\n        while (this.element) {\\n            if (matchesSelector.call(this.element, selector)) {\\n                return new Utils(this.element);\\n            }\\n            this.element = this.element.parentElement;\\n        }\\n        return this;\\n    }\\n\\n    parentsUntil(selector, filter) {\\n        if (!this.element) {\\n            return this;\\n        }\\n        const result = [];\\n        const matchesSelector =\\n            this.element.matches ||\\n            this.element.webkitMatchesSelector ||\\n            this.element.mozMatchesSelector ||\\n            this.element.msMatchesSelector;\\n\\n        // match start from parent\\n        let el = this.element.parentElement;\\n        while (el && !matchesSelector.call(el, selector)) {\\n            if (!filter) {\\n                result.push(el);\\n            } else if (matchesSelector.call(el, filter)) {\\n                result.push(el);\\n            }\\n            el = el.parentElement;\\n        }\\n        return new Utils(result);\\n    }\\n\\n    val(value) {\\n        if (!this.element) {\\n            return '';\\n        }\\n        if (value === undefined) {\\n            return this.element.value;\\n        }\\n        this.element.value = value;\\n    }\\n\\n    attr(name, value) {\\n        if (value === undefined) {\\n            if (!this.element) {\\n                return '';\\n            }\\n            return this.element.getAttribute(name);\\n        }\\n        this.each((el) => {\\n            el.setAttribute(name, value);\\n        });\\n        return this;\\n    }\\n\\n    removeAttr(attributes) {\\n        const attrs = attributes.split(' ');\\n        this.each((el) => {\\n            attrs.forEach((attr) => el.removeAttribute(attr));\\n        });\\n        return this;\\n    }\\n\\n    hasAttribute(attribute) {\\n        if (!this.element) {\\n            return false;\\n        }\\n        return this.element.hasAttribute(attribute);\\n    }\\n\\n    data(name, value) {\\n        return this.attr('data-'+name, value);\\n    }\\n\\n    css(css, value) {\\n        if (value !== undefined) {\\n            this.each((el) => {\\n                Utils.setCss(el, css, value);\\n            });\\n            return this;\\n        }\\n        if (typeof css === 'object') {\\n            for (const property in css) {\\n                if (Object.prototype.hasOwnProperty.call(css, property)) {\\n                    this.each((el) => {\\n                        Utils.setCss(el, property, css[property]);\\n                    });\\n                }\\n            }\\n            return this;\\n        }\\n        const cssProp = Utils.camelCase(css);\\n        const property = Utils.styleSupport(cssProp);\\n        return getComputedStyle(this.element)[property];\\n    }\\n\\n    addClass(classNames = '') {\\n        this.each((el) => {\\n            // IE doesn't support multiple arguments\\n            classNames.split(' ').forEach((className) => {\\n                el.classList.add(className);\\n            });\\n        });\\n        return this;\\n    }\\n\\n    removeClass(classNames) {\\n        this.each((el) => {\\n            // IE doesn't support multiple arguments\\n            classNames.split(' ').forEach((className) => {\\n                el.classList.remove(className);\\n            });\\n        });\\n        return this;\\n    }\\n\\n    hasClass(className) {\\n        if (!this.element) {\\n            return false;\\n        }\\n        return this.element.classList.contains(className);\\n    }\\n\\n    toggleClass(className) {\\n        if (!this.element) {\\n            return this;\\n        }\\n        this.element.classList.toggle(className);\\n    }\\n\\n    find(selector) {\\n        return new Utils(Utils.getSelector(selector, this.element));\\n    }\\n\\n    first() {\\n        return new Utils(this.elements[0]);\\n    }\\n\\n    eq(index) {\\n        return new Utils(this.elements[index]);\\n    }\\n\\n    parent() {\\n        return new Utils(this.element.parentElement);\\n    }\\n\\n    offsetParent() {\\n        if (!this.element) {\\n            return this;\\n        }\\n        return new Utils(this.element.offsetParent);\\n    }\\n\\n    children() {\\n        return new Utils(this.element.children);\\n    }\\n\\n    get(index) {\\n        if (index !== undefined) {\\n            return this.elements[index];\\n        }\\n        return this.elements;\\n    }\\n\\n    siblings() {\\n        if (!this.element) {\\n            return this;\\n        }\\n        const elements = Array.prototype.filter.call(\\n            this.element.parentNode.children,\\n            (child) => child !== this.element\\n        );\\n        return new Utils(elements);\\n    }\\n\\n    index() {\\n        if (!this.element) return -1;\\n        let i = 0;\\n        do {\\n            i++;\\n        } while ((this.element = this.element.previousElementSibling));\\n        return i;\\n    }\\n\\n    wrap(className) {\\n        this.each((el) => {\\n            const wrapper = document.createElement('div');\\n            wrapper.className = className;\\n            el.parentNode.insertBefore(wrapper, el);\\n            wrapper.appendChild(el);\\n        });\\n        return this;\\n    }\\n\\n    unwrap() {\\n        this.each((el) => {\\n            const elParentNode = el.parentNode;\\n\\n            if (elParentNode !== document.body) {\\n                elParentNode.parentNode.insertBefore(el, elParentNode);\\n                elParentNode.parentNode.removeChild(elParentNode);\\n            }\\n        });\\n        return this;\\n    }\\n\\n    on(events, listener) {\\n        events.split(' ').forEach((eventName) => {\\n            this.each((el) => {\\n                const tNEventName = Utils.setEventName(el, eventName);\\n                if (!Array.isArray(Utils.eventListeners[tNEventName])) {\\n                    Utils.eventListeners[tNEventName] = [];\\n                }\\n                Utils.eventListeners[tNEventName].push(listener);\\n\\n                // https://github.com/microsoft/TypeScript/issues/28357\\n                if (el) {\\n                    el.addEventListener(eventName.split('.')[0], listener);\\n                }\\n            });\\n        });\\n\\n        return this;\\n    }\\n\\n    one(event, listener) {\\n        this.each((el) => {\\n            new Utils(el).on(event, () => {\\n                new Utils(el).off(event);\\n                listener(event);\\n            });\\n        });\\n        return this;\\n    }\\n\\n    off(eventNames) {\\n        Object.keys(Utils.eventListeners).forEach((tNEventName) => {\\n            const currentEventName = Utils.getEventNameFromId(tNEventName);\\n            eventNames.split(' ').forEach((eventName) => {\\n                if (Utils.isEventMatched(eventName, currentEventName)) {\\n                    this.each((el) => {\\n                        if (\\n                            Utils.getElementEventName(el, currentEventName) ===\\n                            tNEventName\\n                        ) {\\n                            Utils.eventListeners[tNEventName].forEach(\\n                                (listener) => {\\n                                    el.removeEventListener(\\n                                        currentEventName.split('.')[0],\\n                                        listener\\n                                    );\\n                                }\\n                            );\\n                            delete Utils.eventListeners[tNEventName];\\n                        }\\n                    });\\n                }\\n            });\\n        });\\n        return this;\\n    }\\n\\n    trigger(event, detail) {\\n        if (!this.element) {\\n            return this;\\n        }\\n        const eventName = event.split('.')[0];\\n        const isNativeEvent =\\n            typeof document.body['on'+eventName] !== 'undefined';\\n        if (isNativeEvent) {\\n            this.each((el) => {\\n                el.dispatchEvent(new Event(eventName));\\n            });\\n            return this;\\n        }\\n        const customEvent = new CustomEvent(eventName, {\\n            detail: detail || null,\\n        });\\n        this.each((el) => {\\n            el.dispatchEvent(customEvent);\\n        });\\n        return this;\\n    }\\n\\n    html(html) {\\n        if (html === undefined) {\\n            if (!this.element) {\\n                return '';\\n            }\\n            return this.element.innerHTML;\\n        }\\n        this.each((el) => {\\n            el.innerHTML = html;\\n        });\\n        return this;\\n    }\\n\\n    text(text) {\\n        if (text === undefined) {\\n            if (!this.element) {\\n                return '';\\n            }\\n            return this.element.textContent;\\n        }\\n        this.each((el) => {\\n            el.textContent = text;\\n        });\\n        return this;\\n    }\\n\\n    hide() {\\n        this.each((el) => {\\n            el.style.display = 'none';\\n        });\\n    }\\n\\n    show() {\\n        this.each((el) => {\\n            el.style.display = '';\\n        });\\n    }\\n\\n    clone() {\\n        return new Utils(this.element.cloneNode(true));\\n    }\\n\\n    append(html) {\\n        this.each((el) => {\\n            if (typeof html === 'string') {\\n                el.insertAdjacentHTML('beforeend', html);\\n            } else {\\n                el.appendChild(html);\\n            }\\n        });\\n        return this;\\n    }\\n\\n    prepend(html) {\\n        this.each((el) => {\\n            if (typeof html === 'string') {\\n                el.insertAdjacentHTML('afterbegin', html);\\n            } else {\\n                el.insertBefore(html, el.firstChild);\\n            }\\n        });\\n        return this;\\n    }\\n\\n    remove() {\\n        this.each((el) => {\\n            el.parentNode.removeChild(el);\\n        });\\n        return this;\\n    }\\n\\n    empty() {\\n        this.each((el) => {\\n            el.innerHTML = '';\\n        });\\n        return this;\\n    }\\n\\n    contains(child) {\\n        return this.element !== child && this.element.contains(child);\\n    }\\n\\n    is(el) {\\n        if (typeof el === 'string') {\\n            return (\\n                this.element.matches ||\\n                this.element.matchesSelector ||\\n                this.element.msMatchesSelector ||\\n                this.element.mozMatchesSelector ||\\n                this.element.webkitMatchesSelector ||\\n                this.element.oMatchesSelector\\n            ).call(this.element, el);\\n        }\\n        return this.element === (el.element || el);\\n    }\\n\\n    width() {\\n        if (!this.element) {\\n            return 0;\\n        }\\n        const style = window.getComputedStyle(this.element, null);\\n        return parseFloat(style.width.replace('px', ''));\\n    }\\n\\n    // Outer Width With Margin if margin is true\\n    outerWidth(margin) {\\n        if (!this.element) {\\n            return 0;\\n        }\\n        if (margin !== undefined) {\\n            let width = this.element.offsetWidth;\\n            const style = window.getComputedStyle(this.element);\\n\\n            width +=\\n                parseInt(style.marginLeft, 10) +\\n                parseInt(style.marginRight, 10);\\n            return width;\\n        }\\n        return this.element.offsetWidth;\\n    }\\n\\n    height() {\\n        if (!this.element) {\\n            return 0;\\n        }\\n        const style = window.getComputedStyle(this.element, null);\\n        return parseFloat(style.height.replace('px', ''));\\n    }\\n\\n    outerHeight(margin) {\\n        if (!this.element) {\\n            return 0;\\n        }\\n        if (margin !== undefined) {\\n            let height = this.element.offsetHeight;\\n            const style = getComputedStyle(this.element);\\n\\n            height +=\\n                parseInt(style.marginTop, 10) +\\n                parseInt(style.marginBottom, 10);\\n            return height;\\n        }\\n        return this.element.offsetHeight;\\n    }\\n\\n    offset() {\\n        if (!this.element) {\\n            return {\\n                left: 0,\\n                top: 0,\\n            };\\n        }\\n        const box = this.element.getBoundingClientRect();\\n        return {\\n            top:\\n                box.top +\\n                window.pageYOffset -\\n                document.documentElement.clientTop,\\n            left:\\n                box.left +\\n                window.pageXOffset -\\n                document.documentElement.clientLeft,\\n        };\\n    }\\n\\n    position() {\\n        return {\\n            left: this.element.offsetLeft,\\n            top: this.element.offsetTop,\\n        };\\n    }\\n\\n    static generateUUID() {\\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\\n            // eslint-disable-next-line no-bitwise\\n            const r = (Math.random() * 16) | 0;\\n            // eslint-disable-next-line no-bitwise\\n            const v = c === 'x' ? r : (r & 0x3) | 0x8;\\n            return v.toString(16);\\n        });\\n    }\\n\\n    static setEventName(el, eventName) {\\n        // Need to verify https://stackoverflow.com/questions/1915341/whats-wrong-with-adding-properties-to-dom-element-objects\\n        const elementUUId = el.eventEmitterUUID;\\n        const uuid = elementUUId || Utils.generateUUID();\\n        // eslint-disable-next-line no-param-reassign\\n        el.eventEmitterUUID = uuid;\\n        return Utils.getEventName(eventName, uuid);\\n    }\\n\\n    static getElementEventName(el, eventName) {\\n        const elementUUId = el.eventEmitterUUID;\\n        /* istanbul ignore next */\\n        const uuid = elementUUId || Utils.generateUUID();\\n        // eslint-disable-next-line no-param-reassign\\n        el.eventEmitterUUID = uuid;\\n        return Utils.getEventName(eventName, uuid);\\n    }\\n\\n    static getEventName(eventName, uuid) {\\n        return eventName+'__EVENT_EMITTER__'+uuid;\\n    }\\n\\n    static getEventNameFromId(eventName) {\\n        return eventName.split('__EVENT_EMITTER__')[0];\\n    }\\n\\n    static getSelector(selector, context) {\\n        if (selector && typeof selector !== 'string') {\\n            if (selector.length !== undefined) {\\n                return selector;\\n            }\\n            return [selector];\\n        }\\n        context = context || document;\\n\\n        // For performance reasons, use getElementById\\n        // eslint-disable-next-line no-control-regex\\n        const idRegex = /^#(?:[\\\\w-]|\\\\\\\\.|[^\\\\x00-\\\\xa0])*$/;\\n        if (idRegex.test(selector)) {\\n            const el = document.getElementById(selector.substring(1));\\n            return el ? [el] : [];\\n        }\\n        return [].slice.call(context.querySelectorAll(selector) || []);\\n    }\\n\\n    static styleSupport(prop) {\\n        let vendorProp;\\n        let supportedProp;\\n        const capProp = prop.charAt(0).toUpperCase() + prop.slice(1);\\n        const prefixes = ['Moz', 'Webkit', 'O', 'ms'];\\n        let div = document.createElement('div');\\n\\n        if (prop in div.style) {\\n            supportedProp = prop;\\n        } else {\\n            for (let i = 0; i < prefixes.length; i++) {\\n                vendorProp = prefixes[i] + capProp;\\n                if (vendorProp in div.style) {\\n                    supportedProp = vendorProp;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        div = null;\\n        return supportedProp;\\n    }\\n\\n    // https://gist.github.com/cballou/4007063\\n    static setCss(el, prop, value) {\\n        // prettier-ignore\\n        let cssProperty = Utils.camelCase(prop);\\n        cssProperty = Utils.styleSupport(cssProperty);\\n        el.style[cssProperty] = value;\\n    }\\n\\n    static camelCase(text) {\\n        return text.replace(/-([a-z])/gi, (s, group1) => group1.toUpperCase());\\n    }\\n\\n    static isEventMatched(event, eventName) {\\n        const eventNamespace = eventName.split('.');\\n        return event\\n            .split('.')\\n            .filter((e) => e)\\n            .every((e) => eventNamespace.indexOf(e) !== -1);\\n    }\\n\\n    /* $$ Template END $$ */\\n}\\n\\nUtils.eventListeners = {};\\n\\nexport default function $utils(selector) {\\n    return new Utils(selector);\\n}\\n\";\n\n});\n\nparcelRegister(\"8NOO4\", function(module, exports) {\n\n$parcel$export(module.exports, \"isIdentifierStart\", function () { return $8b5bb24d71b8b210$export$56b48cc5d7560ffb; });\n$parcel$export(module.exports, \"isIdentifierChar\", function () { return $8b5bb24d71b8b210$export$332f4d7bee38db93; });\n$parcel$export(module.exports, \"TokenType\", function () { return $8b5bb24d71b8b210$export$f435f793048e7a0f; });\n$parcel$export(module.exports, \"keywordTypes\", function () { return $8b5bb24d71b8b210$export$d53f8326294b31d8; });\n$parcel$export(module.exports, \"tokTypes\", function () { return $8b5bb24d71b8b210$export$b54c7ea7aabba5c8; });\n$parcel$export(module.exports, \"lineBreak\", function () { return $8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6; });\n$parcel$export(module.exports, \"lineBreakG\", function () { return $8b5bb24d71b8b210$export$866e20207bbc41f2; });\n$parcel$export(module.exports, \"isNewLine\", function () { return $8b5bb24d71b8b210$export$2c19a3e3b4008fff; });\n$parcel$export(module.exports, \"nonASCIIwhitespace\", function () { return $8b5bb24d71b8b210$export$268622f0f1cbc82b; });\n$parcel$export(module.exports, \"Position\", function () { return $8b5bb24d71b8b210$export$13807d9ee5a34a42; });\n$parcel$export(module.exports, \"SourceLocation\", function () { return $8b5bb24d71b8b210$export$7387db7caf96fcdb; });\n$parcel$export(module.exports, \"getLineInfo\", function () { return $8b5bb24d71b8b210$export$7af82191547c5ff7; });\n$parcel$export(module.exports, \"defaultOptions\", function () { return $8b5bb24d71b8b210$export$ba43bf67f3d48107; });\n$parcel$export(module.exports, \"Parser\", function () { return $8b5bb24d71b8b210$export$7acfa6ed01010e37; });\n$parcel$export(module.exports, \"Node\", function () { return $8b5bb24d71b8b210$export$85c928794f8d04d4; });\n$parcel$export(module.exports, \"TokContext\", function () { return $8b5bb24d71b8b210$export$68e7b4c4d99215d9; });\n$parcel$export(module.exports, \"tokContexts\", function () { return $8b5bb24d71b8b210$export$2b5f701edfbd6f00; });\n$parcel$export(module.exports, \"Token\", function () { return $8b5bb24d71b8b210$export$50792b0e93539fde; });\n$parcel$export(module.exports, \"version\", function () { return $8b5bb24d71b8b210$export$83d89fbfd8236492; });\n$parcel$export(module.exports, \"parse\", function () { return $8b5bb24d71b8b210$export$98e6a39c04603d36; });\n$parcel$export(module.exports, \"parseExpressionAt\", function () { return $8b5bb24d71b8b210$export$61f24eb03dd7ce92; });\n$parcel$export(module.exports, \"tokenizer\", function () { return $8b5bb24d71b8b210$export$5f8c09e3ae6f64e1; });\n// Reserved word lists for various dialects of the language\nvar $8b5bb24d71b8b210$var$reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n};\n// And the keywords\nvar $8b5bb24d71b8b210$var$ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\nvar $8b5bb24d71b8b210$var$keywords = {\n    5: $8b5bb24d71b8b210$var$ecma5AndLessKeywords,\n    \"5module\": $8b5bb24d71b8b210$var$ecma5AndLessKeywords + \" export import\",\n    6: $8b5bb24d71b8b210$var$ecma5AndLessKeywords + \" const class extends export import super\"\n};\nvar $8b5bb24d71b8b210$var$keywordRelationalOperator = /^in(stanceof)?$/;\n// ## Character categories\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar $8b5bb24d71b8b210$var$nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar $8b5bb24d71b8b210$var$nonASCIIidentifierChars = \"\\u200C\\u200D\\xb7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\nvar $8b5bb24d71b8b210$var$nonASCIIidentifierStart = new RegExp(\"[\" + $8b5bb24d71b8b210$var$nonASCIIidentifierStartChars + \"]\");\nvar $8b5bb24d71b8b210$var$nonASCIIidentifier = new RegExp(\"[\" + $8b5bb24d71b8b210$var$nonASCIIidentifierStartChars + $8b5bb24d71b8b210$var$nonASCIIidentifierChars + \"]\");\n$8b5bb24d71b8b210$var$nonASCIIidentifierStartChars = $8b5bb24d71b8b210$var$nonASCIIidentifierChars = null;\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n// eslint-disable-next-line comma-spacing\nvar $8b5bb24d71b8b210$var$astralIdentifierStartCodes = [\n    0,\n    11,\n    2,\n    25,\n    2,\n    18,\n    2,\n    1,\n    2,\n    14,\n    3,\n    13,\n    35,\n    122,\n    70,\n    52,\n    268,\n    28,\n    4,\n    48,\n    48,\n    31,\n    14,\n    29,\n    6,\n    37,\n    11,\n    29,\n    3,\n    35,\n    5,\n    7,\n    2,\n    4,\n    43,\n    157,\n    19,\n    35,\n    5,\n    35,\n    5,\n    39,\n    9,\n    51,\n    157,\n    310,\n    10,\n    21,\n    11,\n    7,\n    153,\n    5,\n    3,\n    0,\n    2,\n    43,\n    2,\n    1,\n    4,\n    0,\n    3,\n    22,\n    11,\n    22,\n    10,\n    30,\n    66,\n    18,\n    2,\n    1,\n    11,\n    21,\n    11,\n    25,\n    71,\n    55,\n    7,\n    1,\n    65,\n    0,\n    16,\n    3,\n    2,\n    2,\n    2,\n    28,\n    43,\n    28,\n    4,\n    28,\n    36,\n    7,\n    2,\n    27,\n    28,\n    53,\n    11,\n    21,\n    11,\n    18,\n    14,\n    17,\n    111,\n    72,\n    56,\n    50,\n    14,\n    50,\n    14,\n    35,\n    349,\n    41,\n    7,\n    1,\n    79,\n    28,\n    11,\n    0,\n    9,\n    21,\n    107,\n    20,\n    28,\n    22,\n    13,\n    52,\n    76,\n    44,\n    33,\n    24,\n    27,\n    35,\n    30,\n    0,\n    3,\n    0,\n    9,\n    34,\n    4,\n    0,\n    13,\n    47,\n    15,\n    3,\n    22,\n    0,\n    2,\n    0,\n    36,\n    17,\n    2,\n    24,\n    85,\n    6,\n    2,\n    0,\n    2,\n    3,\n    2,\n    14,\n    2,\n    9,\n    8,\n    46,\n    39,\n    7,\n    3,\n    1,\n    3,\n    21,\n    2,\n    6,\n    2,\n    1,\n    2,\n    4,\n    4,\n    0,\n    19,\n    0,\n    13,\n    4,\n    159,\n    52,\n    19,\n    3,\n    21,\n    2,\n    31,\n    47,\n    21,\n    1,\n    2,\n    0,\n    185,\n    46,\n    42,\n    3,\n    37,\n    47,\n    21,\n    0,\n    60,\n    42,\n    14,\n    0,\n    72,\n    26,\n    230,\n    43,\n    117,\n    63,\n    32,\n    7,\n    3,\n    0,\n    3,\n    7,\n    2,\n    1,\n    2,\n    23,\n    16,\n    0,\n    2,\n    0,\n    95,\n    7,\n    3,\n    38,\n    17,\n    0,\n    2,\n    0,\n    29,\n    0,\n    11,\n    39,\n    8,\n    0,\n    22,\n    0,\n    12,\n    45,\n    20,\n    0,\n    35,\n    56,\n    264,\n    8,\n    2,\n    36,\n    18,\n    0,\n    50,\n    29,\n    113,\n    6,\n    2,\n    1,\n    2,\n    37,\n    22,\n    0,\n    26,\n    5,\n    2,\n    1,\n    2,\n    31,\n    15,\n    0,\n    328,\n    18,\n    190,\n    0,\n    80,\n    921,\n    103,\n    110,\n    18,\n    195,\n    2749,\n    1070,\n    4050,\n    582,\n    8634,\n    568,\n    8,\n    30,\n    114,\n    29,\n    19,\n    47,\n    17,\n    3,\n    32,\n    20,\n    6,\n    18,\n    689,\n    63,\n    129,\n    74,\n    6,\n    0,\n    67,\n    12,\n    65,\n    1,\n    2,\n    0,\n    29,\n    6135,\n    9,\n    1237,\n    43,\n    8,\n    8952,\n    286,\n    50,\n    2,\n    18,\n    3,\n    9,\n    395,\n    2309,\n    106,\n    6,\n    12,\n    4,\n    8,\n    8,\n    9,\n    5991,\n    84,\n    2,\n    70,\n    2,\n    1,\n    3,\n    0,\n    3,\n    1,\n    3,\n    3,\n    2,\n    11,\n    2,\n    0,\n    2,\n    6,\n    2,\n    64,\n    2,\n    3,\n    3,\n    7,\n    2,\n    6,\n    2,\n    27,\n    2,\n    3,\n    2,\n    4,\n    2,\n    0,\n    4,\n    6,\n    2,\n    339,\n    3,\n    24,\n    2,\n    24,\n    2,\n    30,\n    2,\n    24,\n    2,\n    30,\n    2,\n    24,\n    2,\n    30,\n    2,\n    24,\n    2,\n    30,\n    2,\n    24,\n    2,\n    7,\n    2357,\n    44,\n    11,\n    6,\n    17,\n    0,\n    370,\n    43,\n    1301,\n    196,\n    60,\n    67,\n    8,\n    0,\n    1205,\n    3,\n    2,\n    26,\n    2,\n    1,\n    2,\n    0,\n    3,\n    0,\n    2,\n    9,\n    2,\n    3,\n    2,\n    0,\n    2,\n    0,\n    7,\n    0,\n    5,\n    0,\n    2,\n    0,\n    2,\n    0,\n    2,\n    2,\n    2,\n    1,\n    2,\n    0,\n    3,\n    0,\n    2,\n    0,\n    2,\n    0,\n    2,\n    0,\n    2,\n    0,\n    2,\n    1,\n    2,\n    0,\n    3,\n    3,\n    2,\n    6,\n    2,\n    3,\n    2,\n    3,\n    2,\n    0,\n    2,\n    9,\n    2,\n    16,\n    6,\n    2,\n    2,\n    4,\n    2,\n    16,\n    4421,\n    42717,\n    35,\n    4148,\n    12,\n    221,\n    3,\n    5761,\n    15,\n    7472,\n    3104,\n    541,\n    1507,\n    4938\n];\n// eslint-disable-next-line comma-spacing\nvar $8b5bb24d71b8b210$var$astralIdentifierCodes = [\n    509,\n    0,\n    227,\n    0,\n    150,\n    4,\n    294,\n    9,\n    1368,\n    2,\n    2,\n    1,\n    6,\n    3,\n    41,\n    2,\n    5,\n    0,\n    166,\n    1,\n    574,\n    3,\n    9,\n    9,\n    370,\n    1,\n    154,\n    10,\n    176,\n    2,\n    54,\n    14,\n    32,\n    9,\n    16,\n    3,\n    46,\n    10,\n    54,\n    9,\n    7,\n    2,\n    37,\n    13,\n    2,\n    9,\n    6,\n    1,\n    45,\n    0,\n    13,\n    2,\n    49,\n    13,\n    9,\n    3,\n    2,\n    11,\n    83,\n    11,\n    7,\n    0,\n    161,\n    11,\n    6,\n    9,\n    7,\n    3,\n    56,\n    1,\n    2,\n    6,\n    3,\n    1,\n    3,\n    2,\n    10,\n    0,\n    11,\n    1,\n    3,\n    6,\n    4,\n    4,\n    193,\n    17,\n    10,\n    9,\n    5,\n    0,\n    82,\n    19,\n    13,\n    9,\n    214,\n    6,\n    3,\n    8,\n    28,\n    1,\n    83,\n    16,\n    16,\n    9,\n    82,\n    12,\n    9,\n    9,\n    84,\n    14,\n    5,\n    9,\n    243,\n    14,\n    166,\n    9,\n    71,\n    5,\n    2,\n    1,\n    3,\n    3,\n    2,\n    0,\n    2,\n    1,\n    13,\n    9,\n    120,\n    6,\n    3,\n    6,\n    4,\n    0,\n    29,\n    9,\n    41,\n    6,\n    2,\n    3,\n    9,\n    0,\n    10,\n    10,\n    47,\n    15,\n    406,\n    7,\n    2,\n    7,\n    17,\n    9,\n    57,\n    21,\n    2,\n    13,\n    123,\n    5,\n    4,\n    0,\n    2,\n    1,\n    2,\n    6,\n    2,\n    0,\n    9,\n    9,\n    49,\n    4,\n    2,\n    1,\n    2,\n    4,\n    9,\n    9,\n    330,\n    3,\n    19306,\n    9,\n    135,\n    4,\n    60,\n    6,\n    26,\n    9,\n    1014,\n    0,\n    2,\n    54,\n    8,\n    3,\n    82,\n    0,\n    12,\n    1,\n    19628,\n    1,\n    5319,\n    4,\n    4,\n    5,\n    9,\n    7,\n    3,\n    6,\n    31,\n    3,\n    149,\n    2,\n    1418,\n    49,\n    513,\n    54,\n    5,\n    49,\n    9,\n    0,\n    15,\n    0,\n    23,\n    4,\n    2,\n    14,\n    1361,\n    6,\n    2,\n    16,\n    3,\n    6,\n    2,\n    1,\n    2,\n    4,\n    262,\n    6,\n    10,\n    9,\n    419,\n    13,\n    1495,\n    6,\n    110,\n    6,\n    6,\n    9,\n    4759,\n    9,\n    787719,\n    239\n];\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction $8b5bb24d71b8b210$var$isInAstralSet(code, set) {\n    var pos = 0x10000;\n    for(var i = 0; i < set.length; i += 2){\n        pos += set[i];\n        if (pos > code) return false;\n        pos += set[i + 1];\n        if (pos >= code) return true;\n    }\n}\n// Test whether a given character code starts an identifier.\nfunction $8b5bb24d71b8b210$export$56b48cc5d7560ffb(code, astral) {\n    if (code < 65) return code === 36;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123) return true;\n    if (code <= 0xffff) return code >= 0xaa && $8b5bb24d71b8b210$var$nonASCIIidentifierStart.test(String.fromCharCode(code));\n    if (astral === false) return false;\n    return $8b5bb24d71b8b210$var$isInAstralSet(code, $8b5bb24d71b8b210$var$astralIdentifierStartCodes);\n}\n// Test whether a given character is part of an identifier.\nfunction $8b5bb24d71b8b210$export$332f4d7bee38db93(code, astral) {\n    if (code < 48) return code === 36;\n    if (code < 58) return true;\n    if (code < 65) return false;\n    if (code < 91) return true;\n    if (code < 97) return code === 95;\n    if (code < 123) return true;\n    if (code <= 0xffff) return code >= 0xaa && $8b5bb24d71b8b210$var$nonASCIIidentifier.test(String.fromCharCode(code));\n    if (astral === false) return false;\n    return $8b5bb24d71b8b210$var$isInAstralSet(code, $8b5bb24d71b8b210$var$astralIdentifierStartCodes) || $8b5bb24d71b8b210$var$isInAstralSet(code, $8b5bb24d71b8b210$var$astralIdentifierCodes);\n}\n// ## Token types\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\nvar $8b5bb24d71b8b210$export$f435f793048e7a0f = function TokenType(label, conf) {\n    if (conf === void 0) conf = {};\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop || null;\n    this.updateContext = null;\n};\nfunction $8b5bb24d71b8b210$var$binop(name, prec) {\n    return new $8b5bb24d71b8b210$export$f435f793048e7a0f(name, {\n        beforeExpr: true,\n        binop: prec\n    });\n}\nvar $8b5bb24d71b8b210$var$beforeExpr = {\n    beforeExpr: true\n}, $8b5bb24d71b8b210$var$startsExpr = {\n    startsExpr: true\n};\n// Map keyword names to token types.\nvar $8b5bb24d71b8b210$export$d53f8326294b31d8 = {};\n// Succinct definitions of keyword token types\nfunction $8b5bb24d71b8b210$var$kw(name, options) {\n    if (options === void 0) options = {};\n    options.keyword = name;\n    return $8b5bb24d71b8b210$export$d53f8326294b31d8[name] = new $8b5bb24d71b8b210$export$f435f793048e7a0f(name, options);\n}\nvar $8b5bb24d71b8b210$export$b54c7ea7aabba5c8 = {\n    num: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"num\", $8b5bb24d71b8b210$var$startsExpr),\n    regexp: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"regexp\", $8b5bb24d71b8b210$var$startsExpr),\n    string: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"string\", $8b5bb24d71b8b210$var$startsExpr),\n    name: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"name\", $8b5bb24d71b8b210$var$startsExpr),\n    eof: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"eof\"),\n    // Punctuation token types.\n    bracketL: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"[\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    bracketR: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"]\"),\n    braceL: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"{\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    braceR: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"}\"),\n    parenL: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"(\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    parenR: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\")\"),\n    comma: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\",\", $8b5bb24d71b8b210$var$beforeExpr),\n    semi: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\";\", $8b5bb24d71b8b210$var$beforeExpr),\n    colon: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\":\", $8b5bb24d71b8b210$var$beforeExpr),\n    dot: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\".\"),\n    question: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"?\", $8b5bb24d71b8b210$var$beforeExpr),\n    questionDot: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"?.\"),\n    arrow: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"=>\", $8b5bb24d71b8b210$var$beforeExpr),\n    template: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"template\"),\n    invalidTemplate: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"invalidTemplate\"),\n    ellipsis: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"...\", $8b5bb24d71b8b210$var$beforeExpr),\n    backQuote: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"`\", $8b5bb24d71b8b210$var$startsExpr),\n    dollarBraceL: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"${\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n    eq: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"=\", {\n        beforeExpr: true,\n        isAssign: true\n    }),\n    assign: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"_=\", {\n        beforeExpr: true,\n        isAssign: true\n    }),\n    incDec: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"++/--\", {\n        prefix: true,\n        postfix: true,\n        startsExpr: true\n    }),\n    prefix: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"!/~\", {\n        beforeExpr: true,\n        prefix: true,\n        startsExpr: true\n    }),\n    logicalOR: $8b5bb24d71b8b210$var$binop(\"||\", 1),\n    logicalAND: $8b5bb24d71b8b210$var$binop(\"&&\", 2),\n    bitwiseOR: $8b5bb24d71b8b210$var$binop(\"|\", 3),\n    bitwiseXOR: $8b5bb24d71b8b210$var$binop(\"^\", 4),\n    bitwiseAND: $8b5bb24d71b8b210$var$binop(\"&\", 5),\n    equality: $8b5bb24d71b8b210$var$binop(\"==/!=/===/!==\", 6),\n    relational: $8b5bb24d71b8b210$var$binop(\"</>/<=/>=\", 7),\n    bitShift: $8b5bb24d71b8b210$var$binop(\"<</>>/>>>\", 8),\n    plusMin: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"+/-\", {\n        beforeExpr: true,\n        binop: 9,\n        prefix: true,\n        startsExpr: true\n    }),\n    modulo: $8b5bb24d71b8b210$var$binop(\"%\", 10),\n    star: $8b5bb24d71b8b210$var$binop(\"*\", 10),\n    slash: $8b5bb24d71b8b210$var$binop(\"/\", 10),\n    starstar: new $8b5bb24d71b8b210$export$f435f793048e7a0f(\"**\", {\n        beforeExpr: true\n    }),\n    coalesce: $8b5bb24d71b8b210$var$binop(\"??\", 1),\n    // Keyword token types.\n    _break: $8b5bb24d71b8b210$var$kw(\"break\"),\n    _case: $8b5bb24d71b8b210$var$kw(\"case\", $8b5bb24d71b8b210$var$beforeExpr),\n    _catch: $8b5bb24d71b8b210$var$kw(\"catch\"),\n    _continue: $8b5bb24d71b8b210$var$kw(\"continue\"),\n    _debugger: $8b5bb24d71b8b210$var$kw(\"debugger\"),\n    _default: $8b5bb24d71b8b210$var$kw(\"default\", $8b5bb24d71b8b210$var$beforeExpr),\n    _do: $8b5bb24d71b8b210$var$kw(\"do\", {\n        isLoop: true,\n        beforeExpr: true\n    }),\n    _else: $8b5bb24d71b8b210$var$kw(\"else\", $8b5bb24d71b8b210$var$beforeExpr),\n    _finally: $8b5bb24d71b8b210$var$kw(\"finally\"),\n    _for: $8b5bb24d71b8b210$var$kw(\"for\", {\n        isLoop: true\n    }),\n    _function: $8b5bb24d71b8b210$var$kw(\"function\", $8b5bb24d71b8b210$var$startsExpr),\n    _if: $8b5bb24d71b8b210$var$kw(\"if\"),\n    _return: $8b5bb24d71b8b210$var$kw(\"return\", $8b5bb24d71b8b210$var$beforeExpr),\n    _switch: $8b5bb24d71b8b210$var$kw(\"switch\"),\n    _throw: $8b5bb24d71b8b210$var$kw(\"throw\", $8b5bb24d71b8b210$var$beforeExpr),\n    _try: $8b5bb24d71b8b210$var$kw(\"try\"),\n    _var: $8b5bb24d71b8b210$var$kw(\"var\"),\n    _const: $8b5bb24d71b8b210$var$kw(\"const\"),\n    _while: $8b5bb24d71b8b210$var$kw(\"while\", {\n        isLoop: true\n    }),\n    _with: $8b5bb24d71b8b210$var$kw(\"with\"),\n    _new: $8b5bb24d71b8b210$var$kw(\"new\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    _this: $8b5bb24d71b8b210$var$kw(\"this\", $8b5bb24d71b8b210$var$startsExpr),\n    _super: $8b5bb24d71b8b210$var$kw(\"super\", $8b5bb24d71b8b210$var$startsExpr),\n    _class: $8b5bb24d71b8b210$var$kw(\"class\", $8b5bb24d71b8b210$var$startsExpr),\n    _extends: $8b5bb24d71b8b210$var$kw(\"extends\", $8b5bb24d71b8b210$var$beforeExpr),\n    _export: $8b5bb24d71b8b210$var$kw(\"export\"),\n    _import: $8b5bb24d71b8b210$var$kw(\"import\", $8b5bb24d71b8b210$var$startsExpr),\n    _null: $8b5bb24d71b8b210$var$kw(\"null\", $8b5bb24d71b8b210$var$startsExpr),\n    _true: $8b5bb24d71b8b210$var$kw(\"true\", $8b5bb24d71b8b210$var$startsExpr),\n    _false: $8b5bb24d71b8b210$var$kw(\"false\", $8b5bb24d71b8b210$var$startsExpr),\n    _in: $8b5bb24d71b8b210$var$kw(\"in\", {\n        beforeExpr: true,\n        binop: 7\n    }),\n    _instanceof: $8b5bb24d71b8b210$var$kw(\"instanceof\", {\n        beforeExpr: true,\n        binop: 7\n    }),\n    _typeof: $8b5bb24d71b8b210$var$kw(\"typeof\", {\n        beforeExpr: true,\n        prefix: true,\n        startsExpr: true\n    }),\n    _void: $8b5bb24d71b8b210$var$kw(\"void\", {\n        beforeExpr: true,\n        prefix: true,\n        startsExpr: true\n    }),\n    _delete: $8b5bb24d71b8b210$var$kw(\"delete\", {\n        beforeExpr: true,\n        prefix: true,\n        startsExpr: true\n    })\n};\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nvar $8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6 = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar $8b5bb24d71b8b210$export$866e20207bbc41f2 = new RegExp($8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.source, \"g\");\nfunction $8b5bb24d71b8b210$export$2c19a3e3b4008fff(code, ecma2019String) {\n    return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);\n}\nvar $8b5bb24d71b8b210$export$268622f0f1cbc82b = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\nvar $8b5bb24d71b8b210$var$skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nvar $8b5bb24d71b8b210$var$ref = Object.prototype;\nvar $8b5bb24d71b8b210$var$hasOwnProperty = $8b5bb24d71b8b210$var$ref.hasOwnProperty;\nvar $8b5bb24d71b8b210$var$toString = $8b5bb24d71b8b210$var$ref.toString;\n// Checks if an object has a property.\nfunction $8b5bb24d71b8b210$var$has(obj, propName) {\n    return $8b5bb24d71b8b210$var$hasOwnProperty.call(obj, propName);\n}\nvar $8b5bb24d71b8b210$var$isArray = Array.isArray || function(obj) {\n    return $8b5bb24d71b8b210$var$toString.call(obj) === \"[object Array]\";\n};\nfunction $8b5bb24d71b8b210$var$wordsRegexp(words) {\n    return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\");\n}\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\nvar $8b5bb24d71b8b210$export$13807d9ee5a34a42 = function Position(line, col) {\n    this.line = line;\n    this.column = col;\n};\n$8b5bb24d71b8b210$export$13807d9ee5a34a42.prototype.offset = function offset(n) {\n    return new $8b5bb24d71b8b210$export$13807d9ee5a34a42(this.line, this.column + n);\n};\nvar $8b5bb24d71b8b210$export$7387db7caf96fcdb = function SourceLocation(p, start, end) {\n    this.start = start;\n    this.end = end;\n    if (p.sourceFile !== null) this.source = p.sourceFile;\n};\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\nfunction $8b5bb24d71b8b210$export$7af82191547c5ff7(input, offset) {\n    for(var line = 1, cur = 0;;){\n        $8b5bb24d71b8b210$export$866e20207bbc41f2.lastIndex = cur;\n        var match = $8b5bb24d71b8b210$export$866e20207bbc41f2.exec(input);\n        if (match && match.index < offset) {\n            ++line;\n            cur = match.index + match[0].length;\n        } else return new $8b5bb24d71b8b210$export$13807d9ee5a34a42(line, offset - cur);\n    }\n}\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\nvar $8b5bb24d71b8b210$export$ba43bf67f3d48107 = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n    // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10\n    // (2019). This influences support for strict mode, the set of\n    // reserved words, and support for new syntax features. The default\n    // is 10.\n    ecmaVersion: 10,\n    // `sourceType` indicates the mode the code should be parsed in.\n    // Can be either `\"script\"` or `\"module\"`. This influences global\n    // strict mode and parsing of `import` and `export` declarations.\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // the position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, await identifiers are allowed to appear at the top-level scope,\n    // but they are still not allowed in non-async functions.\n    allowAwaitOutsideFunction: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false\n};\n// Interpret and default an options object\nfunction $8b5bb24d71b8b210$var$getOptions(opts) {\n    var options = {};\n    for(var opt in $8b5bb24d71b8b210$export$ba43bf67f3d48107)options[opt] = opts && $8b5bb24d71b8b210$var$has(opts, opt) ? opts[opt] : $8b5bb24d71b8b210$export$ba43bf67f3d48107[opt];\n    if (options.ecmaVersion >= 2015) options.ecmaVersion -= 2009;\n    if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;\n    if ($8b5bb24d71b8b210$var$isArray(options.onToken)) {\n        var tokens = options.onToken;\n        options.onToken = function(token) {\n            return tokens.push(token);\n        };\n    }\n    if ($8b5bb24d71b8b210$var$isArray(options.onComment)) options.onComment = $8b5bb24d71b8b210$var$pushComment(options, options.onComment);\n    return options;\n}\nfunction $8b5bb24d71b8b210$var$pushComment(options, array) {\n    return function(block, text, start, end, startLoc, endLoc) {\n        var comment = {\n            type: block ? \"Block\" : \"Line\",\n            value: text,\n            start: start,\n            end: end\n        };\n        if (options.locations) comment.loc = new $8b5bb24d71b8b210$export$7387db7caf96fcdb(this, startLoc, endLoc);\n        if (options.ranges) comment.range = [\n            start,\n            end\n        ];\n        array.push(comment);\n    };\n}\n// Each scope gets a bitset that may contain these flags\nvar $8b5bb24d71b8b210$var$SCOPE_TOP = 1, $8b5bb24d71b8b210$var$SCOPE_FUNCTION = 2, $8b5bb24d71b8b210$var$SCOPE_VAR = $8b5bb24d71b8b210$var$SCOPE_TOP | $8b5bb24d71b8b210$var$SCOPE_FUNCTION, $8b5bb24d71b8b210$var$SCOPE_ASYNC = 4, $8b5bb24d71b8b210$var$SCOPE_GENERATOR = 8, $8b5bb24d71b8b210$var$SCOPE_ARROW = 16, $8b5bb24d71b8b210$var$SCOPE_SIMPLE_CATCH = 32, $8b5bb24d71b8b210$var$SCOPE_SUPER = 64, $8b5bb24d71b8b210$var$SCOPE_DIRECT_SUPER = 128;\nfunction $8b5bb24d71b8b210$var$functionFlags(async, generator) {\n    return $8b5bb24d71b8b210$var$SCOPE_FUNCTION | (async ? $8b5bb24d71b8b210$var$SCOPE_ASYNC : 0) | (generator ? $8b5bb24d71b8b210$var$SCOPE_GENERATOR : 0);\n}\n// Used in checkLVal and declareName to determine the type of a binding\nvar $8b5bb24d71b8b210$var$BIND_NONE = 0, $8b5bb24d71b8b210$var$BIND_VAR = 1, $8b5bb24d71b8b210$var$BIND_LEXICAL = 2, $8b5bb24d71b8b210$var$BIND_FUNCTION = 3, $8b5bb24d71b8b210$var$BIND_SIMPLE_CATCH = 4, $8b5bb24d71b8b210$var$BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\nvar $8b5bb24d71b8b210$export$7acfa6ed01010e37 = function Parser(options, input, startPos) {\n    this.options = options = $8b5bb24d71b8b210$var$getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = $8b5bb24d71b8b210$var$wordsRegexp($8b5bb24d71b8b210$var$keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n    var reserved = \"\";\n    if (options.allowReserved !== true) {\n        for(var v = options.ecmaVersion;; v--){\n            if (reserved = $8b5bb24d71b8b210$var$reservedWords[v]) break;\n        }\n        if (options.sourceType === \"module\") reserved += \" await\";\n    }\n    this.reservedWords = $8b5bb24d71b8b210$var$wordsRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + $8b5bb24d71b8b210$var$reservedWords.strict;\n    this.reservedWordsStrict = $8b5bb24d71b8b210$var$wordsRegexp(reservedStrict);\n    this.reservedWordsStrictBind = $8b5bb24d71b8b210$var$wordsRegexp(reservedStrict + \" \" + $8b5bb24d71b8b210$var$reservedWords.strictBind);\n    this.input = String(input);\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n    // Set up token state\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n        this.pos = startPos;\n        this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n        this.curLine = this.input.slice(0, this.lineStart).split($8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6).length;\n    } else {\n        this.pos = this.lineStart = 0;\n        this.curLine = 1;\n    }\n    // Properties of the current token:\n    // Its type\n    this.type = $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n    // Figure out if it's a module code.\n    this.inModule = options.sourceType === \"module\";\n    this.strict = this.inModule || this.strictDirective(this.pos);\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n    // Positions to delayed-check that yield/await does not exist in default parameters.\n    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n    // Labels in scope.\n    this.labels = [];\n    // Thus-far undefined exports.\n    this.undefinedExports = {};\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\") this.skipLineComment(2);\n    // Scope tracking for duplicate variable names (see scope.js)\n    this.scopeStack = [];\n    this.enterScope($8b5bb24d71b8b210$var$SCOPE_TOP);\n    // For RegExp validation\n    this.regexpState = null;\n};\nvar $8b5bb24d71b8b210$var$prototypeAccessors = {\n    inFunction: {\n        configurable: true\n    },\n    inGenerator: {\n        configurable: true\n    },\n    inAsync: {\n        configurable: true\n    },\n    allowSuper: {\n        configurable: true\n    },\n    allowDirectSuper: {\n        configurable: true\n    },\n    treatFunctionsAsVar: {\n        configurable: true\n    }\n};\n$8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype.parse = function parse() {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node);\n};\n$8b5bb24d71b8b210$var$prototypeAccessors.inFunction.get = function() {\n    return (this.currentVarScope().flags & $8b5bb24d71b8b210$var$SCOPE_FUNCTION) > 0;\n};\n$8b5bb24d71b8b210$var$prototypeAccessors.inGenerator.get = function() {\n    return (this.currentVarScope().flags & $8b5bb24d71b8b210$var$SCOPE_GENERATOR) > 0;\n};\n$8b5bb24d71b8b210$var$prototypeAccessors.inAsync.get = function() {\n    return (this.currentVarScope().flags & $8b5bb24d71b8b210$var$SCOPE_ASYNC) > 0;\n};\n$8b5bb24d71b8b210$var$prototypeAccessors.allowSuper.get = function() {\n    return (this.currentThisScope().flags & $8b5bb24d71b8b210$var$SCOPE_SUPER) > 0;\n};\n$8b5bb24d71b8b210$var$prototypeAccessors.allowDirectSuper.get = function() {\n    return (this.currentThisScope().flags & $8b5bb24d71b8b210$var$SCOPE_DIRECT_SUPER) > 0;\n};\n$8b5bb24d71b8b210$var$prototypeAccessors.treatFunctionsAsVar.get = function() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n};\n// Switch to a getter for 7.0.0.\n$8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype.inNonArrowFunction = function inNonArrowFunction() {\n    return (this.currentThisScope().flags & $8b5bb24d71b8b210$var$SCOPE_FUNCTION) > 0;\n};\n$8b5bb24d71b8b210$export$7acfa6ed01010e37.extend = function extend() {\n    var plugins = [], len = arguments.length;\n    while(len--)plugins[len] = arguments[len];\n    var cls = this;\n    for(var i = 0; i < plugins.length; i++)cls = plugins[i](cls);\n    return cls;\n};\n$8b5bb24d71b8b210$export$7acfa6ed01010e37.parse = function parse(input, options) {\n    return new this(options, input).parse();\n};\n$8b5bb24d71b8b210$export$7acfa6ed01010e37.parseExpressionAt = function parseExpressionAt(input, pos, options) {\n    var parser = new this(options, input, pos);\n    parser.nextToken();\n    return parser.parseExpression();\n};\n$8b5bb24d71b8b210$export$7acfa6ed01010e37.tokenizer = function tokenizer(input, options) {\n    return new this(options, input);\n};\nObject.defineProperties($8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype, $8b5bb24d71b8b210$var$prototypeAccessors);\nvar $8b5bb24d71b8b210$var$pp = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\n// ## Parser utilities\nvar $8b5bb24d71b8b210$var$literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\n$8b5bb24d71b8b210$var$pp.strictDirective = function(start) {\n    for(;;){\n        // Try to find string literal.\n        $8b5bb24d71b8b210$var$skipWhiteSpace.lastIndex = start;\n        start += $8b5bb24d71b8b210$var$skipWhiteSpace.exec(this.input)[0].length;\n        var match = $8b5bb24d71b8b210$var$literal.exec(this.input.slice(start));\n        if (!match) return false;\n        if ((match[1] || match[2]) === \"use strict\") {\n            $8b5bb24d71b8b210$var$skipWhiteSpace.lastIndex = start + match[0].length;\n            var spaceAfter = $8b5bb24d71b8b210$var$skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n            var next = this.input.charAt(end);\n            return next === \";\" || next === \"}\" || $8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.test(spaceAfter[0]) && !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\");\n        }\n        start += match[0].length;\n        // Skip semicolon, if any.\n        $8b5bb24d71b8b210$var$skipWhiteSpace.lastIndex = start;\n        start += $8b5bb24d71b8b210$var$skipWhiteSpace.exec(this.input)[0].length;\n        if (this.input[start] === \";\") start++;\n    }\n};\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n$8b5bb24d71b8b210$var$pp.eat = function(type) {\n    if (this.type === type) {\n        this.next();\n        return true;\n    } else return false;\n};\n// Tests whether parsed token is a contextual keyword.\n$8b5bb24d71b8b210$var$pp.isContextual = function(name) {\n    return this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name && this.value === name && !this.containsEsc;\n};\n// Consumes contextual keyword if possible.\n$8b5bb24d71b8b210$var$pp.eatContextual = function(name) {\n    if (!this.isContextual(name)) return false;\n    this.next();\n    return true;\n};\n// Asserts that following token is given contextual keyword.\n$8b5bb24d71b8b210$var$pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) this.unexpected();\n};\n// Test whether a semicolon can be inserted at the current position.\n$8b5bb24d71b8b210$var$pp.canInsertSemicolon = function() {\n    return this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eof || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR || $8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.test(this.input.slice(this.lastTokEnd, this.start));\n};\n$8b5bb24d71b8b210$var$pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n        if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n        return true;\n    }\n};\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n$8b5bb24d71b8b210$var$pp.semicolon = function() {\n    if (!this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi) && !this.insertSemicolon()) this.unexpected();\n};\n$8b5bb24d71b8b210$var$pp.afterTrailingComma = function(tokType, notNext) {\n    if (this.type === tokType) {\n        if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n        if (!notNext) this.next();\n        return true;\n    }\n};\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n$8b5bb24d71b8b210$var$pp.expect = function(type) {\n    this.eat(type) || this.unexpected();\n};\n// Raise an unexpected token error.\n$8b5bb24d71b8b210$var$pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\nfunction $8b5bb24d71b8b210$var$DestructuringErrors() {\n    this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;\n}\n$8b5bb24d71b8b210$var$pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n    if (!refDestructuringErrors) return;\n    if (refDestructuringErrors.trailingComma > -1) this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\");\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n    if (parens > -1) this.raiseRecoverable(parens, \"Parenthesized pattern\");\n};\n$8b5bb24d71b8b210$var$pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    if (!refDestructuringErrors) return false;\n    var shorthandAssign = refDestructuringErrors.shorthandAssign;\n    var doubleProto = refDestructuringErrors.doubleProto;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\");\n    if (doubleProto >= 0) this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\");\n};\n$8b5bb24d71b8b210$var$pp.checkYieldAwaitInDefaultParams = function() {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) this.raise(this.yieldPos, \"Yield expression cannot be a default value\");\n    if (this.awaitPos) this.raise(this.awaitPos, \"Await expression cannot be a default value\");\n};\n$8b5bb24d71b8b210$var$pp.isSimpleAssignTarget = function(expr) {\n    if (expr.type === \"ParenthesizedExpression\") return this.isSimpleAssignTarget(expr.expression);\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\";\n};\nvar $8b5bb24d71b8b210$var$pp$1 = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\n// ### Statement parsing\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n$8b5bb24d71b8b210$var$pp$1.parseTopLevel = function(node) {\n    var exports = {};\n    if (!node.body) node.body = [];\n    while(this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eof){\n        var stmt = this.parseStatement(null, true, exports);\n        node.body.push(stmt);\n    }\n    if (this.inModule) for(var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1){\n        var name = list[i];\n        this.raiseRecoverable(this.undefinedExports[name].start, \"Export '\" + name + \"' is not defined\");\n    }\n    this.adaptDirectivePrologue(node.body);\n    this.next();\n    node.sourceType = this.options.sourceType;\n    return this.finishNode(node, \"Program\");\n};\nvar $8b5bb24d71b8b210$var$loopLabel = {\n    kind: \"loop\"\n}, $8b5bb24d71b8b210$var$switchLabel = {\n    kind: \"switch\"\n};\n$8b5bb24d71b8b210$var$pp$1.isLet = function(context) {\n    if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) return false;\n    $8b5bb24d71b8b210$var$skipWhiteSpace.lastIndex = this.pos;\n    var skip = $8b5bb24d71b8b210$var$skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === 91) return true;\n     // '['\n    if (context) return false;\n    if (nextCh === 123) return true;\n     // '{'\n    if ($8b5bb24d71b8b210$export$56b48cc5d7560ffb(nextCh, true)) {\n        var pos = next + 1;\n        while($8b5bb24d71b8b210$export$332f4d7bee38db93(this.input.charCodeAt(pos), true))++pos;\n        var ident = this.input.slice(next, pos);\n        if (!$8b5bb24d71b8b210$var$keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n};\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\n$8b5bb24d71b8b210$var$pp$1.isAsyncFunction = function() {\n    if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\")) return false;\n    $8b5bb24d71b8b210$var$skipWhiteSpace.lastIndex = this.pos;\n    var skip = $8b5bb24d71b8b210$var$skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length;\n    return !$8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === \"function\" && (next + 8 === this.input.length || !$8b5bb24d71b8b210$export$332f4d7bee38db93(this.input.charAt(next + 8)));\n};\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n$8b5bb24d71b8b210$var$pp$1.parseStatement = function(context, topLevel, exports) {\n    var starttype = this.type, node = this.startNode(), kind;\n    if (this.isLet(context)) {\n        starttype = $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._var;\n        kind = \"let\";\n    }\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n    switch(starttype){\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._break:\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._continue:\n            return this.parseBreakContinueStatement(node, starttype.keyword);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._debugger:\n            return this.parseDebuggerStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._do:\n            return this.parseDoStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._for:\n            return this.parseForStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._function:\n            // Function as sole body of either an if statement or a labeled statement\n            // works, but not when it is part of a labeled statement that is the sole\n            // body of an if statement.\n            if (context && (this.strict || context !== \"if\" && context !== \"label\") && this.options.ecmaVersion >= 6) this.unexpected();\n            return this.parseFunctionStatement(node, false, !context);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._class:\n            if (context) this.unexpected();\n            return this.parseClass(node, true);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._if:\n            return this.parseIfStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._return:\n            return this.parseReturnStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._switch:\n            return this.parseSwitchStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._throw:\n            return this.parseThrowStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._try:\n            return this.parseTryStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._const:\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._var:\n            kind = kind || this.value;\n            if (context && kind !== \"var\") this.unexpected();\n            return this.parseVarStatement(node, kind);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._while:\n            return this.parseWhileStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._with:\n            return this.parseWithStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL:\n            return this.parseBlock(true, node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi:\n            return this.parseEmptyStatement(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._export:\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._import:\n            if (this.options.ecmaVersion > 10 && starttype === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._import) {\n                $8b5bb24d71b8b210$var$skipWhiteSpace.lastIndex = this.pos;\n                var skip = $8b5bb24d71b8b210$var$skipWhiteSpace.exec(this.input);\n                var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n                if (nextCh === 40 || nextCh === 46) return this.parseExpressionStatement(node, this.parseExpression());\n            }\n            if (!this.options.allowImportExportEverywhere) {\n                if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n                if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n            }\n            return starttype === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._import ? this.parseImport(node) : this.parseExport(node, exports);\n        // If the statement does not start with a statement keyword or a\n        // brace, it's an ExpressionStatement or LabeledStatement. We\n        // simply start parsing an expression, and afterwards, if the\n        // next token is a colon and the expression was a simple\n        // Identifier node, we switch to interpreting it as a label.\n        default:\n            if (this.isAsyncFunction()) {\n                if (context) this.unexpected();\n                this.next();\n                return this.parseFunctionStatement(node, true, !context);\n            }\n            var maybeName = this.value, expr = this.parseExpression();\n            if (starttype === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name && expr.type === \"Identifier\" && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.colon)) return this.parseLabeledStatement(node, maybeName, expr, context);\n            else return this.parseExpressionStatement(node, expr);\n    }\n};\n$8b5bb24d71b8b210$var$pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var isBreak = keyword === \"break\";\n    this.next();\n    if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi) || this.insertSemicolon()) node.label = null;\n    else if (this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name) this.unexpected();\n    else {\n        node.label = this.parseIdent();\n        this.semicolon();\n    }\n    // Verify that there is an actual destination to break or\n    // continue to.\n    var i = 0;\n    for(; i < this.labels.length; ++i){\n        var lab = this.labels[i];\n        if (node.label == null || lab.name === node.label.name) {\n            if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n            if (node.label && isBreak) break;\n        }\n    }\n    if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseDebuggerStatement = function(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseDoStatement = function(node) {\n    this.next();\n    this.labels.push($8b5bb24d71b8b210$var$loopLabel);\n    node.body = this.parseStatement(\"do\");\n    this.labels.pop();\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8._while);\n    node.test = this.parseParenExpression();\n    if (this.options.ecmaVersion >= 6) this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi);\n    else this.semicolon();\n    return this.finishNode(node, \"DoWhileStatement\");\n};\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n$8b5bb24d71b8b210$var$pp$1.parseForStatement = function(node) {\n    this.next();\n    var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual(\"await\") ? this.lastTokStart : -1;\n    this.labels.push($8b5bb24d71b8b210$var$loopLabel);\n    this.enterScope(0);\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL);\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi) {\n        if (awaitAt > -1) this.unexpected(awaitAt);\n        return this.parseFor(node, null);\n    }\n    var isLet = this.isLet();\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._var || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._const || isLet) {\n        var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n        this.next();\n        this.parseVar(init$1, true, kind);\n        this.finishNode(init$1, \"VariableDeclaration\");\n        if ((this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && init$1.declarations.length === 1) {\n            if (this.options.ecmaVersion >= 9) {\n                if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._in) {\n                    if (awaitAt > -1) this.unexpected(awaitAt);\n                } else node.await = awaitAt > -1;\n            }\n            return this.parseForIn(node, init$1);\n        }\n        if (awaitAt > -1) this.unexpected(awaitAt);\n        return this.parseFor(node, init$1);\n    }\n    var refDestructuringErrors = new $8b5bb24d71b8b210$var$DestructuringErrors;\n    var init = this.parseExpression(true, refDestructuringErrors);\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n        if (this.options.ecmaVersion >= 9) {\n            if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._in) {\n                if (awaitAt > -1) this.unexpected(awaitAt);\n            } else node.await = awaitAt > -1;\n        }\n        this.toAssignable(init, false, refDestructuringErrors);\n        this.checkLVal(init);\n        return this.parseForIn(node, init);\n    } else this.checkExpressionErrors(refDestructuringErrors, true);\n    if (awaitAt > -1) this.unexpected(awaitAt);\n    return this.parseFor(node, init);\n};\n$8b5bb24d71b8b210$var$pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, $8b5bb24d71b8b210$var$FUNC_STATEMENT | (declarationPosition ? 0 : $8b5bb24d71b8b210$var$FUNC_HANGING_STATEMENT), false, isAsync);\n};\n$8b5bb24d71b8b210$var$pp$1.parseIfStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    // allow function declarations in branches, but only in non-strict mode\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n    this.next();\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n    if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi) || this.insertSemicolon()) node.argument = null;\n    else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n    }\n    return this.finishNode(node, \"ReturnStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseSwitchStatement = function(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL);\n    this.labels.push($8b5bb24d71b8b210$var$switchLabel);\n    this.enterScope(0);\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n    var cur;\n    for(var sawDefault = false; this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR;)if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._case || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._default) {\n        var isCase = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._case;\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        node.cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) cur.test = this.parseExpression();\n        else {\n            if (sawDefault) this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\");\n            sawDefault = true;\n            cur.test = null;\n        }\n        this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.colon);\n    } else {\n        if (!cur) this.unexpected();\n        cur.consequent.push(this.parseStatement(null));\n    }\n    this.exitScope();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseThrowStatement = function(node) {\n    this.next();\n    if ($8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n};\n// Reused empty array added for node fields that are always empty.\nvar $8b5bb24d71b8b210$var$empty = [];\n$8b5bb24d71b8b210$var$pp$1.parseTryStatement = function(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._catch) {\n        var clause = this.startNode();\n        this.next();\n        if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL)) {\n            clause.param = this.parseBindingAtom();\n            var simple = clause.param.type === \"Identifier\";\n            this.enterScope(simple ? $8b5bb24d71b8b210$var$SCOPE_SIMPLE_CATCH : 0);\n            this.checkLVal(clause.param, simple ? $8b5bb24d71b8b210$var$BIND_SIMPLE_CATCH : $8b5bb24d71b8b210$var$BIND_LEXICAL);\n            this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR);\n        } else {\n            if (this.options.ecmaVersion < 10) this.unexpected();\n            clause.param = null;\n            this.enterScope(0);\n        }\n        clause.body = this.parseBlock(false);\n        this.exitScope();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n    return this.finishNode(node, \"TryStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseVarStatement = function(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseWhileStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.labels.push($8b5bb24d71b8b210$var$loopLabel);\n    node.body = this.parseStatement(\"while\");\n    this.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseWithStatement = function(node) {\n    if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(\"with\");\n    return this.finishNode(node, \"WithStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseEmptyStatement = function(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n    for(var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1){\n        var label = list[i$1];\n        if (label.name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    }\n    var kind = this.type.isLoop ? \"loop\" : this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._switch ? \"switch\" : null;\n    for(var i = this.labels.length - 1; i >= 0; i--){\n        var label$1 = this.labels[i];\n        if (label$1.statementStart === node.start) {\n            // Update information about previous labels on this node\n            label$1.statementStart = this.start;\n            label$1.kind = kind;\n        } else break;\n    }\n    this.labels.push({\n        name: maybeName,\n        kind: kind,\n        statementStart: this.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n};\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n$8b5bb24d71b8b210$var$pp$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n    if (createNewLexicalScope === void 0) createNewLexicalScope = true;\n    if (node === void 0) node = this.startNode();\n    node.body = [];\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL);\n    if (createNewLexicalScope) this.enterScope(0);\n    while(this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR){\n        var stmt = this.parseStatement(null);\n        node.body.push(stmt);\n    }\n    if (exitStrict) this.strict = false;\n    this.next();\n    if (createNewLexicalScope) this.exitScope();\n    return this.finishNode(node, \"BlockStatement\");\n};\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n$8b5bb24d71b8b210$var$pp$1.parseFor = function(node, init) {\n    node.init = init;\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi);\n    node.test = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi ? null : this.parseExpression();\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi);\n    node.update = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR ? null : this.parseExpression();\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n};\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n$8b5bb24d71b8b210$var$pp$1.parseForIn = function(node, init) {\n    var isForIn = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._in;\n    this.next();\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) this.raise(init.start, (isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\");\n    else if (init.type === \"AssignmentPattern\") this.raise(init.start, \"Invalid left-hand side in for-loop\");\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n};\n// Parse a list of variable declarations.\n$8b5bb24d71b8b210$var$pp$1.parseVar = function(node, isFor, kind) {\n    node.declarations = [];\n    node.kind = kind;\n    for(;;){\n        var decl = this.startNode();\n        this.parseVarId(decl, kind);\n        if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eq)) decl.init = this.parseMaybeAssign(isFor);\n        else if (kind === \"const\" && !(this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) this.unexpected();\n        else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._in || this.isContextual(\"of\")))) this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n        else decl.init = null;\n        node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n        if (!this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma)) break;\n    }\n    return node;\n};\n$8b5bb24d71b8b210$var$pp$1.parseVarId = function(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? $8b5bb24d71b8b210$var$BIND_VAR : $8b5bb24d71b8b210$var$BIND_LEXICAL, false);\n};\nvar $8b5bb24d71b8b210$var$FUNC_STATEMENT = 1, $8b5bb24d71b8b210$var$FUNC_HANGING_STATEMENT = 2, $8b5bb24d71b8b210$var$FUNC_NULLABLE_ID = 4;\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\n$8b5bb24d71b8b210$var$pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n        if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star && statement & $8b5bb24d71b8b210$var$FUNC_HANGING_STATEMENT) this.unexpected();\n        node.generator = this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star);\n    }\n    if (this.options.ecmaVersion >= 8) node.async = !!isAsync;\n    if (statement & $8b5bb24d71b8b210$var$FUNC_STATEMENT) {\n        node.id = statement & $8b5bb24d71b8b210$var$FUNC_NULLABLE_ID && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name ? null : this.parseIdent();\n        if (node.id && !(statement & $8b5bb24d71b8b210$var$FUNC_HANGING_STATEMENT)) this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? $8b5bb24d71b8b210$var$BIND_VAR : $8b5bb24d71b8b210$var$BIND_LEXICAL : $8b5bb24d71b8b210$var$BIND_FUNCTION);\n    }\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope($8b5bb24d71b8b210$var$functionFlags(node.async, node.generator));\n    if (!(statement & $8b5bb24d71b8b210$var$FUNC_STATEMENT)) node.id = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name ? this.parseIdent() : null;\n    this.parseFunctionParams(node);\n    this.parseFunctionBody(node, allowExpressionBody, false);\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, statement & $8b5bb24d71b8b210$var$FUNC_STATEMENT ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseFunctionParams = function(node) {\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL);\n    node.params = this.parseBindingList($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n};\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n$8b5bb24d71b8b210$var$pp$1.parseClass = function(node, isStatement) {\n    this.next();\n    // ecma-262 14.6 Class Definitions\n    // A class definition is always strict mode code.\n    var oldStrict = this.strict;\n    this.strict = true;\n    this.parseClassId(node, isStatement);\n    this.parseClassSuper(node);\n    var classBody = this.startNode();\n    var hadConstructor = false;\n    classBody.body = [];\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL);\n    while(this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR){\n        var element = this.parseClassElement(node.superClass !== null);\n        if (element) {\n            classBody.body.push(element);\n            if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n                if (hadConstructor) this.raise(element.start, \"Duplicate constructor in the same class\");\n                hadConstructor = true;\n            }\n        }\n    }\n    this.strict = oldStrict;\n    this.next();\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseClassElement = function(constructorAllowsSuper) {\n    var this$1 = this;\n    if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi)) return null;\n    var method = this.startNode();\n    var tryContextual = function tryContextual(k, noLineBreak) {\n        if (noLineBreak === void 0) noLineBreak = false;\n        var start = this$1.start, startLoc = this$1.startLoc;\n        if (!this$1.eatContextual(k)) return false;\n        if (this$1.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) return true;\n        if (method.key) this$1.unexpected();\n        method.computed = false;\n        method.key = this$1.startNodeAt(start, startLoc);\n        method.key.name = k;\n        this$1.finishNode(method.key, \"Identifier\");\n        return false;\n    };\n    method.kind = \"method\";\n    method.static = tryContextual(\"static\");\n    var isGenerator = this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star);\n    var isAsync = false;\n    if (!isGenerator) {\n        if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n            isAsync = true;\n            isGenerator = this.options.ecmaVersion >= 9 && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star);\n        } else if (tryContextual(\"get\")) method.kind = \"get\";\n        else if (tryContextual(\"set\")) method.kind = \"set\";\n    }\n    if (!method.key) this.parsePropertyName(method);\n    var key = method.key;\n    var allowsDirectSuper = false;\n    if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (method.kind !== \"method\") this.raise(key.start, \"Constructor can't have get/set modifier\");\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\");\n        if (isAsync) this.raise(key.start, \"Constructor can't be an async method\");\n        method.kind = \"constructor\";\n        allowsDirectSuper = constructorAllowsSuper;\n    } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") this.raise(key.start, \"Classes may not have a static property named prototype\");\n    this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n    if (method.kind === \"get\" && method.value.params.length !== 0) this.raiseRecoverable(method.value.start, \"getter should have no params\");\n    if (method.kind === \"set\" && method.value.params.length !== 1) this.raiseRecoverable(method.value.start, \"setter should have exactly one param\");\n    if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\");\n    return method;\n};\n$8b5bb24d71b8b210$var$pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n    method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n    return this.finishNode(method, \"MethodDefinition\");\n};\n$8b5bb24d71b8b210$var$pp$1.parseClassId = function(node, isStatement) {\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name) {\n        node.id = this.parseIdent();\n        if (isStatement) this.checkLVal(node.id, $8b5bb24d71b8b210$var$BIND_LEXICAL, false);\n    } else {\n        if (isStatement === true) this.unexpected();\n        node.id = null;\n    }\n};\n$8b5bb24d71b8b210$var$pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8._extends) ? this.parseExprSubscripts() : null;\n};\n// Parses module export declaration.\n$8b5bb24d71b8b210$var$pp$1.parseExport = function(node, exports) {\n    this.next();\n    // export * from '...'\n    if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star)) {\n        if (this.options.ecmaVersion >= 11) {\n            if (this.eatContextual(\"as\")) {\n                node.exported = this.parseIdent(true);\n                this.checkExport(exports, node.exported.name, this.lastTokStart);\n            } else node.exported = null;\n        }\n        this.expectContextual(\"from\");\n        if (this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.string) this.unexpected();\n        node.source = this.parseExprAtom();\n        this.semicolon();\n        return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n    if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8._default)) {\n        this.checkExport(exports, \"default\", this.lastTokStart);\n        var isAsync;\n        if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._function || (isAsync = this.isAsyncFunction())) {\n            var fNode = this.startNode();\n            this.next();\n            if (isAsync) this.next();\n            node.declaration = this.parseFunction(fNode, $8b5bb24d71b8b210$var$FUNC_STATEMENT | $8b5bb24d71b8b210$var$FUNC_NULLABLE_ID, false, isAsync);\n        } else if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._class) {\n            var cNode = this.startNode();\n            node.declaration = this.parseClass(cNode, \"nullableID\");\n        } else {\n            node.declaration = this.parseMaybeAssign();\n            this.semicolon();\n        }\n        return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n        node.declaration = this.parseStatement(null);\n        if (node.declaration.type === \"VariableDeclaration\") this.checkVariableExport(exports, node.declaration.declarations);\n        else this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);\n        node.specifiers = [];\n        node.source = null;\n    } else {\n        node.declaration = null;\n        node.specifiers = this.parseExportSpecifiers(exports);\n        if (this.eatContextual(\"from\")) {\n            if (this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.string) this.unexpected();\n            node.source = this.parseExprAtom();\n        } else {\n            for(var i = 0, list = node.specifiers; i < list.length; i += 1){\n                // check for keywords used as local names\n                var spec = list[i];\n                this.checkUnreserved(spec.local);\n                // check if export is defined\n                this.checkLocalExport(spec.local);\n            }\n            node.source = null;\n        }\n        this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n$8b5bb24d71b8b210$var$pp$1.checkExport = function(exports, name, pos) {\n    if (!exports) return;\n    if ($8b5bb24d71b8b210$var$has(exports, name)) this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\");\n    exports[name] = true;\n};\n$8b5bb24d71b8b210$var$pp$1.checkPatternExport = function(exports, pat) {\n    var type = pat.type;\n    if (type === \"Identifier\") this.checkExport(exports, pat.name, pat.start);\n    else if (type === \"ObjectPattern\") for(var i = 0, list = pat.properties; i < list.length; i += 1){\n        var prop = list[i];\n        this.checkPatternExport(exports, prop);\n    }\n    else if (type === \"ArrayPattern\") for(var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1){\n        var elt = list$1[i$1];\n        if (elt) this.checkPatternExport(exports, elt);\n    }\n    else if (type === \"Property\") this.checkPatternExport(exports, pat.value);\n    else if (type === \"AssignmentPattern\") this.checkPatternExport(exports, pat.left);\n    else if (type === \"RestElement\") this.checkPatternExport(exports, pat.argument);\n    else if (type === \"ParenthesizedExpression\") this.checkPatternExport(exports, pat.expression);\n};\n$8b5bb24d71b8b210$var$pp$1.checkVariableExport = function(exports, decls) {\n    if (!exports) return;\n    for(var i = 0, list = decls; i < list.length; i += 1){\n        var decl = list[i];\n        this.checkPatternExport(exports, decl.id);\n    }\n};\n$8b5bb24d71b8b210$var$pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword === \"var\" || this.type.keyword === \"const\" || this.type.keyword === \"class\" || this.type.keyword === \"function\" || this.isLet() || this.isAsyncFunction();\n};\n// Parses a comma-separated list of module exports.\n$8b5bb24d71b8b210$var$pp$1.parseExportSpecifiers = function(exports) {\n    var nodes = [], first = true;\n    // export { x, y as z } [from '...']\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL);\n    while(!this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR)){\n        if (!first) {\n            this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma);\n            if (this.afterTrailingComma($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR)) break;\n        } else first = false;\n        var node = this.startNode();\n        node.local = this.parseIdent(true);\n        node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n        this.checkExport(exports, node.exported.name, node.exported.start);\n        nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n    return nodes;\n};\n// Parses import declaration.\n$8b5bb24d71b8b210$var$pp$1.parseImport = function(node) {\n    this.next();\n    // import '...'\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.string) {\n        node.specifiers = $8b5bb24d71b8b210$var$empty;\n        node.source = this.parseExprAtom();\n    } else {\n        node.specifiers = this.parseImportSpecifiers();\n        this.expectContextual(\"from\");\n        node.source = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.string ? this.parseExprAtom() : this.unexpected();\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n};\n// Parses a comma-separated list of module imports.\n$8b5bb24d71b8b210$var$pp$1.parseImportSpecifiers = function() {\n    var nodes = [], first = true;\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name) {\n        // import defaultObj, { x, y as z } from '...'\n        var node = this.startNode();\n        node.local = this.parseIdent();\n        this.checkLVal(node.local, $8b5bb24d71b8b210$var$BIND_LEXICAL);\n        nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n        if (!this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma)) return nodes;\n    }\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star) {\n        var node$1 = this.startNode();\n        this.next();\n        this.expectContextual(\"as\");\n        node$1.local = this.parseIdent();\n        this.checkLVal(node$1.local, $8b5bb24d71b8b210$var$BIND_LEXICAL);\n        nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n        return nodes;\n    }\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL);\n    while(!this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR)){\n        if (!first) {\n            this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma);\n            if (this.afterTrailingComma($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR)) break;\n        } else first = false;\n        var node$2 = this.startNode();\n        node$2.imported = this.parseIdent(true);\n        if (this.eatContextual(\"as\")) node$2.local = this.parseIdent();\n        else {\n            this.checkUnreserved(node$2.imported);\n            node$2.local = node$2.imported;\n        }\n        this.checkLVal(node$2.local, $8b5bb24d71b8b210$var$BIND_LEXICAL);\n        nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n    }\n    return nodes;\n};\n// Set `ExpressionStatement#directive` property for directive prologues.\n$8b5bb24d71b8b210$var$pp$1.adaptDirectivePrologue = function(statements) {\n    for(var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i)statements[i].directive = statements[i].expression.raw.slice(1, -1);\n};\n$8b5bb24d71b8b210$var$pp$1.isDirectiveCandidate = function(statement) {\n    return statement.type === \"ExpressionStatement\" && statement.expression.type === \"Literal\" && typeof statement.expression.value === \"string\" && // Reject parenthesized strings.\n    (this.input[statement.start] === '\"' || this.input[statement.start] === \"'\");\n};\nvar $8b5bb24d71b8b210$var$pp$2 = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\n// Convert existing expression atom to assignable pattern\n// if possible.\n$8b5bb24d71b8b210$var$pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 6 && node) switch(node.type){\n        case \"Identifier\":\n            if (this.inAsync && node.name === \"await\") this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\");\n            break;\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"RestElement\":\n            break;\n        case \"ObjectExpression\":\n            node.type = \"ObjectPattern\";\n            if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);\n            for(var i = 0, list = node.properties; i < list.length; i += 1){\n                var prop = list[i];\n                this.toAssignable(prop, isBinding);\n                // Early error:\n                //   AssignmentRestProperty[Yield, Await] :\n                //     `...` DestructuringAssignmentTarget[Yield, Await]\n                //\n                //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n                if (prop.type === \"RestElement\" && (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")) this.raise(prop.argument.start, \"Unexpected token\");\n            }\n            break;\n        case \"Property\":\n            // AssignmentProperty has type === \"Property\"\n            if (node.kind !== \"init\") this.raise(node.key.start, \"Object pattern can't contain getter or setter\");\n            this.toAssignable(node.value, isBinding);\n            break;\n        case \"ArrayExpression\":\n            node.type = \"ArrayPattern\";\n            if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);\n            this.toAssignableList(node.elements, isBinding);\n            break;\n        case \"SpreadElement\":\n            node.type = \"RestElement\";\n            this.toAssignable(node.argument, isBinding);\n            if (node.argument.type === \"AssignmentPattern\") this.raise(node.argument.start, \"Rest elements cannot have a default value\");\n            break;\n        case \"AssignmentExpression\":\n            if (node.operator !== \"=\") this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n            node.type = \"AssignmentPattern\";\n            delete node.operator;\n            this.toAssignable(node.left, isBinding);\n        // falls through to AssignmentPattern\n        case \"AssignmentPattern\":\n            break;\n        case \"ParenthesizedExpression\":\n            this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n            break;\n        case \"ChainExpression\":\n            this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n            break;\n        case \"MemberExpression\":\n            if (!isBinding) break;\n        default:\n            this.raise(node.start, \"Assigning to rvalue\");\n    }\n    else if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);\n    return node;\n};\n// Convert list of expression atoms to binding list.\n$8b5bb24d71b8b210$var$pp$2.toAssignableList = function(exprList, isBinding) {\n    var end = exprList.length;\n    for(var i = 0; i < end; i++){\n        var elt = exprList[i];\n        if (elt) this.toAssignable(elt, isBinding);\n    }\n    if (end) {\n        var last = exprList[end - 1];\n        if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") this.unexpected(last.argument.start);\n    }\n    return exprList;\n};\n// Parses spread element.\n$8b5bb24d71b8b210$var$pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    return this.finishNode(node, \"SpreadElement\");\n};\n$8b5bb24d71b8b210$var$pp$2.parseRestBinding = function() {\n    var node = this.startNode();\n    this.next();\n    // RestElement inside of a function parameter must be an identifier\n    if (this.options.ecmaVersion === 6 && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name) this.unexpected();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n};\n// Parses lvalue (assignable) atom.\n$8b5bb24d71b8b210$var$pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion >= 6) switch(this.type){\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketL:\n            var node = this.startNode();\n            this.next();\n            node.elements = this.parseBindingList($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketR, true, true);\n            return this.finishNode(node, \"ArrayPattern\");\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL:\n            return this.parseObj(true);\n    }\n    return this.parseIdent();\n};\n$8b5bb24d71b8b210$var$pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n    var elts = [], first = true;\n    while(!this.eat(close)){\n        if (first) first = false;\n        else this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma);\n        if (allowEmpty && this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma) elts.push(null);\n        else if (allowTrailingComma && this.afterTrailingComma(close)) break;\n        else if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.ellipsis) {\n            var rest = this.parseRestBinding();\n            this.parseBindingListItem(rest);\n            elts.push(rest);\n            if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma) this.raise(this.start, \"Comma is not permitted after the rest element\");\n            this.expect(close);\n            break;\n        } else {\n            var elem = this.parseMaybeDefault(this.start, this.startLoc);\n            this.parseBindingListItem(elem);\n            elts.push(elem);\n        }\n    }\n    return elts;\n};\n$8b5bb24d71b8b210$var$pp$2.parseBindingListItem = function(param) {\n    return param;\n};\n// Parses assignment pattern around given atom if possible.\n$8b5bb24d71b8b210$var$pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom();\n    if (this.options.ecmaVersion < 6 || !this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eq)) return left;\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n};\n// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n$8b5bb24d71b8b210$var$pp$2.checkLVal = function(expr, bindingType, checkClashes) {\n    if (bindingType === void 0) bindingType = $8b5bb24d71b8b210$var$BIND_NONE;\n    switch(expr.type){\n        case \"Identifier\":\n            if (bindingType === $8b5bb24d71b8b210$var$BIND_LEXICAL && expr.name === \"let\") this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\");\n            if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n            if (checkClashes) {\n                if ($8b5bb24d71b8b210$var$has(checkClashes, expr.name)) this.raiseRecoverable(expr.start, \"Argument name clash\");\n                checkClashes[expr.name] = true;\n            }\n            if (bindingType !== $8b5bb24d71b8b210$var$BIND_NONE && bindingType !== $8b5bb24d71b8b210$var$BIND_OUTSIDE) this.declareName(expr.name, bindingType, expr.start);\n            break;\n        case \"ChainExpression\":\n            this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n            break;\n        case \"MemberExpression\":\n            if (bindingType) this.raiseRecoverable(expr.start, \"Binding member expression\");\n            break;\n        case \"ObjectPattern\":\n            for(var i = 0, list = expr.properties; i < list.length; i += 1){\n                var prop = list[i];\n                this.checkLVal(prop, bindingType, checkClashes);\n            }\n            break;\n        case \"Property\":\n            // AssignmentProperty has type === \"Property\"\n            this.checkLVal(expr.value, bindingType, checkClashes);\n            break;\n        case \"ArrayPattern\":\n            for(var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1){\n                var elem = list$1[i$1];\n                if (elem) this.checkLVal(elem, bindingType, checkClashes);\n            }\n            break;\n        case \"AssignmentPattern\":\n            this.checkLVal(expr.left, bindingType, checkClashes);\n            break;\n        case \"RestElement\":\n            this.checkLVal(expr.argument, bindingType, checkClashes);\n            break;\n        case \"ParenthesizedExpression\":\n            this.checkLVal(expr.expression, bindingType, checkClashes);\n            break;\n        default:\n            this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n    }\n};\n// A recursive descent parser operates by defining functions for all\nvar $8b5bb24d71b8b210$var$pp$3 = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n$8b5bb24d71b8b210$var$pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\") return;\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;\n    var key = prop.key;\n    var name;\n    switch(key.type){\n        case \"Identifier\":\n            name = key.name;\n            break;\n        case \"Literal\":\n            name = String(key.value);\n            break;\n        default:\n            return;\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n        if (name === \"__proto__\" && kind === \"init\") {\n            if (propHash.proto) {\n                if (refDestructuringErrors) {\n                    if (refDestructuringErrors.doubleProto < 0) refDestructuringErrors.doubleProto = key.start;\n                } else this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n            }\n            propHash.proto = true;\n        }\n        return;\n    }\n    name = \"$\" + name;\n    var other = propHash[name];\n    if (other) {\n        var redefinition;\n        if (kind === \"init\") redefinition = this.strict && other.init || other.get || other.set;\n        else redefinition = other.init || other[kind];\n        if (redefinition) this.raiseRecoverable(key.start, \"Redefinition of property\");\n    } else other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n    };\n    other[kind] = true;\n};\n// ### Expression parsing\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n$8b5bb24d71b8b210$var$pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.expressions = [\n            expr\n        ];\n        while(this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma))node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));\n        return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n};\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n$8b5bb24d71b8b210$var$pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.isContextual(\"yield\")) {\n        if (this.inGenerator) return this.parseYield(noIn);\n        else this.exprAllowed = false;\n    }\n    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n    if (refDestructuringErrors) {\n        oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n        oldTrailingComma = refDestructuringErrors.trailingComma;\n        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n    } else {\n        refDestructuringErrors = new $8b5bb24d71b8b210$var$DestructuringErrors;\n        ownDestructuringErrors = true;\n    }\n    var startPos = this.start, startLoc = this.startLoc;\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name) this.potentialArrowAt = this.start;\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n    if (this.type.isAssign) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.operator = this.value;\n        node.left = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n        if (!ownDestructuringErrors) refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n        if (refDestructuringErrors.shorthandAssign >= node.left.start) refDestructuringErrors.shorthandAssign = -1;\n         // reset because shorthand default was used correctly\n        this.checkLVal(left);\n        this.next();\n        node.right = this.parseMaybeAssign(noIn);\n        return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true);\n    if (oldParenAssign > -1) refDestructuringErrors.parenthesizedAssign = oldParenAssign;\n    if (oldTrailingComma > -1) refDestructuringErrors.trailingComma = oldTrailingComma;\n    return left;\n};\n// Parse a ternary conditional (`?:`) operator.\n$8b5bb24d71b8b210$var$pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprOps(noIn, refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n    if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.question)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.test = expr;\n        node.consequent = this.parseMaybeAssign();\n        this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.colon);\n        node.alternate = this.parseMaybeAssign(noIn);\n        return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n};\n// Start the precedence parser.\n$8b5bb24d71b8b210$var$pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n    return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n};\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n$8b5bb24d71b8b210$var$pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop;\n    if (prec != null && (!noIn || this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._in)) {\n        if (prec > minPrec) {\n            var logical = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.logicalOR || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.logicalAND;\n            var coalesce = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.coalesce;\n            if (coalesce) // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n            // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n            prec = $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.logicalAND.binop;\n            var op = this.value;\n            this.next();\n            var startPos = this.start, startLoc = this.startLoc;\n            var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n            var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n            if (logical && this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.coalesce || coalesce && (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.logicalOR || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.logicalAND)) this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n            return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n        }\n    }\n    return left;\n};\n$8b5bb24d71b8b210$var$pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.operator = op;\n    node.right = right;\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\");\n};\n// Parse unary operators, both prefix and postfix.\n$8b5bb24d71b8b210$var$pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var startPos = this.start, startLoc = this.startLoc, expr;\n    if (this.isContextual(\"await\") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {\n        expr = this.parseAwait();\n        sawUnary = true;\n    } else if (this.type.prefix) {\n        var node = this.startNode(), update = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.incDec;\n        node.operator = this.value;\n        node.prefix = true;\n        this.next();\n        node.argument = this.parseMaybeUnary(null, true);\n        this.checkExpressionErrors(refDestructuringErrors, true);\n        if (update) this.checkLVal(node.argument);\n        else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");\n        else sawUnary = true;\n        expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else {\n        expr = this.parseExprSubscripts(refDestructuringErrors);\n        if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n        while(this.type.postfix && !this.canInsertSemicolon()){\n            var node$1 = this.startNodeAt(startPos, startLoc);\n            node$1.operator = this.value;\n            node$1.prefix = false;\n            node$1.argument = expr;\n            this.checkLVal(expr);\n            this.next();\n            expr = this.finishNode(node$1, \"UpdateExpression\");\n        }\n    }\n    if (!sawUnary && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.starstar)) return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false);\n    else return expr;\n};\n// Parse call, dot, and `[]`-subscript expressions.\n$8b5bb24d71b8b210$var$pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprAtom(refDestructuringErrors);\n    if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\") return expr;\n    var result = this.parseSubscripts(expr, startPos, startLoc);\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\n        if (refDestructuringErrors.parenthesizedAssign >= result.start) refDestructuringErrors.parenthesizedAssign = -1;\n        if (refDestructuringErrors.parenthesizedBind >= result.start) refDestructuringErrors.parenthesizedBind = -1;\n    }\n    return result;\n};\n$8b5bb24d71b8b210$var$pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;\n    var optionalChained = false;\n    while(true){\n        var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);\n        if (element.optional) optionalChained = true;\n        if (element === base || element.type === \"ArrowFunctionExpression\") {\n            if (optionalChained) {\n                var chainNode = this.startNodeAt(startPos, startLoc);\n                chainNode.expression = element;\n                element = this.finishNode(chainNode, \"ChainExpression\");\n            }\n            return element;\n        }\n        base = element;\n    }\n};\n$8b5bb24d71b8b210$var$pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {\n    var optionalSupported = this.options.ecmaVersion >= 11;\n    var optional = optionalSupported && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.questionDot);\n    if (noCalls && optional) this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\");\n    var computed = this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketL);\n    if (computed || optional && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.backQuote || this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dot)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.object = base;\n        node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");\n        node.computed = !!computed;\n        if (computed) this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketR);\n        if (optionalSupported) node.optional = optional;\n        base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL)) {\n        var refDestructuringErrors = new $8b5bb24d71b8b210$var$DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n        this.yieldPos = 0;\n        this.awaitPos = 0;\n        this.awaitIdentPos = 0;\n        var exprList = this.parseExprList($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n        if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.arrow)) {\n            this.checkPatternErrors(refDestructuringErrors, false);\n            this.checkYieldAwaitInDefaultParams();\n            if (this.awaitIdentPos > 0) this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\");\n            this.yieldPos = oldYieldPos;\n            this.awaitPos = oldAwaitPos;\n            this.awaitIdentPos = oldAwaitIdentPos;\n            return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);\n        }\n        this.checkExpressionErrors(refDestructuringErrors, true);\n        this.yieldPos = oldYieldPos || this.yieldPos;\n        this.awaitPos = oldAwaitPos || this.awaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n        var node$1 = this.startNodeAt(startPos, startLoc);\n        node$1.callee = base;\n        node$1.arguments = exprList;\n        if (optionalSupported) node$1.optional = optional;\n        base = this.finishNode(node$1, \"CallExpression\");\n    } else if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.backQuote) {\n        if (optional || optionalChained) this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n        var node$2 = this.startNodeAt(startPos, startLoc);\n        node$2.tag = base;\n        node$2.quasi = this.parseTemplate({\n            isTagged: true\n        });\n        base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n    }\n    return base;\n};\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n$8b5bb24d71b8b210$var$pp$3.parseExprAtom = function(refDestructuringErrors) {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.slash) this.readRegexp();\n    var node, canBeArrow = this.potentialArrowAt === this.start;\n    switch(this.type){\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._super:\n            if (!this.allowSuper) this.raise(this.start, \"'super' keyword outside a method\");\n            node = this.startNode();\n            this.next();\n            if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL && !this.allowDirectSuper) this.raise(node.start, \"super() call outside constructor of a subclass\");\n            // The `super` keyword can appear at below:\n            // SuperProperty:\n            //     super [ Expression ]\n            //     super . IdentifierName\n            // SuperCall:\n            //     super ( Arguments )\n            if (this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dot && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketL && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL) this.unexpected();\n            return this.finishNode(node, \"Super\");\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._this:\n            node = this.startNode();\n            this.next();\n            return this.finishNode(node, \"ThisExpression\");\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name:\n            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n            var id = this.parseIdent(false);\n            if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8._function)) return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);\n            if (canBeArrow && !this.canInsertSemicolon()) {\n                if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [\n                    id\n                ], false);\n                if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name && !containsEsc) {\n                    id = this.parseIdent(false);\n                    if (this.canInsertSemicolon() || !this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.arrow)) this.unexpected();\n                    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [\n                        id\n                    ], true);\n                }\n            }\n            return id;\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.regexp:\n            var value = this.value;\n            node = this.parseLiteral(value.value);\n            node.regex = {\n                pattern: value.pattern,\n                flags: value.flags\n            };\n            return node;\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.num:\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.string:\n            return this.parseLiteral(this.value);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._null:\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._true:\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._false:\n            node = this.startNode();\n            node.value = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._null ? null : this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._true;\n            node.raw = this.type.keyword;\n            this.next();\n            return this.finishNode(node, \"Literal\");\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL:\n            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n            if (refDestructuringErrors) {\n                if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) refDestructuringErrors.parenthesizedAssign = start;\n                if (refDestructuringErrors.parenthesizedBind < 0) refDestructuringErrors.parenthesizedBind = start;\n            }\n            return expr;\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketL:\n            node = this.startNode();\n            this.next();\n            node.elements = this.parseExprList($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketR, true, true, refDestructuringErrors);\n            return this.finishNode(node, \"ArrayExpression\");\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL:\n            return this.parseObj(false, refDestructuringErrors);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._function:\n            node = this.startNode();\n            this.next();\n            return this.parseFunction(node, 0);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._class:\n            return this.parseClass(this.startNode(), false);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._new:\n            return this.parseNew();\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.backQuote:\n            return this.parseTemplate();\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._import:\n            if (this.options.ecmaVersion >= 11) return this.parseExprImport();\n            else return this.unexpected();\n        default:\n            this.unexpected();\n    }\n};\n$8b5bb24d71b8b210$var$pp$3.parseExprImport = function() {\n    var node = this.startNode();\n    // Consume `import` as an identifier for `import.meta`.\n    // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n    if (this.containsEsc) this.raiseRecoverable(this.start, \"Escape sequence in keyword import\");\n    var meta = this.parseIdent(true);\n    switch(this.type){\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL:\n            return this.parseDynamicImport(node);\n        case $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dot:\n            node.meta = meta;\n            return this.parseImportMeta(node);\n        default:\n            this.unexpected();\n    }\n};\n$8b5bb24d71b8b210$var$pp$3.parseDynamicImport = function(node) {\n    this.next(); // skip `(`\n    // Parse node.source.\n    node.source = this.parseMaybeAssign();\n    // Verify ending.\n    if (!this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR)) {\n        var errorPos = this.start;\n        if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma) && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR)) this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n        else this.unexpected(errorPos);\n    }\n    return this.finishNode(node, \"ImportExpression\");\n};\n$8b5bb24d71b8b210$var$pp$3.parseImportMeta = function(node) {\n    this.next(); // skip `.`\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"meta\") this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\");\n    if (containsEsc) this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\");\n    if (this.options.sourceType !== \"module\") this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\");\n    return this.finishNode(node, \"MetaProperty\");\n};\n$8b5bb24d71b8b210$var$pp$3.parseLiteral = function(value) {\n    var node = this.startNode();\n    node.value = value;\n    node.raw = this.input.slice(this.start, this.end);\n    if (node.raw.charCodeAt(node.raw.length - 1) === 110) node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\");\n    this.next();\n    return this.finishNode(node, \"Literal\");\n};\n$8b5bb24d71b8b210$var$pp$3.parseParenExpression = function() {\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL);\n    var val = this.parseExpression();\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR);\n    return val;\n};\n$8b5bb24d71b8b210$var$pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n    if (this.options.ecmaVersion >= 6) {\n        this.next();\n        var innerStartPos = this.start, innerStartLoc = this.startLoc;\n        var exprList = [], first = true, lastIsComma = false;\n        var refDestructuringErrors = new $8b5bb24d71b8b210$var$DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n        this.yieldPos = 0;\n        this.awaitPos = 0;\n        // Do not save awaitIdentPos to allow checking awaits nested in parameters\n        while(this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR){\n            first ? first = false : this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma);\n            if (allowTrailingComma && this.afterTrailingComma($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR, true)) {\n                lastIsComma = true;\n                break;\n            } else if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.ellipsis) {\n                spreadStart = this.start;\n                exprList.push(this.parseParenItem(this.parseRestBinding()));\n                if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma) this.raise(this.start, \"Comma is not permitted after the rest element\");\n                break;\n            } else exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n        }\n        var innerEndPos = this.start, innerEndLoc = this.startLoc;\n        this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR);\n        if (canBeArrow && !this.canInsertSemicolon() && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.arrow)) {\n            this.checkPatternErrors(refDestructuringErrors, false);\n            this.checkYieldAwaitInDefaultParams();\n            this.yieldPos = oldYieldPos;\n            this.awaitPos = oldAwaitPos;\n            return this.parseParenArrowList(startPos, startLoc, exprList);\n        }\n        if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart);\n        if (spreadStart) this.unexpected(spreadStart);\n        this.checkExpressionErrors(refDestructuringErrors, true);\n        this.yieldPos = oldYieldPos || this.yieldPos;\n        this.awaitPos = oldAwaitPos || this.awaitPos;\n        if (exprList.length > 1) {\n            val = this.startNodeAt(innerStartPos, innerStartLoc);\n            val.expressions = exprList;\n            this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n        } else val = exprList[0];\n    } else val = this.parseParenExpression();\n    if (this.options.preserveParens) {\n        var par = this.startNodeAt(startPos, startLoc);\n        par.expression = val;\n        return this.finishNode(par, \"ParenthesizedExpression\");\n    } else return val;\n};\n$8b5bb24d71b8b210$var$pp$3.parseParenItem = function(item) {\n    return item;\n};\n$8b5bb24d71b8b210$var$pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n};\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\nvar $8b5bb24d71b8b210$var$empty$1 = [];\n$8b5bb24d71b8b210$var$pp$3.parseNew = function() {\n    if (this.containsEsc) this.raiseRecoverable(this.start, \"Escape sequence in keyword new\");\n    var node = this.startNode();\n    var meta = this.parseIdent(true);\n    if (this.options.ecmaVersion >= 6 && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dot)) {\n        node.meta = meta;\n        var containsEsc = this.containsEsc;\n        node.property = this.parseIdent(true);\n        if (node.property.name !== \"target\") this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\");\n        if (containsEsc) this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\");\n        if (!this.inNonArrowFunction()) this.raiseRecoverable(node.start, \"'new.target' can only be used in functions\");\n        return this.finishNode(node, \"MetaProperty\");\n    }\n    var startPos = this.start, startLoc = this.startLoc, isImport = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._import;\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    if (isImport && node.callee.type === \"ImportExpression\") this.raise(startPos, \"Cannot use new with import()\");\n    if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL)) node.arguments = this.parseExprList($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR, this.options.ecmaVersion >= 8, false);\n    else node.arguments = $8b5bb24d71b8b210$var$empty$1;\n    return this.finishNode(node, \"NewExpression\");\n};\n// Parse template expression.\n$8b5bb24d71b8b210$var$pp$3.parseTemplateElement = function(ref) {\n    var isTagged = ref.isTagged;\n    var elem = this.startNode();\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.invalidTemplate) {\n        if (!isTagged) this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n        elem.value = {\n            raw: this.value,\n            cooked: null\n        };\n    } else elem.value = {\n        raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.value\n    };\n    this.next();\n    elem.tail = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.backQuote;\n    return this.finishNode(elem, \"TemplateElement\");\n};\n$8b5bb24d71b8b210$var$pp$3.parseTemplate = function(ref) {\n    if (ref === void 0) ref = {};\n    var isTagged = ref.isTagged;\n    if (isTagged === void 0) isTagged = false;\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement({\n        isTagged: isTagged\n    });\n    node.quasis = [\n        curElt\n    ];\n    while(!curElt.tail){\n        if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eof) this.raise(this.pos, \"Unterminated template literal\");\n        this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dollarBraceL);\n        node.expressions.push(this.parseExpression());\n        this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR);\n        node.quasis.push(curElt = this.parseTemplateElement({\n            isTagged: isTagged\n        }));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n};\n$8b5bb24d71b8b210$var$pp$3.isAsyncProp = function(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.num || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.string || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star) && !$8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.test(this.input.slice(this.lastTokEnd, this.start));\n};\n// Parse an object literal or binding pattern.\n$8b5bb24d71b8b210$var$pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var node = this.startNode(), first = true, propHash = {};\n    node.properties = [];\n    this.next();\n    while(!this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR)){\n        if (!first) {\n            this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma);\n            if (this.options.ecmaVersion >= 5 && this.afterTrailingComma($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR)) break;\n        } else first = false;\n        var prop = this.parseProperty(isPattern, refDestructuringErrors);\n        if (!isPattern) this.checkPropClash(prop, propHash, refDestructuringErrors);\n        node.properties.push(prop);\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n$8b5bb24d71b8b210$var$pp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n    if (this.options.ecmaVersion >= 9 && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.ellipsis)) {\n        if (isPattern) {\n            prop.argument = this.parseIdent(false);\n            if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma) this.raise(this.start, \"Comma is not permitted after the rest element\");\n            return this.finishNode(prop, \"RestElement\");\n        }\n        // To disallow parenthesized identifier via `this.toAssignable()`.\n        if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL && refDestructuringErrors) {\n            if (refDestructuringErrors.parenthesizedAssign < 0) refDestructuringErrors.parenthesizedAssign = this.start;\n            if (refDestructuringErrors.parenthesizedBind < 0) refDestructuringErrors.parenthesizedBind = this.start;\n        }\n        // Parse argument.\n        prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n        // To disallow trailing comma via `this.toAssignable()`.\n        if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) refDestructuringErrors.trailingComma = this.start;\n        // Finish\n        return this.finishNode(prop, \"SpreadElement\");\n    }\n    if (this.options.ecmaVersion >= 6) {\n        prop.method = false;\n        prop.shorthand = false;\n        if (isPattern || refDestructuringErrors) {\n            startPos = this.start;\n            startLoc = this.startLoc;\n        }\n        if (!isPattern) isGenerator = this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star);\n    }\n    var containsEsc = this.containsEsc;\n    this.parsePropertyName(prop);\n    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n        isAsync = true;\n        isGenerator = this.options.ecmaVersion >= 9 && this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star);\n        this.parsePropertyName(prop, refDestructuringErrors);\n    } else isAsync = false;\n    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n    return this.finishNode(prop, \"Property\");\n};\n$8b5bb24d71b8b210$var$pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n    if ((isGenerator || isAsync) && this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.colon) this.unexpected();\n    if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.colon)) {\n        prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n        prop.kind = \"init\";\n    } else if (this.options.ecmaVersion >= 6 && this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL) {\n        if (isPattern) this.unexpected();\n        prop.kind = \"init\";\n        prop.method = true;\n        prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eq) {\n        if (isGenerator || isAsync) this.unexpected();\n        prop.kind = prop.key.name;\n        this.parsePropertyName(prop);\n        prop.value = this.parseMethod(false);\n        var paramCount = prop.kind === \"get\" ? 0 : 1;\n        if (prop.value.params.length !== paramCount) {\n            var start = prop.value.start;\n            if (prop.kind === \"get\") this.raiseRecoverable(start, \"getter should have no params\");\n            else this.raiseRecoverable(start, \"setter should have exactly one param\");\n        } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n        if (isGenerator || isAsync) this.unexpected();\n        this.checkUnreserved(prop.key);\n        if (prop.key.name === \"await\" && !this.awaitIdentPos) this.awaitIdentPos = startPos;\n        prop.kind = \"init\";\n        if (isPattern) prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n        else if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eq && refDestructuringErrors) {\n            if (refDestructuringErrors.shorthandAssign < 0) refDestructuringErrors.shorthandAssign = this.start;\n            prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n        } else prop.value = prop.key;\n        prop.shorthand = true;\n    } else this.unexpected();\n};\n$8b5bb24d71b8b210$var$pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n        if (this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketL)) {\n            prop.computed = true;\n            prop.key = this.parseMaybeAssign();\n            this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketR);\n            return prop.key;\n        } else prop.computed = false;\n    }\n    return prop.key = this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.num || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\");\n};\n// Initialize empty function node.\n$8b5bb24d71b8b210$var$pp$3.initFunction = function(node) {\n    node.id = null;\n    if (this.options.ecmaVersion >= 6) node.generator = node.expression = false;\n    if (this.options.ecmaVersion >= 8) node.async = false;\n};\n// Parse object or class method.\n$8b5bb24d71b8b210$var$pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6) node.generator = isGenerator;\n    if (this.options.ecmaVersion >= 8) node.async = !!isAsync;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope($8b5bb24d71b8b210$var$functionFlags(isAsync, node.generator) | $8b5bb24d71b8b210$var$SCOPE_SUPER | (allowDirectSuper ? $8b5bb24d71b8b210$var$SCOPE_DIRECT_SUPER : 0));\n    this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL);\n    node.params = this.parseBindingList($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBody(node, false, true);\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"FunctionExpression\");\n};\n// Parse arrow function expression with given parameters.\n$8b5bb24d71b8b210$var$pp$3.parseArrowExpression = function(node, params, isAsync) {\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.enterScope($8b5bb24d71b8b210$var$functionFlags(isAsync, false) | $8b5bb24d71b8b210$var$SCOPE_ARROW);\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8) node.async = !!isAsync;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    node.params = this.toAssignableList(params, true);\n    this.parseFunctionBody(node, true, false);\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n// Parse function body and check parameters.\n$8b5bb24d71b8b210$var$pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n    var isExpression = isArrowFunction && this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL;\n    var oldStrict = this.strict, useStrict = false;\n    if (isExpression) {\n        node.body = this.parseMaybeAssign();\n        node.expression = true;\n        this.checkParams(node, false);\n    } else {\n        var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n        if (!oldStrict || nonSimple) {\n            useStrict = this.strictDirective(this.end);\n            // If this is a strict mode function, verify that argument names\n            // are not repeated, and it does not try to bind the words `eval`\n            // or `arguments`.\n            if (useStrict && nonSimple) this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n        }\n        // Start a new scope with regard to labels and the `inFunction`\n        // flag (restore them to their old value afterwards).\n        var oldLabels = this.labels;\n        this.labels = [];\n        if (useStrict) this.strict = true;\n        // Add the params to varDeclaredNames to ensure that an error is thrown\n        // if a let/const declaration in the function clashes with one of the params.\n        this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n        // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n        if (this.strict && node.id) this.checkLVal(node.id, $8b5bb24d71b8b210$var$BIND_OUTSIDE);\n        node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n        node.expression = false;\n        this.adaptDirectivePrologue(node.body.body);\n        this.labels = oldLabels;\n    }\n    this.exitScope();\n};\n$8b5bb24d71b8b210$var$pp$3.isSimpleParamList = function(params) {\n    for(var i = 0, list = params; i < list.length; i += 1){\n        var param = list[i];\n        if (param.type !== \"Identifier\") return false;\n    }\n    return true;\n};\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n$8b5bb24d71b8b210$var$pp$3.checkParams = function(node, allowDuplicates) {\n    var nameHash = {};\n    for(var i = 0, list = node.params; i < list.length; i += 1){\n        var param = list[i];\n        this.checkLVal(param, $8b5bb24d71b8b210$var$BIND_VAR, allowDuplicates ? null : nameHash);\n    }\n};\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n$8b5bb24d71b8b210$var$pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var elts = [], first = true;\n    while(!this.eat(close)){\n        if (!first) {\n            this.expect($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma);\n            if (allowTrailingComma && this.afterTrailingComma(close)) break;\n        } else first = false;\n        var elt = void 0;\n        if (allowEmpty && this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma) elt = null;\n        else if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.ellipsis) {\n            elt = this.parseSpread(refDestructuringErrors);\n            if (refDestructuringErrors && this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma && refDestructuringErrors.trailingComma < 0) refDestructuringErrors.trailingComma = this.start;\n        } else elt = this.parseMaybeAssign(false, refDestructuringErrors);\n        elts.push(elt);\n    }\n    return elts;\n};\n$8b5bb24d71b8b210$var$pp$3.checkUnreserved = function(ref) {\n    var start = ref.start;\n    var end = ref.end;\n    var name = ref.name;\n    if (this.inGenerator && name === \"yield\") this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\");\n    if (this.inAsync && name === \"await\") this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\");\n    if (this.keywords.test(name)) this.raise(start, \"Unexpected keyword '\" + name + \"'\");\n    if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf(\"\\\\\") !== -1) return;\n    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n    if (re.test(name)) {\n        if (!this.inAsync && name === \"await\") this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\");\n        this.raiseRecoverable(start, \"The keyword '\" + name + \"' is reserved\");\n    }\n};\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n$8b5bb24d71b8b210$var$pp$3.parseIdent = function(liberal, isBinding) {\n    var node = this.startNode();\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name) node.name = this.value;\n    else if (this.type.keyword) {\n        node.name = this.type.keyword;\n        // To fix https://github.com/acornjs/acorn/issues/575\n        // `class` and `function` keywords push new context into this.context.\n        // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n        // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n        if ((node.name === \"class\" || node.name === \"function\") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) this.context.pop();\n    } else this.unexpected();\n    this.next(!!liberal);\n    this.finishNode(node, \"Identifier\");\n    if (!liberal) {\n        this.checkUnreserved(node);\n        if (node.name === \"await\" && !this.awaitIdentPos) this.awaitIdentPos = node.start;\n    }\n    return node;\n};\n// Parses yield expression inside generator.\n$8b5bb24d71b8b210$var$pp$3.parseYield = function(noIn) {\n    if (!this.yieldPos) this.yieldPos = this.start;\n    var node = this.startNode();\n    this.next();\n    if (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi || this.canInsertSemicolon() || this.type !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star && !this.type.startsExpr) {\n        node.delegate = false;\n        node.argument = null;\n    } else {\n        node.delegate = this.eat($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star);\n        node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\");\n};\n$8b5bb24d71b8b210$var$pp$3.parseAwait = function() {\n    if (!this.awaitPos) this.awaitPos = this.start;\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary(null, false);\n    return this.finishNode(node, \"AwaitExpression\");\n};\nvar $8b5bb24d71b8b210$var$pp$4 = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n$8b5bb24d71b8b210$var$pp$4.raise = function(pos, message) {\n    var loc = $8b5bb24d71b8b210$export$7af82191547c5ff7(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos;\n    err.loc = loc;\n    err.raisedAt = this.pos;\n    throw err;\n};\n$8b5bb24d71b8b210$var$pp$4.raiseRecoverable = $8b5bb24d71b8b210$var$pp$4.raise;\n$8b5bb24d71b8b210$var$pp$4.curPosition = function() {\n    if (this.options.locations) return new $8b5bb24d71b8b210$export$13807d9ee5a34a42(this.curLine, this.pos - this.lineStart);\n};\nvar $8b5bb24d71b8b210$var$pp$5 = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\nvar $8b5bb24d71b8b210$var$Scope = function Scope(flags) {\n    this.flags = flags;\n    // A list of var-declared names in the current lexical scope\n    this.var = [];\n    // A list of lexically-declared names in the current lexical scope\n    this.lexical = [];\n    // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n    this.functions = [];\n};\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n$8b5bb24d71b8b210$var$pp$5.enterScope = function(flags) {\n    this.scopeStack.push(new $8b5bb24d71b8b210$var$Scope(flags));\n};\n$8b5bb24d71b8b210$var$pp$5.exitScope = function() {\n    this.scopeStack.pop();\n};\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\n$8b5bb24d71b8b210$var$pp$5.treatFunctionsAsVarInScope = function(scope) {\n    return scope.flags & $8b5bb24d71b8b210$var$SCOPE_FUNCTION || !this.inModule && scope.flags & $8b5bb24d71b8b210$var$SCOPE_TOP;\n};\n$8b5bb24d71b8b210$var$pp$5.declareName = function(name, bindingType, pos) {\n    var redeclared = false;\n    if (bindingType === $8b5bb24d71b8b210$var$BIND_LEXICAL) {\n        var scope = this.currentScope();\n        redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n        scope.lexical.push(name);\n        if (this.inModule && scope.flags & $8b5bb24d71b8b210$var$SCOPE_TOP) delete this.undefinedExports[name];\n    } else if (bindingType === $8b5bb24d71b8b210$var$BIND_SIMPLE_CATCH) {\n        var scope$1 = this.currentScope();\n        scope$1.lexical.push(name);\n    } else if (bindingType === $8b5bb24d71b8b210$var$BIND_FUNCTION) {\n        var scope$2 = this.currentScope();\n        if (this.treatFunctionsAsVar) redeclared = scope$2.lexical.indexOf(name) > -1;\n        else redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;\n        scope$2.functions.push(name);\n    } else for(var i = this.scopeStack.length - 1; i >= 0; --i){\n        var scope$3 = this.scopeStack[i];\n        if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & $8b5bb24d71b8b210$var$SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n            redeclared = true;\n            break;\n        }\n        scope$3.var.push(name);\n        if (this.inModule && scope$3.flags & $8b5bb24d71b8b210$var$SCOPE_TOP) delete this.undefinedExports[name];\n        if (scope$3.flags & $8b5bb24d71b8b210$var$SCOPE_VAR) break;\n    }\n    if (redeclared) this.raiseRecoverable(pos, \"Identifier '\" + name + \"' has already been declared\");\n};\n$8b5bb24d71b8b210$var$pp$5.checkLocalExport = function(id) {\n    // scope.functions must be empty as Module code is always strict.\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) this.undefinedExports[id.name] = id;\n};\n$8b5bb24d71b8b210$var$pp$5.currentScope = function() {\n    return this.scopeStack[this.scopeStack.length - 1];\n};\n$8b5bb24d71b8b210$var$pp$5.currentVarScope = function() {\n    for(var i = this.scopeStack.length - 1;; i--){\n        var scope = this.scopeStack[i];\n        if (scope.flags & $8b5bb24d71b8b210$var$SCOPE_VAR) return scope;\n    }\n};\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n$8b5bb24d71b8b210$var$pp$5.currentThisScope = function() {\n    for(var i = this.scopeStack.length - 1;; i--){\n        var scope = this.scopeStack[i];\n        if (scope.flags & $8b5bb24d71b8b210$var$SCOPE_VAR && !(scope.flags & $8b5bb24d71b8b210$var$SCOPE_ARROW)) return scope;\n    }\n};\nvar $8b5bb24d71b8b210$export$85c928794f8d04d4 = function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    if (parser.options.locations) this.loc = new $8b5bb24d71b8b210$export$7387db7caf96fcdb(parser, loc);\n    if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;\n    if (parser.options.ranges) this.range = [\n        pos,\n        0\n    ];\n};\n// Start an AST node, attaching a start offset.\nvar $8b5bb24d71b8b210$var$pp$6 = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\n$8b5bb24d71b8b210$var$pp$6.startNode = function() {\n    return new $8b5bb24d71b8b210$export$85c928794f8d04d4(this, this.start, this.startLoc);\n};\n$8b5bb24d71b8b210$var$pp$6.startNodeAt = function(pos, loc) {\n    return new $8b5bb24d71b8b210$export$85c928794f8d04d4(this, pos, loc);\n};\n// Finish an AST node, adding `type` and `end` properties.\nfunction $8b5bb24d71b8b210$var$finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    if (this.options.locations) node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    return node;\n}\n$8b5bb24d71b8b210$var$pp$6.finishNode = function(node, type) {\n    return $8b5bb24d71b8b210$var$finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n};\n// Finish node at given position\n$8b5bb24d71b8b210$var$pp$6.finishNodeAt = function(node, type, pos, loc) {\n    return $8b5bb24d71b8b210$var$finishNodeAt.call(this, node, type, pos, loc);\n};\n// The algorithm used to determine whether a regexp can appear at a\nvar $8b5bb24d71b8b210$export$68e7b4c4d99215d9 = function TokContext(token, isExpr, preserveSpace, override, generator) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n    this.generator = !!generator;\n};\nvar $8b5bb24d71b8b210$export$2b5f701edfbd6f00 = {\n    b_stat: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"{\", false),\n    b_expr: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"{\", true),\n    b_tmpl: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"${\", false),\n    p_stat: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"(\", false),\n    p_expr: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"(\", true),\n    q_tmpl: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"`\", true, true, function(p) {\n        return p.tryReadTemplateToken();\n    }),\n    f_stat: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"function\", false),\n    f_expr: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"function\", true),\n    f_expr_gen: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"function\", true, false, null, true),\n    f_gen: new $8b5bb24d71b8b210$export$68e7b4c4d99215d9(\"function\", false, false, null, true)\n};\nvar $8b5bb24d71b8b210$var$pp$7 = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\n$8b5bb24d71b8b210$var$pp$7.initialContext = function() {\n    return [\n        $8b5bb24d71b8b210$export$2b5f701edfbd6f00.b_stat\n    ];\n};\n$8b5bb24d71b8b210$var$pp$7.braceIsBlock = function(prevType) {\n    var parent = this.curContext();\n    if (parent === $8b5bb24d71b8b210$export$2b5f701edfbd6f00.f_expr || parent === $8b5bb24d71b8b210$export$2b5f701edfbd6f00.f_stat) return true;\n    if (prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.colon && (parent === $8b5bb24d71b8b210$export$2b5f701edfbd6f00.b_stat || parent === $8b5bb24d71b8b210$export$2b5f701edfbd6f00.b_expr)) return !parent.isExpr;\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._return || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name && this.exprAllowed) return $8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.test(this.input.slice(this.lastTokEnd, this.start));\n    if (prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._else || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eof || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.arrow) return true;\n    if (prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL) return parent === $8b5bb24d71b8b210$export$2b5f701edfbd6f00.b_stat;\n    if (prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._var || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._const || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name) return false;\n    return !this.exprAllowed;\n};\n$8b5bb24d71b8b210$var$pp$7.inGeneratorContext = function() {\n    for(var i = this.context.length - 1; i >= 1; i--){\n        var context = this.context[i];\n        if (context.token === \"function\") return context.generator;\n    }\n    return false;\n};\n$8b5bb24d71b8b210$var$pp$7.updateContext = function(prevType) {\n    var update, type = this.type;\n    if (type.keyword && prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dot) this.exprAllowed = false;\n    else if (update = type.updateContext) update.call(this, prevType);\n    else this.exprAllowed = type.beforeExpr;\n};\n// Token-specific context update code\n$8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR.updateContext = $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR.updateContext = function() {\n    if (this.context.length === 1) {\n        this.exprAllowed = true;\n        return;\n    }\n    var out = this.context.pop();\n    if (out === $8b5bb24d71b8b210$export$2b5f701edfbd6f00.b_stat && this.curContext().token === \"function\") out = this.context.pop();\n    this.exprAllowed = !out.isExpr;\n};\n$8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? $8b5bb24d71b8b210$export$2b5f701edfbd6f00.b_stat : $8b5bb24d71b8b210$export$2b5f701edfbd6f00.b_expr);\n    this.exprAllowed = true;\n};\n$8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dollarBraceL.updateContext = function() {\n    this.context.push($8b5bb24d71b8b210$export$2b5f701edfbd6f00.b_tmpl);\n    this.exprAllowed = true;\n};\n$8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._if || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._for || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._with || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._while;\n    this.context.push(statementParens ? $8b5bb24d71b8b210$export$2b5f701edfbd6f00.p_stat : $8b5bb24d71b8b210$export$2b5f701edfbd6f00.p_expr);\n    this.exprAllowed = true;\n};\n$8b5bb24d71b8b210$export$b54c7ea7aabba5c8.incDec.updateContext = function() {\n// tokExprAllowed stays unchanged\n};\n$8b5bb24d71b8b210$export$b54c7ea7aabba5c8._function.updateContext = $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._class.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi && prevType !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._else && !(prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._return && $8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.colon || prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL) && this.curContext() === $8b5bb24d71b8b210$export$2b5f701edfbd6f00.b_stat)) this.context.push($8b5bb24d71b8b210$export$2b5f701edfbd6f00.f_expr);\n    else this.context.push($8b5bb24d71b8b210$export$2b5f701edfbd6f00.f_stat);\n    this.exprAllowed = false;\n};\n$8b5bb24d71b8b210$export$b54c7ea7aabba5c8.backQuote.updateContext = function() {\n    if (this.curContext() === $8b5bb24d71b8b210$export$2b5f701edfbd6f00.q_tmpl) this.context.pop();\n    else this.context.push($8b5bb24d71b8b210$export$2b5f701edfbd6f00.q_tmpl);\n    this.exprAllowed = false;\n};\n$8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star.updateContext = function(prevType) {\n    if (prevType === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8._function) {\n        var index = this.context.length - 1;\n        if (this.context[index] === $8b5bb24d71b8b210$export$2b5f701edfbd6f00.f_expr) this.context[index] = $8b5bb24d71b8b210$export$2b5f701edfbd6f00.f_expr_gen;\n        else this.context[index] = $8b5bb24d71b8b210$export$2b5f701edfbd6f00.f_gen;\n    }\n    this.exprAllowed = true;\n};\n$8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name.updateContext = function(prevType) {\n    var allowed = false;\n    if (this.options.ecmaVersion >= 6 && prevType !== $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dot) {\n        if (this.value === \"of\" && !this.exprAllowed || this.value === \"yield\" && this.inGeneratorContext()) allowed = true;\n    }\n    this.exprAllowed = allowed;\n};\n// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n// #table-binary-unicode-properties\nvar $8b5bb24d71b8b210$var$ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar $8b5bb24d71b8b210$var$ecma10BinaryProperties = $8b5bb24d71b8b210$var$ecma9BinaryProperties + \" Extended_Pictographic\";\nvar $8b5bb24d71b8b210$var$ecma11BinaryProperties = $8b5bb24d71b8b210$var$ecma10BinaryProperties;\nvar $8b5bb24d71b8b210$var$unicodeBinaryProperties = {\n    9: $8b5bb24d71b8b210$var$ecma9BinaryProperties,\n    10: $8b5bb24d71b8b210$var$ecma10BinaryProperties,\n    11: $8b5bb24d71b8b210$var$ecma11BinaryProperties\n};\n// #table-unicode-general-category-values\nvar $8b5bb24d71b8b210$var$unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n// #table-unicode-script-values\nvar $8b5bb24d71b8b210$var$ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar $8b5bb24d71b8b210$var$ecma10ScriptValues = $8b5bb24d71b8b210$var$ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar $8b5bb24d71b8b210$var$ecma11ScriptValues = $8b5bb24d71b8b210$var$ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar $8b5bb24d71b8b210$var$unicodeScriptValues = {\n    9: $8b5bb24d71b8b210$var$ecma9ScriptValues,\n    10: $8b5bb24d71b8b210$var$ecma10ScriptValues,\n    11: $8b5bb24d71b8b210$var$ecma11ScriptValues\n};\nvar $8b5bb24d71b8b210$var$data = {};\nfunction $8b5bb24d71b8b210$var$buildUnicodeData(ecmaVersion) {\n    var d = $8b5bb24d71b8b210$var$data[ecmaVersion] = {\n        binary: $8b5bb24d71b8b210$var$wordsRegexp($8b5bb24d71b8b210$var$unicodeBinaryProperties[ecmaVersion] + \" \" + $8b5bb24d71b8b210$var$unicodeGeneralCategoryValues),\n        nonBinary: {\n            General_Category: $8b5bb24d71b8b210$var$wordsRegexp($8b5bb24d71b8b210$var$unicodeGeneralCategoryValues),\n            Script: $8b5bb24d71b8b210$var$wordsRegexp($8b5bb24d71b8b210$var$unicodeScriptValues[ecmaVersion])\n        }\n    };\n    d.nonBinary.Script_Extensions = d.nonBinary.Script;\n    d.nonBinary.gc = d.nonBinary.General_Category;\n    d.nonBinary.sc = d.nonBinary.Script;\n    d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\n$8b5bb24d71b8b210$var$buildUnicodeData(9);\n$8b5bb24d71b8b210$var$buildUnicodeData(10);\n$8b5bb24d71b8b210$var$buildUnicodeData(11);\nvar $8b5bb24d71b8b210$var$pp$8 = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\nvar $8b5bb24d71b8b210$var$RegExpValidationState = function RegExpValidationState(parser) {\n    this.parser = parser;\n    this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n    this.unicodeProperties = $8b5bb24d71b8b210$var$data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];\n    this.source = \"\";\n    this.flags = \"\";\n    this.start = 0;\n    this.switchU = false;\n    this.switchN = false;\n    this.pos = 0;\n    this.lastIntValue = 0;\n    this.lastStringValue = \"\";\n    this.lastAssertionIsQuantifiable = false;\n    this.numCapturingParens = 0;\n    this.maxBackReference = 0;\n    this.groupNames = [];\n    this.backReferenceNames = [];\n};\n$8b5bb24d71b8b210$var$RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {\n    var unicode = flags.indexOf(\"u\") !== -1;\n    this.start = start | 0;\n    this.source = pattern + \"\";\n    this.flags = flags;\n    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n$8b5bb24d71b8b210$var$RegExpValidationState.prototype.raise = function raise(message) {\n    this.parser.raiseRecoverable(this.start, \"Invalid regular expression: /\" + this.source + \"/: \" + message);\n};\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\n$8b5bb24d71b8b210$var$RegExpValidationState.prototype.at = function at(i, forceU) {\n    if (forceU === void 0) forceU = false;\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) return -1;\n    var c = s.charCodeAt(i);\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) return c;\n    var next = s.charCodeAt(i + 1);\n    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c;\n};\n$8b5bb24d71b8b210$var$RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {\n    if (forceU === void 0) forceU = false;\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) return l;\n    var c = s.charCodeAt(i), next;\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) return i + 1;\n    return i + 2;\n};\n$8b5bb24d71b8b210$var$RegExpValidationState.prototype.current = function current(forceU) {\n    if (forceU === void 0) forceU = false;\n    return this.at(this.pos, forceU);\n};\n$8b5bb24d71b8b210$var$RegExpValidationState.prototype.lookahead = function lookahead(forceU) {\n    if (forceU === void 0) forceU = false;\n    return this.at(this.nextIndex(this.pos, forceU), forceU);\n};\n$8b5bb24d71b8b210$var$RegExpValidationState.prototype.advance = function advance(forceU) {\n    if (forceU === void 0) forceU = false;\n    this.pos = this.nextIndex(this.pos, forceU);\n};\n$8b5bb24d71b8b210$var$RegExpValidationState.prototype.eat = function eat(ch, forceU) {\n    if (forceU === void 0) forceU = false;\n    if (this.current(forceU) === ch) {\n        this.advance(forceU);\n        return true;\n    }\n    return false;\n};\nfunction $8b5bb24d71b8b210$var$codePointToString(ch) {\n    if (ch <= 0xFFFF) return String.fromCharCode(ch);\n    ch -= 0x10000;\n    return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);\n}\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */ $8b5bb24d71b8b210$var$pp$8.validateRegExpFlags = function(state) {\n    var validFlags = state.validFlags;\n    var flags = state.flags;\n    for(var i = 0; i < flags.length; i++){\n        var flag = flags.charAt(i);\n        if (validFlags.indexOf(flag) === -1) this.raise(state.start, \"Invalid regular expression flag\");\n        if (flags.indexOf(flag, i + 1) > -1) this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n};\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */ $8b5bb24d71b8b210$var$pp$8.validateRegExpPattern = function(state) {\n    this.regexp_pattern(state);\n    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n    // parsing contains a |GroupName|, reparse with the goal symbol\n    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n    // exception if _P_ did not conform to the grammar, if any elements of _P_\n    // were not matched by the parse, or if any Early Error conditions exist.\n    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n        state.switchN = true;\n        this.regexp_pattern(state);\n    }\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n$8b5bb24d71b8b210$var$pp$8.regexp_pattern = function(state) {\n    state.pos = 0;\n    state.lastIntValue = 0;\n    state.lastStringValue = \"\";\n    state.lastAssertionIsQuantifiable = false;\n    state.numCapturingParens = 0;\n    state.maxBackReference = 0;\n    state.groupNames.length = 0;\n    state.backReferenceNames.length = 0;\n    this.regexp_disjunction(state);\n    if (state.pos !== state.source.length) {\n        // Make the same messages as V8.\n        if (state.eat(0x29 /* ) */ )) state.raise(\"Unmatched ')'\");\n        if (state.eat(0x5D /* ] */ ) || state.eat(0x7D /* } */ )) state.raise(\"Lone quantifier brackets\");\n    }\n    if (state.maxBackReference > state.numCapturingParens) state.raise(\"Invalid escape\");\n    for(var i = 0, list = state.backReferenceNames; i < list.length; i += 1){\n        var name = list[i];\n        if (state.groupNames.indexOf(name) === -1) state.raise(\"Invalid named capture referenced\");\n    }\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n$8b5bb24d71b8b210$var$pp$8.regexp_disjunction = function(state) {\n    this.regexp_alternative(state);\n    while(state.eat(0x7C /* | */ ))this.regexp_alternative(state);\n    // Make the same message as V8.\n    if (this.regexp_eatQuantifier(state, true)) state.raise(\"Nothing to repeat\");\n    if (state.eat(0x7B /* { */ )) state.raise(\"Lone quantifier brackets\");\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n$8b5bb24d71b8b210$var$pp$8.regexp_alternative = function(state) {\n    while(state.pos < state.source.length && this.regexp_eatTerm(state));\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\n$8b5bb24d71b8b210$var$pp$8.regexp_eatTerm = function(state) {\n    if (this.regexp_eatAssertion(state)) {\n        // Handle `QuantifiableAssertion Quantifier` alternative.\n        // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n        // is a QuantifiableAssertion.\n        if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) // Make the same message as V8.\n        {\n            if (state.switchU) state.raise(\"Invalid quantifier\");\n        }\n        return true;\n    }\n    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n        this.regexp_eatQuantifier(state);\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\n$8b5bb24d71b8b210$var$pp$8.regexp_eatAssertion = function(state) {\n    var start = state.pos;\n    state.lastAssertionIsQuantifiable = false;\n    // ^, $\n    if (state.eat(0x5E /* ^ */ ) || state.eat(0x24 /* $ */ )) return true;\n    // \\b \\B\n    if (state.eat(0x5C /* \\ */ )) {\n        if (state.eat(0x42 /* B */ ) || state.eat(0x62 /* b */ )) return true;\n        state.pos = start;\n    }\n    // Lookahead / Lookbehind\n    if (state.eat(0x28 /* ( */ ) && state.eat(0x3F /* ? */ )) {\n        var lookbehind = false;\n        if (this.options.ecmaVersion >= 9) lookbehind = state.eat(0x3C /* < */ );\n        if (state.eat(0x3D /* = */ ) || state.eat(0x21 /* ! */ )) {\n            this.regexp_disjunction(state);\n            if (!state.eat(0x29 /* ) */ )) state.raise(\"Unterminated group\");\n            state.lastAssertionIsQuantifiable = !lookbehind;\n            return true;\n        }\n    }\n    state.pos = start;\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n$8b5bb24d71b8b210$var$pp$8.regexp_eatQuantifier = function(state, noError) {\n    if (noError === void 0) noError = false;\n    if (this.regexp_eatQuantifierPrefix(state, noError)) {\n        state.eat(0x3F /* ? */ );\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n$8b5bb24d71b8b210$var$pp$8.regexp_eatQuantifierPrefix = function(state, noError) {\n    return state.eat(0x2A /* * */ ) || state.eat(0x2B /* + */ ) || state.eat(0x3F /* ? */ ) || this.regexp_eatBracedQuantifier(state, noError);\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_eatBracedQuantifier = function(state, noError) {\n    var start = state.pos;\n    if (state.eat(0x7B /* { */ )) {\n        var min = 0, max = -1;\n        if (this.regexp_eatDecimalDigits(state)) {\n            min = state.lastIntValue;\n            if (state.eat(0x2C /* , */ ) && this.regexp_eatDecimalDigits(state)) max = state.lastIntValue;\n            if (state.eat(0x7D /* } */ )) {\n                // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n                if (max !== -1 && max < min && !noError) state.raise(\"numbers out of order in {} quantifier\");\n                return true;\n            }\n        }\n        if (state.switchU && !noError) state.raise(\"Incomplete quantifier\");\n        state.pos = start;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n$8b5bb24d71b8b210$var$pp$8.regexp_eatAtom = function(state) {\n    return this.regexp_eatPatternCharacters(state) || state.eat(0x2E /* . */ ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */ )) {\n        if (this.regexp_eatAtomEscape(state)) return true;\n        state.pos = start;\n    }\n    return false;\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_eatUncapturingGroup = function(state) {\n    var start = state.pos;\n    if (state.eat(0x28 /* ( */ )) {\n        if (state.eat(0x3F /* ? */ ) && state.eat(0x3A /* : */ )) {\n            this.regexp_disjunction(state);\n            if (state.eat(0x29 /* ) */ )) return true;\n            state.raise(\"Unterminated group\");\n        }\n        state.pos = start;\n    }\n    return false;\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_eatCapturingGroup = function(state) {\n    if (state.eat(0x28 /* ( */ )) {\n        if (this.options.ecmaVersion >= 9) this.regexp_groupSpecifier(state);\n        else if (state.current() === 0x3F /* ? */ ) state.raise(\"Invalid group\");\n        this.regexp_disjunction(state);\n        if (state.eat(0x29 /* ) */ )) {\n            state.numCapturingParens += 1;\n            return true;\n        }\n        state.raise(\"Unterminated group\");\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\n$8b5bb24d71b8b210$var$pp$8.regexp_eatExtendedAtom = function(state) {\n    return state.eat(0x2E /* . */ ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\n$8b5bb24d71b8b210$var$pp$8.regexp_eatInvalidBracedQuantifier = function(state) {\n    if (this.regexp_eatBracedQuantifier(state, true)) state.raise(\"Nothing to repeat\");\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n$8b5bb24d71b8b210$var$pp$8.regexp_eatSyntaxCharacter = function(state) {\n    var ch = state.current();\n    if ($8b5bb24d71b8b210$var$isSyntaxCharacter(ch)) {\n        state.lastIntValue = ch;\n        state.advance();\n        return true;\n    }\n    return false;\n};\nfunction $8b5bb24d71b8b210$var$isSyntaxCharacter(ch) {\n    return ch === 0x24 /* $ */  || ch >= 0x28 /* ( */  && ch <= 0x2B /* + */  || ch === 0x2E /* . */  || ch === 0x3F /* ? */  || ch >= 0x5B /* [ */  && ch <= 0x5E /* ^ */  || ch >= 0x7B /* { */  && ch <= 0x7D /* } */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\n$8b5bb24d71b8b210$var$pp$8.regexp_eatPatternCharacters = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    while((ch = state.current()) !== -1 && !$8b5bb24d71b8b210$var$isSyntaxCharacter(ch))state.advance();\n    return state.pos !== start;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\n$8b5bb24d71b8b210$var$pp$8.regexp_eatExtendedPatternCharacter = function(state) {\n    var ch = state.current();\n    if (ch !== -1 && ch !== 0x24 /* $ */  && !(ch >= 0x28 /* ( */  && ch <= 0x2B /* + */ ) && ch !== 0x2E /* . */  && ch !== 0x3F /* ? */  && ch !== 0x5B /* [ */  && ch !== 0x5E /* ^ */  && ch !== 0x7C /* | */ ) {\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\n$8b5bb24d71b8b210$var$pp$8.regexp_groupSpecifier = function(state) {\n    if (state.eat(0x3F /* ? */ )) {\n        if (this.regexp_eatGroupName(state)) {\n            if (state.groupNames.indexOf(state.lastStringValue) !== -1) state.raise(\"Duplicate capture group name\");\n            state.groupNames.push(state.lastStringValue);\n            return;\n        }\n        state.raise(\"Invalid group\");\n    }\n};\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\n$8b5bb24d71b8b210$var$pp$8.regexp_eatGroupName = function(state) {\n    state.lastStringValue = \"\";\n    if (state.eat(0x3C /* < */ )) {\n        if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */ )) return true;\n        state.raise(\"Invalid capture group name\");\n    }\n    return false;\n};\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\n$8b5bb24d71b8b210$var$pp$8.regexp_eatRegExpIdentifierName = function(state) {\n    state.lastStringValue = \"\";\n    if (this.regexp_eatRegExpIdentifierStart(state)) {\n        state.lastStringValue += $8b5bb24d71b8b210$var$codePointToString(state.lastIntValue);\n        while(this.regexp_eatRegExpIdentifierPart(state))state.lastStringValue += $8b5bb24d71b8b210$var$codePointToString(state.lastIntValue);\n        return true;\n    }\n    return false;\n};\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n$8b5bb24d71b8b210$var$pp$8.regexp_eatRegExpIdentifierStart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n    if (ch === 0x5C /* \\ */  && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) ch = state.lastIntValue;\n    if ($8b5bb24d71b8b210$var$isRegExpIdentifierStart(ch)) {\n        state.lastIntValue = ch;\n        return true;\n    }\n    state.pos = start;\n    return false;\n};\nfunction $8b5bb24d71b8b210$var$isRegExpIdentifierStart(ch) {\n    return $8b5bb24d71b8b210$export$56b48cc5d7560ffb(ch, true) || ch === 0x24 /* $ */  || ch === 0x5F /* _ */ ;\n}\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\n$8b5bb24d71b8b210$var$pp$8.regexp_eatRegExpIdentifierPart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n    if (ch === 0x5C /* \\ */  && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) ch = state.lastIntValue;\n    if ($8b5bb24d71b8b210$var$isRegExpIdentifierPart(ch)) {\n        state.lastIntValue = ch;\n        return true;\n    }\n    state.pos = start;\n    return false;\n};\nfunction $8b5bb24d71b8b210$var$isRegExpIdentifierPart(ch) {\n    return $8b5bb24d71b8b210$export$332f4d7bee38db93(ch, true) || ch === 0x24 /* $ */  || ch === 0x5F /* _ */  || ch === 0x200C /* <ZWNJ> */  || ch === 0x200D /* <ZWJ> */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\n$8b5bb24d71b8b210$var$pp$8.regexp_eatAtomEscape = function(state) {\n    if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) return true;\n    if (state.switchU) {\n        // Make the same message as V8.\n        if (state.current() === 0x63 /* c */ ) state.raise(\"Invalid unicode escape\");\n        state.raise(\"Invalid escape\");\n    }\n    return false;\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_eatBackReference = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatDecimalEscape(state)) {\n        var n = state.lastIntValue;\n        if (state.switchU) {\n            // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n            if (n > state.maxBackReference) state.maxBackReference = n;\n            return true;\n        }\n        if (n <= state.numCapturingParens) return true;\n        state.pos = start;\n    }\n    return false;\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_eatKGroupName = function(state) {\n    if (state.eat(0x6B /* k */ )) {\n        if (this.regexp_eatGroupName(state)) {\n            state.backReferenceNames.push(state.lastStringValue);\n            return true;\n        }\n        state.raise(\"Invalid named reference\");\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\n$8b5bb24d71b8b210$var$pp$8.regexp_eatCharacterEscape = function(state) {\n    return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_eatCControlLetter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x63 /* c */ )) {\n        if (this.regexp_eatControlLetter(state)) return true;\n        state.pos = start;\n    }\n    return false;\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_eatZero = function(state) {\n    if (state.current() === 0x30 /* 0 */  && !$8b5bb24d71b8b210$var$isDecimalDigit(state.lookahead())) {\n        state.lastIntValue = 0;\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n$8b5bb24d71b8b210$var$pp$8.regexp_eatControlEscape = function(state) {\n    var ch = state.current();\n    if (ch === 0x74 /* t */ ) {\n        state.lastIntValue = 0x09; /* \\t */ \n        state.advance();\n        return true;\n    }\n    if (ch === 0x6E /* n */ ) {\n        state.lastIntValue = 0x0A; /* \\n */ \n        state.advance();\n        return true;\n    }\n    if (ch === 0x76 /* v */ ) {\n        state.lastIntValue = 0x0B; /* \\v */ \n        state.advance();\n        return true;\n    }\n    if (ch === 0x66 /* f */ ) {\n        state.lastIntValue = 0x0C; /* \\f */ \n        state.advance();\n        return true;\n    }\n    if (ch === 0x72 /* r */ ) {\n        state.lastIntValue = 0x0D; /* \\r */ \n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n$8b5bb24d71b8b210$var$pp$8.regexp_eatControlLetter = function(state) {\n    var ch = state.current();\n    if ($8b5bb24d71b8b210$var$isControlLetter(ch)) {\n        state.lastIntValue = ch % 0x20;\n        state.advance();\n        return true;\n    }\n    return false;\n};\nfunction $8b5bb24d71b8b210$var$isControlLetter(ch) {\n    return ch >= 0x41 /* A */  && ch <= 0x5A /* Z */  || ch >= 0x61 /* a */  && ch <= 0x7A /* z */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n$8b5bb24d71b8b210$var$pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n    if (forceU === void 0) forceU = false;\n    var start = state.pos;\n    var switchU = forceU || state.switchU;\n    if (state.eat(0x75 /* u */ )) {\n        if (this.regexp_eatFixedHexDigits(state, 4)) {\n            var lead = state.lastIntValue;\n            if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n                var leadSurrogateEnd = state.pos;\n                if (state.eat(0x5C /* \\ */ ) && state.eat(0x75 /* u */ ) && this.regexp_eatFixedHexDigits(state, 4)) {\n                    var trail = state.lastIntValue;\n                    if (trail >= 0xDC00 && trail <= 0xDFFF) {\n                        state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n                        return true;\n                    }\n                }\n                state.pos = leadSurrogateEnd;\n                state.lastIntValue = lead;\n            }\n            return true;\n        }\n        if (switchU && state.eat(0x7B /* { */ ) && this.regexp_eatHexDigits(state) && state.eat(0x7D /* } */ ) && $8b5bb24d71b8b210$var$isValidUnicode(state.lastIntValue)) return true;\n        if (switchU) state.raise(\"Invalid unicode escape\");\n        state.pos = start;\n    }\n    return false;\n};\nfunction $8b5bb24d71b8b210$var$isValidUnicode(ch) {\n    return ch >= 0 && ch <= 0x10FFFF;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\n$8b5bb24d71b8b210$var$pp$8.regexp_eatIdentityEscape = function(state) {\n    if (state.switchU) {\n        if (this.regexp_eatSyntaxCharacter(state)) return true;\n        if (state.eat(0x2F /* / */ )) {\n            state.lastIntValue = 0x2F; /* / */ \n            return true;\n        }\n        return false;\n    }\n    var ch = state.current();\n    if (ch !== 0x63 /* c */  && (!state.switchN || ch !== 0x6B /* k */ )) {\n        state.lastIntValue = ch;\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n$8b5bb24d71b8b210$var$pp$8.regexp_eatDecimalEscape = function(state) {\n    state.lastIntValue = 0;\n    var ch = state.current();\n    if (ch >= 0x31 /* 1 */  && ch <= 0x39 /* 9 */ ) {\n        do {\n            state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */ );\n            state.advance();\n        }while ((ch = state.current()) >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ );\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n$8b5bb24d71b8b210$var$pp$8.regexp_eatCharacterClassEscape = function(state) {\n    var ch = state.current();\n    if ($8b5bb24d71b8b210$var$isCharacterClassEscape(ch)) {\n        state.lastIntValue = -1;\n        state.advance();\n        return true;\n    }\n    if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50 /* P */  || ch === 0x70 /* p */ )) {\n        state.lastIntValue = -1;\n        state.advance();\n        if (state.eat(0x7B /* { */ ) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D /* } */ )) return true;\n        state.raise(\"Invalid property name\");\n    }\n    return false;\n};\nfunction $8b5bb24d71b8b210$var$isCharacterClassEscape(ch) {\n    return ch === 0x64 /* d */  || ch === 0x44 /* D */  || ch === 0x73 /* s */  || ch === 0x53 /* S */  || ch === 0x77 /* w */  || ch === 0x57 /* W */ ;\n}\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\n$8b5bb24d71b8b210$var$pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {\n    var start = state.pos;\n    // UnicodePropertyName `=` UnicodePropertyValue\n    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */ )) {\n        var name = state.lastStringValue;\n        if (this.regexp_eatUnicodePropertyValue(state)) {\n            var value = state.lastStringValue;\n            this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n            return true;\n        }\n    }\n    state.pos = start;\n    // LoneUnicodePropertyNameOrValue\n    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n        var nameOrValue = state.lastStringValue;\n        this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n        return true;\n    }\n    return false;\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n    if (!$8b5bb24d71b8b210$var$has(state.unicodeProperties.nonBinary, name)) state.raise(\"Invalid property name\");\n    if (!state.unicodeProperties.nonBinary[name].test(value)) state.raise(\"Invalid property value\");\n};\n$8b5bb24d71b8b210$var$pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n    if (!state.unicodeProperties.binary.test(nameOrValue)) state.raise(\"Invalid property name\");\n};\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\n$8b5bb24d71b8b210$var$pp$8.regexp_eatUnicodePropertyName = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while($8b5bb24d71b8b210$var$isUnicodePropertyNameCharacter(ch = state.current())){\n        state.lastStringValue += $8b5bb24d71b8b210$var$codePointToString(ch);\n        state.advance();\n    }\n    return state.lastStringValue !== \"\";\n};\nfunction $8b5bb24d71b8b210$var$isUnicodePropertyNameCharacter(ch) {\n    return $8b5bb24d71b8b210$var$isControlLetter(ch) || ch === 0x5F /* _ */ ;\n}\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\n$8b5bb24d71b8b210$var$pp$8.regexp_eatUnicodePropertyValue = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while($8b5bb24d71b8b210$var$isUnicodePropertyValueCharacter(ch = state.current())){\n        state.lastStringValue += $8b5bb24d71b8b210$var$codePointToString(ch);\n        state.advance();\n    }\n    return state.lastStringValue !== \"\";\n};\nfunction $8b5bb24d71b8b210$var$isUnicodePropertyValueCharacter(ch) {\n    return $8b5bb24d71b8b210$var$isUnicodePropertyNameCharacter(ch) || $8b5bb24d71b8b210$var$isDecimalDigit(ch);\n}\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\n$8b5bb24d71b8b210$var$pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n    return this.regexp_eatUnicodePropertyValue(state);\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n$8b5bb24d71b8b210$var$pp$8.regexp_eatCharacterClass = function(state) {\n    if (state.eat(0x5B /* [ */ )) {\n        state.eat(0x5E /* ^ */ );\n        this.regexp_classRanges(state);\n        if (state.eat(0x5D /* ] */ )) return true;\n        // Unreachable since it threw \"unterminated regular expression\" error before.\n        state.raise(\"Unterminated character class\");\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n$8b5bb24d71b8b210$var$pp$8.regexp_classRanges = function(state) {\n    while(this.regexp_eatClassAtom(state)){\n        var left = state.lastIntValue;\n        if (state.eat(0x2D /* - */ ) && this.regexp_eatClassAtom(state)) {\n            var right = state.lastIntValue;\n            if (state.switchU && (left === -1 || right === -1)) state.raise(\"Invalid character class\");\n            if (left !== -1 && right !== -1 && left > right) state.raise(\"Range out of order in character class\");\n        }\n    }\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n$8b5bb24d71b8b210$var$pp$8.regexp_eatClassAtom = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */ )) {\n        if (this.regexp_eatClassEscape(state)) return true;\n        if (state.switchU) {\n            // Make the same message as V8.\n            var ch$1 = state.current();\n            if (ch$1 === 0x63 /* c */  || $8b5bb24d71b8b210$var$isOctalDigit(ch$1)) state.raise(\"Invalid class escape\");\n            state.raise(\"Invalid escape\");\n        }\n        state.pos = start;\n    }\n    var ch = state.current();\n    if (ch !== 0x5D /* ] */ ) {\n        state.lastIntValue = ch;\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\n$8b5bb24d71b8b210$var$pp$8.regexp_eatClassEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x62 /* b */ )) {\n        state.lastIntValue = 0x08; /* <BS> */ \n        return true;\n    }\n    if (state.switchU && state.eat(0x2D /* - */ )) {\n        state.lastIntValue = 0x2D; /* - */ \n        return true;\n    }\n    if (!state.switchU && state.eat(0x63 /* c */ )) {\n        if (this.regexp_eatClassControlLetter(state)) return true;\n        state.pos = start;\n    }\n    return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\n$8b5bb24d71b8b210$var$pp$8.regexp_eatClassControlLetter = function(state) {\n    var ch = state.current();\n    if ($8b5bb24d71b8b210$var$isDecimalDigit(ch) || ch === 0x5F /* _ */ ) {\n        state.lastIntValue = ch % 0x20;\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n$8b5bb24d71b8b210$var$pp$8.regexp_eatHexEscapeSequence = function(state) {\n    var start = state.pos;\n    if (state.eat(0x78 /* x */ )) {\n        if (this.regexp_eatFixedHexDigits(state, 2)) return true;\n        if (state.switchU) state.raise(\"Invalid escape\");\n        state.pos = start;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n$8b5bb24d71b8b210$var$pp$8.regexp_eatDecimalDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while($8b5bb24d71b8b210$var$isDecimalDigit(ch = state.current())){\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */ );\n        state.advance();\n    }\n    return state.pos !== start;\n};\nfunction $8b5bb24d71b8b210$var$isDecimalDigit(ch) {\n    return ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n$8b5bb24d71b8b210$var$pp$8.regexp_eatHexDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while($8b5bb24d71b8b210$var$isHexDigit(ch = state.current())){\n        state.lastIntValue = 16 * state.lastIntValue + $8b5bb24d71b8b210$var$hexToInt(ch);\n        state.advance();\n    }\n    return state.pos !== start;\n};\nfunction $8b5bb24d71b8b210$var$isHexDigit(ch) {\n    return ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */  || ch >= 0x41 /* A */  && ch <= 0x46 /* F */  || ch >= 0x61 /* a */  && ch <= 0x66 /* f */ ;\n}\nfunction $8b5bb24d71b8b210$var$hexToInt(ch) {\n    if (ch >= 0x41 /* A */  && ch <= 0x46 /* F */ ) return 10 + (ch - 0x41 /* A */ );\n    if (ch >= 0x61 /* a */  && ch <= 0x66 /* f */ ) return 10 + (ch - 0x61 /* a */ );\n    return ch - 0x30 /* 0 */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\n$8b5bb24d71b8b210$var$pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {\n    if (this.regexp_eatOctalDigit(state)) {\n        var n1 = state.lastIntValue;\n        if (this.regexp_eatOctalDigit(state)) {\n            var n2 = state.lastIntValue;\n            if (n1 <= 3 && this.regexp_eatOctalDigit(state)) state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n            else state.lastIntValue = n1 * 8 + n2;\n        } else state.lastIntValue = n1;\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n$8b5bb24d71b8b210$var$pp$8.regexp_eatOctalDigit = function(state) {\n    var ch = state.current();\n    if ($8b5bb24d71b8b210$var$isOctalDigit(ch)) {\n        state.lastIntValue = ch - 0x30; /* 0 */ \n        state.advance();\n        return true;\n    }\n    state.lastIntValue = 0;\n    return false;\n};\nfunction $8b5bb24d71b8b210$var$isOctalDigit(ch) {\n    return ch >= 0x30 /* 0 */  && ch <= 0x37 /* 7 */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n$8b5bb24d71b8b210$var$pp$8.regexp_eatFixedHexDigits = function(state, length) {\n    var start = state.pos;\n    state.lastIntValue = 0;\n    for(var i = 0; i < length; ++i){\n        var ch = state.current();\n        if (!$8b5bb24d71b8b210$var$isHexDigit(ch)) {\n            state.pos = start;\n            return false;\n        }\n        state.lastIntValue = 16 * state.lastIntValue + $8b5bb24d71b8b210$var$hexToInt(ch);\n        state.advance();\n    }\n    return true;\n};\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\nvar $8b5bb24d71b8b210$export$50792b0e93539fde = function Token(p) {\n    this.type = p.type;\n    this.value = p.value;\n    this.start = p.start;\n    this.end = p.end;\n    if (p.options.locations) this.loc = new $8b5bb24d71b8b210$export$7387db7caf96fcdb(p, p.startLoc, p.endLoc);\n    if (p.options.ranges) this.range = [\n        p.start,\n        p.end\n    ];\n};\n// ## Tokenizer\nvar $8b5bb24d71b8b210$var$pp$9 = $8b5bb24d71b8b210$export$7acfa6ed01010e37.prototype;\n// Move to the next token\n$8b5bb24d71b8b210$var$pp$9.next = function(ignoreEscapeSequenceInKeyword) {\n    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword);\n    if (this.options.onToken) this.options.onToken(new $8b5bb24d71b8b210$export$50792b0e93539fde(this));\n    this.lastTokEnd = this.end;\n    this.lastTokStart = this.start;\n    this.lastTokEndLoc = this.endLoc;\n    this.lastTokStartLoc = this.startLoc;\n    this.nextToken();\n};\n$8b5bb24d71b8b210$var$pp$9.getToken = function() {\n    this.next();\n    return new $8b5bb24d71b8b210$export$50792b0e93539fde(this);\n};\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\") $8b5bb24d71b8b210$var$pp$9[Symbol.iterator] = function() {\n    var this$1 = this;\n    return {\n        next: function next() {\n            var token = this$1.getToken();\n            return {\n                done: token.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eof,\n                value: token\n            };\n        }\n    };\n};\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n$8b5bb24d71b8b210$var$pp$9.curContext = function() {\n    return this.context[this.context.length - 1];\n};\n// Read a single token, updating the parser object's token-related\n// properties.\n$8b5bb24d71b8b210$var$pp$9.nextToken = function() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n    this.start = this.pos;\n    if (this.options.locations) this.startLoc = this.curPosition();\n    if (this.pos >= this.input.length) return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eof);\n    if (curContext.override) return curContext.override(this);\n    else this.readToken(this.fullCharCodeAtPos());\n};\n$8b5bb24d71b8b210$var$pp$9.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if ($8b5bb24d71b8b210$export$56b48cc5d7560ffb(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */ ) return this.readWord();\n    return this.getTokenFromCode(code);\n};\n$8b5bb24d71b8b210$var$pp$9.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos);\n    if (code <= 0xd7ff || code >= 0xe000) return code;\n    var next = this.input.charCodeAt(this.pos + 1);\n    return (code << 10) + next - 0x35fdc00;\n};\n$8b5bb24d71b8b210$var$pp$9.skipBlockComment = function() {\n    var startLoc = this.options.onComment && this.curPosition();\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n    if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n    this.pos = end + 2;\n    if (this.options.locations) {\n        $8b5bb24d71b8b210$export$866e20207bbc41f2.lastIndex = start;\n        var match;\n        while((match = $8b5bb24d71b8b210$export$866e20207bbc41f2.exec(this.input)) && match.index < this.pos){\n            ++this.curLine;\n            this.lineStart = match.index + match[0].length;\n        }\n    }\n    if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n};\n$8b5bb24d71b8b210$var$pp$9.skipLineComment = function(startSkip) {\n    var start = this.pos;\n    var startLoc = this.options.onComment && this.curPosition();\n    var ch = this.input.charCodeAt(this.pos += startSkip);\n    while(this.pos < this.input.length && !$8b5bb24d71b8b210$export$2c19a3e3b4008fff(ch))ch = this.input.charCodeAt(++this.pos);\n    if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n};\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n$8b5bb24d71b8b210$var$pp$9.skipSpace = function() {\n    loop: while(this.pos < this.input.length){\n        var ch = this.input.charCodeAt(this.pos);\n        switch(ch){\n            case 32:\n            case 160:\n                ++this.pos;\n                break;\n            case 13:\n                if (this.input.charCodeAt(this.pos + 1) === 10) ++this.pos;\n            case 10:\n            case 8232:\n            case 8233:\n                ++this.pos;\n                if (this.options.locations) {\n                    ++this.curLine;\n                    this.lineStart = this.pos;\n                }\n                break;\n            case 47:\n                switch(this.input.charCodeAt(this.pos + 1)){\n                    case 42:\n                        this.skipBlockComment();\n                        break;\n                    case 47:\n                        this.skipLineComment(2);\n                        break;\n                    default:\n                        break loop;\n                }\n                break;\n            default:\n                if (ch > 8 && ch < 14 || ch >= 5760 && $8b5bb24d71b8b210$export$268622f0f1cbc82b.test(String.fromCharCode(ch))) ++this.pos;\n                else break loop;\n        }\n    }\n};\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n$8b5bb24d71b8b210$var$pp$9.finishToken = function(type, val) {\n    this.end = this.pos;\n    if (this.options.locations) this.endLoc = this.curPosition();\n    var prevType = this.type;\n    this.type = type;\n    this.value = val;\n    this.updateContext(prevType);\n};\n// ### Token reading\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\n$8b5bb24d71b8b210$var$pp$9.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next >= 48 && next <= 57) return this.readNumber(true);\n    var next2 = this.input.charCodeAt(this.pos + 2);\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n        this.pos += 3;\n        return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.ellipsis);\n    } else {\n        ++this.pos;\n        return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dot);\n    }\n};\n$8b5bb24d71b8b210$var$pp$9.readToken_slash = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (this.exprAllowed) {\n        ++this.pos;\n        return this.readRegexp();\n    }\n    if (next === 61) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.assign, 2);\n    return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.slash, 1);\n};\n$8b5bb24d71b8b210$var$pp$9.readToken_mult_modulo_exp = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    var tokentype = code === 42 ? $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.star : $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.modulo;\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n        ++size;\n        tokentype = $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.starstar;\n        next = this.input.charCodeAt(this.pos + 2);\n    }\n    if (next === 61) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.assign, size + 1);\n    return this.finishOp(tokentype, size);\n};\n$8b5bb24d71b8b210$var$pp$9.readToken_pipe_amp = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n        if (this.options.ecmaVersion >= 12) {\n            var next2 = this.input.charCodeAt(this.pos + 2);\n            if (next2 === 61) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.assign, 3);\n        }\n        return this.finishOp(code === 124 ? $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.logicalOR : $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.logicalAND, 2);\n    }\n    if (next === 61) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.assign, 2);\n    return this.finishOp(code === 124 ? $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bitwiseOR : $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bitwiseAND, 1);\n};\n$8b5bb24d71b8b210$var$pp$9.readToken_caret = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.assign, 2);\n    return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bitwiseXOR, 1);\n};\n$8b5bb24d71b8b210$var$pp$9.readToken_plus_min = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n        if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || $8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n            // A `-->` line comment\n            this.skipLineComment(3);\n            this.skipSpace();\n            return this.nextToken();\n        }\n        return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.incDec, 2);\n    }\n    if (next === 61) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.assign, 2);\n    return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.plusMin, 1);\n};\n$8b5bb24d71b8b210$var$pp$9.readToken_lt_gt = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    if (next === code) {\n        size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n        if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.assign, size + 1);\n        return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bitShift, size);\n    }\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {\n        // `<!--`, an XML-style comment that should be interpreted as a line comment\n        this.skipLineComment(4);\n        this.skipSpace();\n        return this.nextToken();\n    }\n    if (next === 61) size = 2;\n    return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.relational, size);\n};\n$8b5bb24d71b8b210$var$pp$9.readToken_eq_excl = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n        this.pos += 2;\n        return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.arrow);\n    }\n    return this.finishOp(code === 61 ? $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.eq : $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.prefix, 1);\n};\n$8b5bb24d71b8b210$var$pp$9.readToken_question = function() {\n    var ecmaVersion = this.options.ecmaVersion;\n    if (ecmaVersion >= 11) {\n        var next = this.input.charCodeAt(this.pos + 1);\n        if (next === 46) {\n            var next2 = this.input.charCodeAt(this.pos + 2);\n            if (next2 < 48 || next2 > 57) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.questionDot, 2);\n        }\n        if (next === 63) {\n            if (ecmaVersion >= 12) {\n                var next2$1 = this.input.charCodeAt(this.pos + 2);\n                if (next2$1 === 61) return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.assign, 3);\n            }\n            return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.coalesce, 2);\n        }\n    }\n    return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.question, 1);\n};\n$8b5bb24d71b8b210$var$pp$9.getTokenFromCode = function(code) {\n    switch(code){\n        // The interpretation of a dot depends on whether it is followed\n        // by a digit or another two dots.\n        case 46:\n            return this.readToken_dot();\n        // Punctuation tokens.\n        case 40:\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenL);\n        case 41:\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.parenR);\n        case 59:\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.semi);\n        case 44:\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.comma);\n        case 91:\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketL);\n        case 93:\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.bracketR);\n        case 123:\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceL);\n        case 125:\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.braceR);\n        case 58:\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.colon);\n        case 96:\n            if (this.options.ecmaVersion < 6) break;\n            ++this.pos;\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.backQuote);\n        case 48:\n            var next = this.input.charCodeAt(this.pos + 1);\n            if (next === 120 || next === 88) return this.readRadixNumber(16);\n             // '0x', '0X' - hex number\n            if (this.options.ecmaVersion >= 6) {\n                if (next === 111 || next === 79) return this.readRadixNumber(8);\n                 // '0o', '0O' - octal number\n                if (next === 98 || next === 66) return this.readRadixNumber(2);\n                 // '0b', '0B' - binary number\n            }\n        // Anything else beginning with a digit is an integer, octal\n        // number, or float.\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n            return this.readNumber(false);\n        // Quotes produce strings.\n        case 34:\n        case 39:\n            return this.readString(code);\n        // Operators are parsed inline in tiny state machines. '=' (61) is\n        // often referred to. `finishOp` simply skips the amount of\n        // characters it is given as second argument, and returns a token\n        // of the type given by its first argument.\n        case 47:\n            return this.readToken_slash();\n        case 37:\n        case 42:\n            return this.readToken_mult_modulo_exp(code);\n        case 124:\n        case 38:\n            return this.readToken_pipe_amp(code);\n        case 94:\n            return this.readToken_caret();\n        case 43:\n        case 45:\n            return this.readToken_plus_min(code);\n        case 60:\n        case 62:\n            return this.readToken_lt_gt(code);\n        case 61:\n        case 33:\n            return this.readToken_eq_excl(code);\n        case 63:\n            return this.readToken_question();\n        case 126:\n            return this.finishOp($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.prefix, 1);\n    }\n    this.raise(this.pos, \"Unexpected character '\" + $8b5bb24d71b8b210$var$codePointToString$1(code) + \"'\");\n};\n$8b5bb24d71b8b210$var$pp$9.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size);\n    this.pos += size;\n    return this.finishToken(type, str);\n};\n$8b5bb24d71b8b210$var$pp$9.readRegexp = function() {\n    var escaped, inClass, start = this.pos;\n    for(;;){\n        if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n        var ch = this.input.charAt(this.pos);\n        if ($8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6.test(ch)) this.raise(start, \"Unterminated regular expression\");\n        if (!escaped) {\n            if (ch === \"[\") inClass = true;\n            else if (ch === \"]\" && inClass) inClass = false;\n            else if (ch === \"/\" && !inClass) break;\n            escaped = ch === \"\\\\\";\n        } else escaped = false;\n        ++this.pos;\n    }\n    var pattern = this.input.slice(start, this.pos);\n    ++this.pos;\n    var flagsStart = this.pos;\n    var flags = this.readWord1();\n    if (this.containsEsc) this.unexpected(flagsStart);\n    // Validate pattern\n    var state = this.regexpState || (this.regexpState = new $8b5bb24d71b8b210$var$RegExpValidationState(this));\n    state.reset(start, pattern, flags);\n    this.validateRegExpFlags(state);\n    this.validateRegExpPattern(state);\n    // Create Literal#value property value.\n    var value = null;\n    try {\n        value = new RegExp(pattern, flags);\n    } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n    }\n    return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.regexp, {\n        pattern: pattern,\n        flags: flags,\n        value: value\n    });\n};\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n$8b5bb24d71b8b210$var$pp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n    // `len` is used for character escape sequences. In that case, disallow separators.\n    var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n    // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n    // and isn't fraction part nor exponent part. In that case, if the first digit\n    // is zero then disallow separators.\n    var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n    var start = this.pos, total = 0, lastCode = 0;\n    for(var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos){\n        var code = this.input.charCodeAt(this.pos), val = void 0;\n        if (allowSeparators && code === 95) {\n            if (isLegacyOctalNumericLiteral) this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\");\n            if (lastCode === 95) this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\");\n            if (i === 0) this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\");\n            lastCode = code;\n            continue;\n        }\n        if (code >= 97) val = code - 97 + 10;\n        else if (code >= 65) val = code - 65 + 10;\n        else if (code >= 48 && code <= 57) val = code - 48;\n        else val = Infinity;\n        if (val >= radix) break;\n        lastCode = code;\n        total = total * radix + val;\n    }\n    if (allowSeparators && lastCode === 95) this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\");\n    if (this.pos === start || len != null && this.pos - start !== len) return null;\n    return total;\n};\nfunction $8b5bb24d71b8b210$var$stringToNumber(str, isLegacyOctalNumericLiteral) {\n    if (isLegacyOctalNumericLiteral) return parseInt(str, 8);\n    // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n    return parseFloat(str.replace(/_/g, \"\"));\n}\nfunction $8b5bb24d71b8b210$var$stringToBigInt(str) {\n    if (typeof BigInt !== \"function\") return null;\n    // `BigInt(value)` throws syntax error if the string contains numeric separators.\n    return BigInt(str.replace(/_/g, \"\"));\n}\n$8b5bb24d71b8b210$var$pp$9.readRadixNumber = function(radix) {\n    var start = this.pos;\n    this.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n        val = $8b5bb24d71b8b210$var$stringToBigInt(this.input.slice(start, this.pos));\n        ++this.pos;\n    } else if ($8b5bb24d71b8b210$export$56b48cc5d7560ffb(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n    return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.num, val);\n};\n// Read an integer, octal integer, or floating-point number.\n$8b5bb24d71b8b210$var$pp$9.readNumber = function(startsWithDot) {\n    var start = this.pos;\n    if (!startsWithDot && this.readInt(10, undefined, true) === null) this.raise(start, \"Invalid number\");\n    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (octal && this.strict) this.raise(start, \"Invalid number\");\n    var next = this.input.charCodeAt(this.pos);\n    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n        var val$1 = $8b5bb24d71b8b210$var$stringToBigInt(this.input.slice(start, this.pos));\n        ++this.pos;\n        if ($8b5bb24d71b8b210$export$56b48cc5d7560ffb(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n        return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.num, val$1);\n    }\n    if (octal && /[89]/.test(this.input.slice(start, this.pos))) octal = false;\n    if (next === 46 && !octal) {\n        ++this.pos;\n        this.readInt(10);\n        next = this.input.charCodeAt(this.pos);\n    }\n    if ((next === 69 || next === 101) && !octal) {\n        next = this.input.charCodeAt(++this.pos);\n        if (next === 43 || next === 45) ++this.pos;\n         // '+-'\n        if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    }\n    if ($8b5bb24d71b8b210$export$56b48cc5d7560ffb(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n    var val = $8b5bb24d71b8b210$var$stringToNumber(this.input.slice(start, this.pos), octal);\n    return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.num, val);\n};\n// Read a string value, interpreting backslash-escapes.\n$8b5bb24d71b8b210$var$pp$9.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code;\n    if (ch === 123) {\n        if (this.options.ecmaVersion < 6) this.unexpected();\n        var codePos = ++this.pos;\n        code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n        ++this.pos;\n        if (code > 0x10FFFF) this.invalidStringToken(codePos, \"Code point out of bounds\");\n    } else code = this.readHexChar(4);\n    return code;\n};\nfunction $8b5bb24d71b8b210$var$codePointToString$1(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) return String.fromCharCode(code);\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\n$8b5bb24d71b8b210$var$pp$9.readString = function(quote) {\n    var out = \"\", chunkStart = ++this.pos;\n    for(;;){\n        if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n        var ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 92) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.readEscapedChar(false);\n            chunkStart = this.pos;\n        } else {\n            if ($8b5bb24d71b8b210$export$2c19a3e3b4008fff(ch, this.options.ecmaVersion >= 10)) this.raise(this.start, \"Unterminated string constant\");\n            ++this.pos;\n        }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.string, out);\n};\n// Reads template string tokens.\nvar $8b5bb24d71b8b210$var$INVALID_TEMPLATE_ESCAPE_ERROR = {};\n$8b5bb24d71b8b210$var$pp$9.tryReadTemplateToken = function() {\n    this.inTemplateElement = true;\n    try {\n        this.readTmplToken();\n    } catch (err) {\n        if (err === $8b5bb24d71b8b210$var$INVALID_TEMPLATE_ESCAPE_ERROR) this.readInvalidTemplateToken();\n        else throw err;\n    }\n    this.inTemplateElement = false;\n};\n$8b5bb24d71b8b210$var$pp$9.invalidStringToken = function(position, message) {\n    if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw $8b5bb24d71b8b210$var$INVALID_TEMPLATE_ESCAPE_ERROR;\n    else this.raise(position, message);\n};\n$8b5bb24d71b8b210$var$pp$9.readTmplToken = function() {\n    var out = \"\", chunkStart = this.pos;\n    for(;;){\n        if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\");\n        var ch = this.input.charCodeAt(this.pos);\n        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n            if (this.pos === this.start && (this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.template || this.type === $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.invalidTemplate)) {\n                if (ch === 36) {\n                    this.pos += 2;\n                    return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.dollarBraceL);\n                } else {\n                    ++this.pos;\n                    return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.backQuote);\n                }\n            }\n            out += this.input.slice(chunkStart, this.pos);\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.template, out);\n        }\n        if (ch === 92) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.readEscapedChar(true);\n            chunkStart = this.pos;\n        } else if ($8b5bb24d71b8b210$export$2c19a3e3b4008fff(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            ++this.pos;\n            switch(ch){\n                case 13:\n                    if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n                case 10:\n                    out += \"\\n\";\n                    break;\n                default:\n                    out += String.fromCharCode(ch);\n                    break;\n            }\n            if (this.options.locations) {\n                ++this.curLine;\n                this.lineStart = this.pos;\n            }\n            chunkStart = this.pos;\n        } else ++this.pos;\n    }\n};\n// Reads a template token to search for the end, without validating any escape sequences\n$8b5bb24d71b8b210$var$pp$9.readInvalidTemplateToken = function() {\n    for(; this.pos < this.input.length; this.pos++)switch(this.input[this.pos]){\n        case \"\\\\\":\n            ++this.pos;\n            break;\n        case \"$\":\n            if (this.input[this.pos + 1] !== \"{\") break;\n        // falls through\n        case \"`\":\n            return this.finishToken($8b5bb24d71b8b210$export$b54c7ea7aabba5c8.invalidTemplate, this.input.slice(this.start, this.pos));\n    }\n    this.raise(this.start, \"Unterminated template\");\n};\n// Used to read escaped characters\n$8b5bb24d71b8b210$var$pp$9.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos);\n    ++this.pos;\n    switch(ch){\n        case 110:\n            return \"\\n\" // 'n' -> '\\n'\n            ;\n        case 114:\n            return \"\\r\" // 'r' -> '\\r'\n            ;\n        case 120:\n            return String.fromCharCode(this.readHexChar(2)) // 'x'\n            ;\n        case 117:\n            return $8b5bb24d71b8b210$var$codePointToString$1(this.readCodePoint()) // 'u'\n            ;\n        case 116:\n            return \"\t\" // 't' -> '\\t'\n            ;\n        case 98:\n            return \"\\b\" // 'b' -> '\\b'\n            ;\n        case 118:\n            return \"\\v\" // 'v' -> '\\u000b'\n            ;\n        case 102:\n            return \"\\f\" // 'f' -> '\\f'\n            ;\n        case 13:\n            if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n             // '\\r\\n'\n        case 10:\n            if (this.options.locations) {\n                this.lineStart = this.pos;\n                ++this.curLine;\n            }\n            return \"\";\n        case 56:\n        case 57:\n            if (inTemplate) {\n                var codePos = this.pos - 1;\n                this.invalidStringToken(codePos, \"Invalid escape sequence in template string\");\n                return null;\n            }\n        default:\n            if (ch >= 48 && ch <= 55) {\n                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n                var octal = parseInt(octalStr, 8);\n                if (octal > 255) {\n                    octalStr = octalStr.slice(0, -1);\n                    octal = parseInt(octalStr, 8);\n                }\n                this.pos += octalStr.length - 1;\n                ch = this.input.charCodeAt(this.pos);\n                if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? \"Octal literal in template string\" : \"Octal literal in strict mode\");\n                return String.fromCharCode(octal);\n            }\n            if ($8b5bb24d71b8b210$export$2c19a3e3b4008fff(ch)) // Unicode new line characters after \\ get removed from output in both\n            // template literals and strings\n            return \"\";\n            return String.fromCharCode(ch);\n    }\n};\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n$8b5bb24d71b8b210$var$pp$9.readHexChar = function(len) {\n    var codePos = this.pos;\n    var n = this.readInt(16, len);\n    if (n === null) this.invalidStringToken(codePos, \"Bad character escape sequence\");\n    return n;\n};\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n$8b5bb24d71b8b210$var$pp$9.readWord1 = function() {\n    this.containsEsc = false;\n    var word = \"\", first = true, chunkStart = this.pos;\n    var astral = this.options.ecmaVersion >= 6;\n    while(this.pos < this.input.length){\n        var ch = this.fullCharCodeAtPos();\n        if ($8b5bb24d71b8b210$export$332f4d7bee38db93(ch, astral)) this.pos += ch <= 0xffff ? 1 : 2;\n        else if (ch === 92) {\n            this.containsEsc = true;\n            word += this.input.slice(chunkStart, this.pos);\n            var escStart = this.pos;\n            if (this.input.charCodeAt(++this.pos) !== 117) this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n            ++this.pos;\n            var esc = this.readCodePoint();\n            if (!(first ? $8b5bb24d71b8b210$export$56b48cc5d7560ffb : $8b5bb24d71b8b210$export$332f4d7bee38db93)(esc, astral)) this.invalidStringToken(escStart, \"Invalid Unicode escape\");\n            word += $8b5bb24d71b8b210$var$codePointToString$1(esc);\n            chunkStart = this.pos;\n        } else break;\n        first = false;\n    }\n    return word + this.input.slice(chunkStart, this.pos);\n};\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n$8b5bb24d71b8b210$var$pp$9.readWord = function() {\n    var word = this.readWord1();\n    var type = $8b5bb24d71b8b210$export$b54c7ea7aabba5c8.name;\n    if (this.keywords.test(word)) type = $8b5bb24d71b8b210$export$d53f8326294b31d8[word];\n    return this.finishToken(type, word);\n};\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\nvar $8b5bb24d71b8b210$export$83d89fbfd8236492 = \"7.4.1\";\n$8b5bb24d71b8b210$export$7acfa6ed01010e37.acorn = {\n    Parser: $8b5bb24d71b8b210$export$7acfa6ed01010e37,\n    version: $8b5bb24d71b8b210$export$83d89fbfd8236492,\n    defaultOptions: $8b5bb24d71b8b210$export$ba43bf67f3d48107,\n    Position: $8b5bb24d71b8b210$export$13807d9ee5a34a42,\n    SourceLocation: $8b5bb24d71b8b210$export$7387db7caf96fcdb,\n    getLineInfo: $8b5bb24d71b8b210$export$7af82191547c5ff7,\n    Node: $8b5bb24d71b8b210$export$85c928794f8d04d4,\n    TokenType: $8b5bb24d71b8b210$export$f435f793048e7a0f,\n    tokTypes: $8b5bb24d71b8b210$export$b54c7ea7aabba5c8,\n    keywordTypes: $8b5bb24d71b8b210$export$d53f8326294b31d8,\n    TokContext: $8b5bb24d71b8b210$export$68e7b4c4d99215d9,\n    tokContexts: $8b5bb24d71b8b210$export$2b5f701edfbd6f00,\n    isIdentifierChar: $8b5bb24d71b8b210$export$332f4d7bee38db93,\n    isIdentifierStart: $8b5bb24d71b8b210$export$56b48cc5d7560ffb,\n    Token: $8b5bb24d71b8b210$export$50792b0e93539fde,\n    isNewLine: $8b5bb24d71b8b210$export$2c19a3e3b4008fff,\n    lineBreak: $8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6,\n    lineBreakG: $8b5bb24d71b8b210$export$866e20207bbc41f2,\n    nonASCIIwhitespace: $8b5bb24d71b8b210$export$268622f0f1cbc82b\n};\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\nfunction $8b5bb24d71b8b210$export$98e6a39c04603d36(input, options) {\n    return $8b5bb24d71b8b210$export$7acfa6ed01010e37.parse(input, options);\n}\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\nfunction $8b5bb24d71b8b210$export$61f24eb03dd7ce92(input, pos, options) {\n    return $8b5bb24d71b8b210$export$7acfa6ed01010e37.parseExpressionAt(input, pos, options);\n}\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\nfunction $8b5bb24d71b8b210$export$5f8c09e3ae6f64e1(input, options) {\n    return $8b5bb24d71b8b210$export$7acfa6ed01010e37.tokenizer(input, options);\n}\n\n});\n\nparcelRegister(\"80lpX\", function(module, exports) {\nmodule.exports = JSON.parse('{\"name\":\"espree\",\"description\":\"An Esprima-compatible JavaScript parser built on Acorn\",\"author\":\"Nicholas C. Zakas <nicholas+npm@nczconsulting.com>\",\"homepage\":\"https://github.com/eslint/espree\",\"main\":\"espree.js\",\"version\":\"7.3.1\",\"files\":[\"lib\",\"espree.js\"],\"engines\":{\"node\":\"^10.12.0 || >=12.0.0\"},\"repository\":\"eslint/espree\",\"bugs\":{\"url\":\"http://github.com/eslint/espree.git\"},\"license\":\"BSD-2-Clause\",\"dependencies\":{\"acorn\":\"^7.4.0\",\"acorn-jsx\":\"^5.3.1\",\"eslint-visitor-keys\":\"^1.3.0\"},\"devDependencies\":{\"browserify\":\"^16.5.0\",\"chai\":\"^4.2.0\",\"eslint\":\"^6.0.1\",\"eslint-config-eslint\":\"^5.0.1\",\"eslint-plugin-node\":\"^9.1.0\",\"eslint-release\":\"^1.0.0\",\"esprima\":\"latest\",\"esprima-fb\":\"^8001.2001.0-dev-harmony-fb\",\"json-diff\":\"^0.5.4\",\"leche\":\"^2.3.0\",\"mocha\":\"^6.2.0\",\"nyc\":\"^14.1.1\",\"regenerate\":\"^1.4.0\",\"shelljs\":\"^0.3.0\",\"shelljs-nodecli\":\"^0.1.1\",\"unicode-6.3.0\":\"^0.7.5\"},\"keywords\":[\"ast\",\"ecmascript\",\"javascript\",\"parser\",\"syntax\",\"acorn\"],\"scripts\":{\"generate-regex\":\"node tools/generate-identifier-regex.js\",\"test\":\"npm run-script lint && node Makefile.js test\",\"lint\":\"node Makefile.js lint\",\"fixlint\":\"node Makefile.js lint --fix\",\"sync-docs\":\"node Makefile.js docs\",\"browserify\":\"node Makefile.js browserify\",\"generate-release\":\"eslint-generate-release\",\"generate-alpharelease\":\"eslint-generate-prerelease alpha\",\"generate-betarelease\":\"eslint-generate-prerelease beta\",\"generate-rcrelease\":\"eslint-generate-prerelease rc\",\"publish-release\":\"eslint-publish-release\"}}');\n\n});\n\nparcelRegister(\"a8cff\", function(module, exports) {\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */ \"use strict\";\n\nvar $jkWpo = parcelRequire(\"jkWpo\");\n// Types.\nvar $7604264f734e6b52$var$NODE_TYPES = Object.freeze(Object.keys($jkWpo));\nvar $7604264f734e6b52$var$_iteratorNormalCompletion = true, $7604264f734e6b52$var$_didIteratorError = false, $7604264f734e6b52$var$_iteratorError = undefined;\ntry {\n    // Freeze the keys.\n    for(var $7604264f734e6b52$var$_iterator = $7604264f734e6b52$var$NODE_TYPES[Symbol.iterator](), $7604264f734e6b52$var$_step; !($7604264f734e6b52$var$_iteratorNormalCompletion = ($7604264f734e6b52$var$_step = $7604264f734e6b52$var$_iterator.next()).done); $7604264f734e6b52$var$_iteratorNormalCompletion = true){\n        var $7604264f734e6b52$var$type = $7604264f734e6b52$var$_step.value;\n        Object.freeze($jkWpo[$7604264f734e6b52$var$type]);\n    }\n} catch (err) {\n    $7604264f734e6b52$var$_didIteratorError = true;\n    $7604264f734e6b52$var$_iteratorError = err;\n} finally{\n    try {\n        if (!$7604264f734e6b52$var$_iteratorNormalCompletion && $7604264f734e6b52$var$_iterator.return != null) {\n            $7604264f734e6b52$var$_iterator.return();\n        }\n    } finally{\n        if ($7604264f734e6b52$var$_didIteratorError) {\n            throw $7604264f734e6b52$var$_iteratorError;\n        }\n    }\n}\nObject.freeze($jkWpo);\n// List to ignore keys.\nvar $7604264f734e6b52$var$KEY_BLACKLIST = new Set([\n    \"parent\",\n    \"leadingComments\",\n    \"trailingComments\"\n]);\n/**\n * Check whether a given key should be used or not.\n * @param {string} key The key to check.\n * @returns {boolean} `true` if the key should be used.\n */ function $7604264f734e6b52$var$filterKey(key) {\n    return !$7604264f734e6b52$var$KEY_BLACKLIST.has(key) && key[0] !== \"_\";\n}\n//------------------------------------------------------------------------------\n// Public interfaces\n//------------------------------------------------------------------------------\nmodule.exports = Object.freeze({\n    /**\n     * Visitor keys.\n     * @type {{ [type: string]: string[] | undefined }}\n     */ KEYS: $jkWpo,\n    /**\n     * Get visitor keys of a given node.\n     * @param {Object} node The AST node to get keys.\n     * @returns {string[]} Visitor keys of the node.\n     */ getKeys: function(node) {\n        return Object.keys(node).filter($7604264f734e6b52$var$filterKey);\n    },\n    // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * Make the union set with `KEYS` and given keys.\n     * @param {Object} additionalKeys The additional keys.\n     * @returns {{ [type: string]: string[] | undefined }} The union set.\n     */ unionWith: function(additionalKeys) {\n        var retv = Object.assign({}, $jkWpo);\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = Object.keys(additionalKeys)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var type = _step.value;\n                if (retv.hasOwnProperty(type)) {\n                    var keys = new Set(additionalKeys[type]);\n                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                    try {\n                        for(var _iterator1 = retv[type][Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                            var key = _step1.value;\n                            keys.add(key);\n                        }\n                    } catch (err) {\n                        _didIteratorError1 = true;\n                        _iteratorError1 = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                _iterator1.return();\n                            }\n                        } finally{\n                            if (_didIteratorError1) {\n                                throw _iteratorError1;\n                            }\n                        }\n                    }\n                    retv[type] = Object.freeze(Array.from(keys));\n                } else retv[type] = Object.freeze(Array.from(additionalKeys[type]));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        return Object.freeze(retv);\n    }\n});\n\n});\nparcelRegister(\"jkWpo\", function(module, exports) {\nmodule.exports = JSON.parse('{\"AssignmentExpression\":[\"left\",\"right\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayExpression\":[\"elements\"],\"ArrayPattern\":[\"elements\"],\"ArrowFunctionExpression\":[\"params\",\"body\"],\"AwaitExpression\":[\"argument\"],\"BlockStatement\":[\"body\"],\"BinaryExpression\":[\"left\",\"right\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\"],\"CatchClause\":[\"param\",\"body\"],\"ChainExpression\":[\"expression\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"superClass\",\"body\"],\"ClassExpression\":[\"id\",\"superClass\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"body\",\"test\"],\"EmptyStatement\":[],\"ExportAllDeclaration\":[\"exported\",\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"exported\",\"local\"],\"ExpressionStatement\":[\"expression\"],\"ExperimentalRestProperty\":[\"argument\"],\"ExperimentalSpreadProperty\":[\"argument\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\"],\"FunctionExpression\":[\"id\",\"params\",\"body\"],\"Identifier\":[],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportExpression\":[\"source\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"imported\",\"local\"],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"Literal\":[],\"LabeledStatement\":[\"label\",\"body\"],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"MetaProperty\":[\"meta\",\"property\"],\"MethodDefinition\":[\"key\",\"value\"],\"NewExpression\":[\"callee\",\"arguments\"],\"ObjectExpression\":[\"properties\"],\"ObjectPattern\":[\"properties\"],\"Program\":[\"body\"],\"Property\":[\"key\",\"value\"],\"RestElement\":[\"argument\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"SwitchCase\":[\"test\",\"consequent\"],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"YieldExpression\":[\"argument\"]}');\n\n});\n\n\nparcelRegister(\"4rf7n\", function(module, exports) {\nmodule.exports = JSON.parse('{\"name\":\"estraverse\",\"description\":\"ECMAScript JS AST traversal functions\",\"homepage\":\"https://github.com/estools/estraverse\",\"main\":\"estraverse.js\",\"version\":\"4.3.0\",\"engines\":{\"node\":\">=4.0\"},\"maintainers\":[{\"name\":\"Yusuke Suzuki\",\"email\":\"utatane.tea@gmail.com\",\"web\":\"http://github.com/Constellation\"}],\"repository\":{\"type\":\"git\",\"url\":\"http://github.com/estools/estraverse.git\"},\"devDependencies\":{\"babel-preset-env\":\"^1.6.1\",\"babel-register\":\"^6.3.13\",\"chai\":\"^2.1.1\",\"espree\":\"^1.11.0\",\"gulp\":\"^3.8.10\",\"gulp-bump\":\"^0.2.2\",\"gulp-filter\":\"^2.0.0\",\"gulp-git\":\"^1.0.1\",\"gulp-tag-version\":\"^1.3.0\",\"jshint\":\"^2.5.6\",\"mocha\":\"^2.1.0\"},\"license\":\"BSD-2-Clause\",\"scripts\":{\"test\":\"npm run-script lint && npm run-script unit-test\",\"lint\":\"jshint estraverse.js\",\"unit-test\":\"mocha --compilers js:babel-register\"}}');\n\n});\n\nfunction $75c0594ce600fdb1$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) resolve(value);\n    else Promise.resolve(value).then(_next, _throw);\n}\nfunction $75c0594ce600fdb1$export$7c398597f8905a1(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                $75c0594ce600fdb1$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                $75c0594ce600fdb1$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ function $a15204915df1105f$export$5f0017c582d45a2d(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n\n\nvar $ee049cf5886b856c$var$extendStatics = function extendStatics1(d, b) {\n    $ee049cf5886b856c$var$extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return $ee049cf5886b856c$var$extendStatics(d, b);\n};\nfunction $ee049cf5886b856c$export$a8ba968b8961cb8a(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    $ee049cf5886b856c$var$extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar $ee049cf5886b856c$export$18ce0697a983be9b = function __assign1() {\n    $ee049cf5886b856c$export$18ce0697a983be9b = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $ee049cf5886b856c$export$18ce0697a983be9b.apply(this, arguments);\n};\nfunction $ee049cf5886b856c$export$3c9a16f847548506(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") {\n        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction $ee049cf5886b856c$export$29e00dfd3077644b(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction $ee049cf5886b856c$export$d5ad3fd78186038f(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction $ee049cf5886b856c$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n}\nfunction $ee049cf5886b856c$export$d831c04e792af3d(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    return useValue ? value : void 0;\n}\nfunction $ee049cf5886b856c$export$6a2a36740a146cb8(x) {\n    return (typeof x === \"undefined\" ? \"undefined\" : (0, $a15204915df1105f$export$5f0017c582d45a2d)(x)) === \"symbol\" ? x : \"\".concat(x);\n}\nfunction $ee049cf5886b856c$export$d1a06452d3489bc7(f, name, prefix) {\n    if ((typeof name === \"undefined\" ? \"undefined\" : (0, $a15204915df1105f$export$5f0017c582d45a2d)(name)) === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", {\n        configurable: true,\n        value: prefix ? \"\".concat(prefix, \" \", name) : name\n    });\n}\nfunction $ee049cf5886b856c$export$f1db080c865becb9(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction $ee049cf5886b856c$export$1050f835b63b671e(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction $ee049cf5886b856c$export$67ebef60e6f28a6(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function sent() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar $ee049cf5886b856c$export$45d3717a4c69092e = Object.create ? function __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {\n        enumerable: true,\n        get: function get() {\n            return m[k];\n        }\n    };\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction $ee049cf5886b856c$export$f33643c0debef087(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) $ee049cf5886b856c$export$45d3717a4c69092e(o, m, p);\n}\nfunction $ee049cf5886b856c$export$19a8beecd37a4c45(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function next() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction $ee049cf5886b856c$export$8d051b38c9118094(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction $ee049cf5886b856c$export$afc72e2116322959() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($ee049cf5886b856c$export$8d051b38c9118094(arguments[i]));\n    return ar;\n}\nfunction $ee049cf5886b856c$export$6388937ca91ccae8() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction $ee049cf5886b856c$export$1216008129fb82ed(to, from, pack) {\n    if (pack || arguments.length === 2) {\n        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction $ee049cf5886b856c$export$10c90e4f7922046c(v) {\n    return this instanceof $ee049cf5886b856c$export$10c90e4f7922046c ? (this.v = v, this) : new $ee049cf5886b856c$export$10c90e4f7922046c(v);\n}\nfunction $ee049cf5886b856c$export$e427f37a30a4de9b(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof $ee049cf5886b856c$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction $ee049cf5886b856c$export$bbd80228419bb833(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: $ee049cf5886b856c$export$10c90e4f7922046c(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction $ee049cf5886b856c$export$e3b29a3d6162315f(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof $ee049cf5886b856c$export$19a8beecd37a4c45 === \"function\" ? $ee049cf5886b856c$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction $ee049cf5886b856c$export$4fb47efe1390b86f(cooked, raw) {\n    if (Object.defineProperty) Object.defineProperty(cooked, \"raw\", {\n        value: raw\n    });\n    else cooked.raw = raw;\n    return cooked;\n}\nvar $ee049cf5886b856c$var$__setModuleDefault = Object.create ? function __setModuleDefault(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction $ee049cf5886b856c$export$c21735bcef00d192(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) $ee049cf5886b856c$export$45d3717a4c69092e(result, mod, k);\n    }\n    $ee049cf5886b856c$var$__setModuleDefault(result, mod);\n    return result;\n}\nfunction $ee049cf5886b856c$export$da59b14a69baef04(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction $ee049cf5886b856c$export$d5dcaf168c640c35(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction $ee049cf5886b856c$export$d40a35129aaff81f(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction $ee049cf5886b856c$export$81fdc39f203e4e04(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nfunction $ee049cf5886b856c$export$88ac25d8e944e405(env, value, async) {\n    if (value !== null && value !== void 0) {\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n        var dispose;\n        if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n        }\n        if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n        }\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n        env.stack.push({\n            value: value,\n            dispose: dispose,\n            async: async\n        });\n    } else if (async) env.stack.push({\n        async: true\n    });\n    return value;\n}\nvar $ee049cf5886b856c$var$_SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function _SuppressedError(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction $ee049cf5886b856c$export$8f076105dc360e92(env) {\n    function fail(e) {\n        env.error = env.hasError ? new $ee049cf5886b856c$var$_SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n        env.hasError = true;\n    }\n    function next() {\n        while(env.stack.length){\n            var rec = env.stack.pop();\n            try {\n                var result = rec.dispose && rec.dispose.call(rec.value);\n                if (rec.async) return Promise.resolve(result).then(next, function(e) {\n                    fail(e);\n                    return next();\n                });\n            } catch (e) {\n                fail(e);\n            }\n        }\n        if (env.hasError) throw env.error;\n    }\n    return next();\n}\nvar $ee049cf5886b856c$export$2e2bcd8739ae039 = {\n    __extends: $ee049cf5886b856c$export$a8ba968b8961cb8a,\n    __assign: $ee049cf5886b856c$export$18ce0697a983be9b,\n    __rest: $ee049cf5886b856c$export$3c9a16f847548506,\n    __decorate: $ee049cf5886b856c$export$29e00dfd3077644b,\n    __param: $ee049cf5886b856c$export$d5ad3fd78186038f,\n    __metadata: $ee049cf5886b856c$export$f1db080c865becb9,\n    __awaiter: $ee049cf5886b856c$export$1050f835b63b671e,\n    __generator: $ee049cf5886b856c$export$67ebef60e6f28a6,\n    __createBinding: $ee049cf5886b856c$export$45d3717a4c69092e,\n    __exportStar: $ee049cf5886b856c$export$f33643c0debef087,\n    __values: $ee049cf5886b856c$export$19a8beecd37a4c45,\n    __read: $ee049cf5886b856c$export$8d051b38c9118094,\n    __spread: $ee049cf5886b856c$export$afc72e2116322959,\n    __spreadArrays: $ee049cf5886b856c$export$6388937ca91ccae8,\n    __spreadArray: $ee049cf5886b856c$export$1216008129fb82ed,\n    __await: $ee049cf5886b856c$export$10c90e4f7922046c,\n    __asyncGenerator: $ee049cf5886b856c$export$e427f37a30a4de9b,\n    __asyncDelegator: $ee049cf5886b856c$export$bbd80228419bb833,\n    __asyncValues: $ee049cf5886b856c$export$e3b29a3d6162315f,\n    __makeTemplateObject: $ee049cf5886b856c$export$4fb47efe1390b86f,\n    __importStar: $ee049cf5886b856c$export$c21735bcef00d192,\n    __importDefault: $ee049cf5886b856c$export$da59b14a69baef04,\n    __classPrivateFieldGet: $ee049cf5886b856c$export$d5dcaf168c640c35,\n    __classPrivateFieldSet: $ee049cf5886b856c$export$d40a35129aaff81f,\n    __classPrivateFieldIn: $ee049cf5886b856c$export$81fdc39f203e4e04,\n    __addDisposableResource: $ee049cf5886b856c$export$88ac25d8e944e405,\n    __disposeResources: $ee049cf5886b856c$export$8f076105dc360e92\n};\n\n\n\"use strict\";\n\nvar $931db40849221e61$var$_vanillaJsMethods = $931db40849221e61$var$_interopRequireDefault((parcelRequire(\"jVLb9\")));\nfunction $931db40849221e61$var$_interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar $a1963888dea0535a$exports = {};\n\nfunction $a18b1d92dfa72a30$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $e0b61be59235ff5b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $a18b1d92dfa72a30$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $0fc28d33d181a550$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $334a71acc5e280b8$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $97ac2d957782f163$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $a18b1d92dfa72a30$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $a18b1d92dfa72a30$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $8eca4436e0cdcde8$export$1b5e630bc3aea29f(arr) {\n    return (0, $e0b61be59235ff5b$export$7e0947b5ad3404e2)(arr) || (0, $0fc28d33d181a550$export$1eb58a6e75231000)(arr) || (0, $97ac2d957782f163$export$a5be06335b3a083c)(arr) || (0, $334a71acc5e280b8$export$e6f3c4780d19eb2b)();\n}\n\n\n\n\"use strict\";\n/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */ /* eslint no-undefined:0, no-use-before-define: 0 */ //------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\nvar $5399481c73497d3e$export$83d89fbfd8236492;\nvar $5399481c73497d3e$export$660b2ee2d4fb4eff;\nvar $5399481c73497d3e$export$98e6a39c04603d36;\n// Deep copy.\n/* istanbul ignore next */ var $5399481c73497d3e$export$1c96bcab62cf7c19;\n/* istanbul ignore next */ var $5399481c73497d3e$export$82a60f5880a1bab8;\nvar $5399481c73497d3e$export$102192c5050f436d;\nvar $5399481c73497d3e$export$167acb9592fb8034;\n\"use strict\";\n\nvar $8NOO4 = parcelRequire(\"8NOO4\");\nvar $cac1ccf25e6b09cc$exports = {};\nfunction $658af1356526cabb$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $ee5d5e6879509c9c$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $ee5d5e6879509c9c$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $ee5d5e6879509c9c$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $ee5d5e6879509c9c$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $678156a147e80dcd$export$f09211a7d3c496a1(o) {\n    $678156a147e80dcd$export$f09211a7d3c496a1 = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return $678156a147e80dcd$export$f09211a7d3c496a1(o);\n}\n\n\nfunction $df0feb7a88f85dea$export$e4187255aefbc259(object, property) {\n    while(!Object.prototype.hasOwnProperty.call(object, property)){\n        object = (0, $678156a147e80dcd$export$f09211a7d3c496a1)(object);\n        if (object === null) break;\n    }\n    return object;\n}\n\n\nfunction $701e72a23173aba5$export$afb3516d9d608401(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) $701e72a23173aba5$export$afb3516d9d608401 = Reflect.get;\n    else $701e72a23173aba5$export$afb3516d9d608401 = function get(target, property, receiver) {\n        var base = (0, $df0feb7a88f85dea$export$e4187255aefbc259)(target, property);\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n        if (desc.get) return desc.get.call(receiver || target);\n        return desc.value;\n    };\n    return $701e72a23173aba5$export$afb3516d9d608401(target, property, receiver || target);\n}\n\n\n\nfunction $e37950b1393d50f0$export$c2c98ac76e997b63(o, p) {\n    $e37950b1393d50f0$export$c2c98ac76e997b63 = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return $e37950b1393d50f0$export$c2c98ac76e997b63(o, p);\n}\n\n\nfunction $62d828457c3ee45d$export$7e4530ad35d3bb8(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) throw new TypeError(\"Super expression must either be null or a function\");\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) (0, $e37950b1393d50f0$export$c2c98ac76e997b63)(subClass, superClass);\n}\n\n\n\nfunction $43f838e966846f40$export$685354647fba1516() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n\nfunction $187fa184ae998861$export$f3b8ed2e4a5d10b8(self) {\n    if (self === void 0) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return self;\n}\n\n\n\nfunction $0f296d7736b7e2c6$export$ef97c660ca164e52(self, call) {\n    if (call && ((0, $a15204915df1105f$export$5f0017c582d45a2d)(call) === \"object\" || typeof call === \"function\")) return call;\n    return (0, $187fa184ae998861$export$f3b8ed2e4a5d10b8)(self);\n}\n\n\nfunction $a50710ff550e008d$export$8dd05c13f5255580(Derived) {\n    var hasNativeReflectConstruct = (0, $43f838e966846f40$export$685354647fba1516)();\n    return function _createSuperInternal() {\n        var Super = (0, $678156a147e80dcd$export$f09211a7d3c496a1)(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = (0, $678156a147e80dcd$export$f09211a7d3c496a1)(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else result = Super.apply(this, arguments);\n        return (0, $0f296d7736b7e2c6$export$ef97c660ca164e52)(this, result);\n    };\n}\n\n\n\"use strict\";\nvar $41add75b6298aa1c$exports = {};\n$41add75b6298aa1c$exports = {\n    quot: '\"',\n    amp: \"&\",\n    apos: \"'\",\n    lt: \"<\",\n    gt: \">\",\n    nbsp: \"\\xa0\",\n    iexcl: \"\\xa1\",\n    cent: \"\\xa2\",\n    pound: \"\\xa3\",\n    curren: \"\\xa4\",\n    yen: \"\\xa5\",\n    brvbar: \"\\xa6\",\n    sect: \"\\xa7\",\n    uml: \"\\xa8\",\n    copy: \"\\xa9\",\n    ordf: \"\\xaa\",\n    laquo: \"\\xab\",\n    not: \"\\xac\",\n    shy: \"\\xad\",\n    reg: \"\\xae\",\n    macr: \"\\xaf\",\n    deg: \"\\xb0\",\n    plusmn: \"\\xb1\",\n    sup2: \"\\xb2\",\n    sup3: \"\\xb3\",\n    acute: \"\\xb4\",\n    micro: \"\\xb5\",\n    para: \"\\xb6\",\n    middot: \"\\xb7\",\n    cedil: \"\\xb8\",\n    sup1: \"\\xb9\",\n    ordm: \"\\xba\",\n    raquo: \"\\xbb\",\n    frac14: \"\\xbc\",\n    frac12: \"\\xbd\",\n    frac34: \"\\xbe\",\n    iquest: \"\\xbf\",\n    Agrave: \"\\xc0\",\n    Aacute: \"\\xc1\",\n    Acirc: \"\\xc2\",\n    Atilde: \"\\xc3\",\n    Auml: \"\\xc4\",\n    Aring: \"\\xc5\",\n    AElig: \"\\xc6\",\n    Ccedil: \"\\xc7\",\n    Egrave: \"\\xc8\",\n    Eacute: \"\\xc9\",\n    Ecirc: \"\\xca\",\n    Euml: \"\\xcb\",\n    Igrave: \"\\xcc\",\n    Iacute: \"\\xcd\",\n    Icirc: \"\\xce\",\n    Iuml: \"\\xcf\",\n    ETH: \"\\xd0\",\n    Ntilde: \"\\xd1\",\n    Ograve: \"\\xd2\",\n    Oacute: \"\\xd3\",\n    Ocirc: \"\\xd4\",\n    Otilde: \"\\xd5\",\n    Ouml: \"\\xd6\",\n    times: \"\\xd7\",\n    Oslash: \"\\xd8\",\n    Ugrave: \"\\xd9\",\n    Uacute: \"\\xda\",\n    Ucirc: \"\\xdb\",\n    Uuml: \"\\xdc\",\n    Yacute: \"\\xdd\",\n    THORN: \"\\xde\",\n    szlig: \"\\xdf\",\n    agrave: \"\\xe0\",\n    aacute: \"\\xe1\",\n    acirc: \"\\xe2\",\n    atilde: \"\\xe3\",\n    auml: \"\\xe4\",\n    aring: \"\\xe5\",\n    aelig: \"\\xe6\",\n    ccedil: \"\\xe7\",\n    egrave: \"\\xe8\",\n    eacute: \"\\xe9\",\n    ecirc: \"\\xea\",\n    euml: \"\\xeb\",\n    igrave: \"\\xec\",\n    iacute: \"\\xed\",\n    icirc: \"\\xee\",\n    iuml: \"\\xef\",\n    eth: \"\\xf0\",\n    ntilde: \"\\xf1\",\n    ograve: \"\\xf2\",\n    oacute: \"\\xf3\",\n    ocirc: \"\\xf4\",\n    otilde: \"\\xf5\",\n    ouml: \"\\xf6\",\n    divide: \"\\xf7\",\n    oslash: \"\\xf8\",\n    ugrave: \"\\xf9\",\n    uacute: \"\\xfa\",\n    ucirc: \"\\xfb\",\n    uuml: \"\\xfc\",\n    yacute: \"\\xfd\",\n    thorn: \"\\xfe\",\n    yuml: \"\\xff\",\n    OElig: \"\\u0152\",\n    oelig: \"\\u0153\",\n    Scaron: \"\\u0160\",\n    scaron: \"\\u0161\",\n    Yuml: \"\\u0178\",\n    fnof: \"\\u0192\",\n    circ: \"\\u02C6\",\n    tilde: \"\\u02DC\",\n    Alpha: \"\\u0391\",\n    Beta: \"\\u0392\",\n    Gamma: \"\\u0393\",\n    Delta: \"\\u0394\",\n    Epsilon: \"\\u0395\",\n    Zeta: \"\\u0396\",\n    Eta: \"\\u0397\",\n    Theta: \"\\u0398\",\n    Iota: \"\\u0399\",\n    Kappa: \"\\u039A\",\n    Lambda: \"\\u039B\",\n    Mu: \"\\u039C\",\n    Nu: \"\\u039D\",\n    Xi: \"\\u039E\",\n    Omicron: \"\\u039F\",\n    Pi: \"\\u03A0\",\n    Rho: \"\\u03A1\",\n    Sigma: \"\\u03A3\",\n    Tau: \"\\u03A4\",\n    Upsilon: \"\\u03A5\",\n    Phi: \"\\u03A6\",\n    Chi: \"\\u03A7\",\n    Psi: \"\\u03A8\",\n    Omega: \"\\u03A9\",\n    alpha: \"\\u03B1\",\n    beta: \"\\u03B2\",\n    gamma: \"\\u03B3\",\n    delta: \"\\u03B4\",\n    epsilon: \"\\u03B5\",\n    zeta: \"\\u03B6\",\n    eta: \"\\u03B7\",\n    theta: \"\\u03B8\",\n    iota: \"\\u03B9\",\n    kappa: \"\\u03BA\",\n    lambda: \"\\u03BB\",\n    mu: \"\\u03BC\",\n    nu: \"\\u03BD\",\n    xi: \"\\u03BE\",\n    omicron: \"\\u03BF\",\n    pi: \"\\u03C0\",\n    rho: \"\\u03C1\",\n    sigmaf: \"\\u03C2\",\n    sigma: \"\\u03C3\",\n    tau: \"\\u03C4\",\n    upsilon: \"\\u03C5\",\n    phi: \"\\u03C6\",\n    chi: \"\\u03C7\",\n    psi: \"\\u03C8\",\n    omega: \"\\u03C9\",\n    thetasym: \"\\u03D1\",\n    upsih: \"\\u03D2\",\n    piv: \"\\u03D6\",\n    ensp: \"\\u2002\",\n    emsp: \"\\u2003\",\n    thinsp: \"\\u2009\",\n    zwnj: \"\\u200C\",\n    zwj: \"\\u200D\",\n    lrm: \"\\u200E\",\n    rlm: \"\\u200F\",\n    ndash: \"\\u2013\",\n    mdash: \"\\u2014\",\n    lsquo: \"\\u2018\",\n    rsquo: \"\\u2019\",\n    sbquo: \"\\u201A\",\n    ldquo: \"\\u201C\",\n    rdquo: \"\\u201D\",\n    bdquo: \"\\u201E\",\n    dagger: \"\\u2020\",\n    Dagger: \"\\u2021\",\n    bull: \"\\u2022\",\n    hellip: \"\\u2026\",\n    permil: \"\\u2030\",\n    prime: \"\\u2032\",\n    Prime: \"\\u2033\",\n    lsaquo: \"\\u2039\",\n    rsaquo: \"\\u203A\",\n    oline: \"\\u203E\",\n    frasl: \"\\u2044\",\n    euro: \"\\u20AC\",\n    image: \"\\u2111\",\n    weierp: \"\\u2118\",\n    real: \"\\u211C\",\n    trade: \"\\u2122\",\n    alefsym: \"\\u2135\",\n    larr: \"\\u2190\",\n    uarr: \"\\u2191\",\n    rarr: \"\\u2192\",\n    darr: \"\\u2193\",\n    harr: \"\\u2194\",\n    crarr: \"\\u21B5\",\n    lArr: \"\\u21D0\",\n    uArr: \"\\u21D1\",\n    rArr: \"\\u21D2\",\n    dArr: \"\\u21D3\",\n    hArr: \"\\u21D4\",\n    forall: \"\\u2200\",\n    part: \"\\u2202\",\n    exist: \"\\u2203\",\n    empty: \"\\u2205\",\n    nabla: \"\\u2207\",\n    isin: \"\\u2208\",\n    notin: \"\\u2209\",\n    ni: \"\\u220B\",\n    prod: \"\\u220F\",\n    sum: \"\\u2211\",\n    minus: \"\\u2212\",\n    lowast: \"\\u2217\",\n    radic: \"\\u221A\",\n    prop: \"\\u221D\",\n    infin: \"\\u221E\",\n    ang: \"\\u2220\",\n    and: \"\\u2227\",\n    or: \"\\u2228\",\n    cap: \"\\u2229\",\n    cup: \"\\u222A\",\n    \"int\": \"\\u222B\",\n    there4: \"\\u2234\",\n    sim: \"\\u223C\",\n    cong: \"\\u2245\",\n    asymp: \"\\u2248\",\n    ne: \"\\u2260\",\n    equiv: \"\\u2261\",\n    le: \"\\u2264\",\n    ge: \"\\u2265\",\n    sub: \"\\u2282\",\n    sup: \"\\u2283\",\n    nsub: \"\\u2284\",\n    sube: \"\\u2286\",\n    supe: \"\\u2287\",\n    oplus: \"\\u2295\",\n    otimes: \"\\u2297\",\n    perp: \"\\u22A5\",\n    sdot: \"\\u22C5\",\n    lceil: \"\\u2308\",\n    rceil: \"\\u2309\",\n    lfloor: \"\\u230A\",\n    rfloor: \"\\u230B\",\n    lang: \"\\u2329\",\n    rang: \"\\u232A\",\n    loz: \"\\u25CA\",\n    spades: \"\\u2660\",\n    clubs: \"\\u2663\",\n    hearts: \"\\u2665\",\n    diams: \"\\u2666\"\n};\n\n\nvar $cac1ccf25e6b09cc$var$hexNumber = /^[\\da-fA-F]+$/;\nvar $cac1ccf25e6b09cc$var$decimalNumber = /^\\d+$/;\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nvar $cac1ccf25e6b09cc$var$acornJsxMap = new WeakMap();\n// Get the original tokens for the given `acorn` namespace object.\nfunction $cac1ccf25e6b09cc$var$getJsxTokens(acorn) {\n    acorn = acorn.Parser.acorn || acorn;\n    var acornJsx = $cac1ccf25e6b09cc$var$acornJsxMap.get(acorn);\n    if (!acornJsx) {\n        var tt = acorn.tokTypes;\n        var TokContext = acorn.TokContext;\n        var TokenType = acorn.TokenType;\n        var tc_oTag = new TokContext(\"<tag\", false);\n        var tc_cTag = new TokContext(\"</tag\", false);\n        var tc_expr = new TokContext(\"<tag>...</tag>\", true, true);\n        var tokContexts = {\n            tc_oTag: tc_oTag,\n            tc_cTag: tc_cTag,\n            tc_expr: tc_expr\n        };\n        var tokTypes = {\n            jsxName: new TokenType(\"jsxName\"),\n            jsxText: new TokenType(\"jsxText\", {\n                beforeExpr: true\n            }),\n            jsxTagStart: new TokenType(\"jsxTagStart\", {\n                startsExpr: true\n            }),\n            jsxTagEnd: new TokenType(\"jsxTagEnd\")\n        };\n        tokTypes.jsxTagStart.updateContext = function() {\n            this.context.push(tc_expr); // treat as beginning of JSX expression\n            this.context.push(tc_oTag); // start opening tag context\n            this.exprAllowed = false;\n        };\n        tokTypes.jsxTagEnd.updateContext = function(prevType) {\n            var out = this.context.pop();\n            if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n                this.context.pop();\n                this.exprAllowed = this.curContext() === tc_expr;\n            } else this.exprAllowed = true;\n        };\n        acornJsx = {\n            tokContexts: tokContexts,\n            tokTypes: tokTypes\n        };\n        $cac1ccf25e6b09cc$var$acornJsxMap.set(acorn, acornJsx);\n    }\n    return acornJsx;\n}\n// Transforms JSX element name to string.\nfunction $cac1ccf25e6b09cc$var$getQualifiedJSXName(object) {\n    if (!object) return object;\n    if (object.type === \"JSXIdentifier\") return object.name;\n    if (object.type === \"JSXNamespacedName\") return object.namespace.name + \":\" + object.name.name;\n    if (object.type === \"JSXMemberExpression\") return $cac1ccf25e6b09cc$var$getQualifiedJSXName(object.object) + \".\" + $cac1ccf25e6b09cc$var$getQualifiedJSXName(object.property);\n}\n$cac1ccf25e6b09cc$exports = function(options) {\n    options = options || {};\n    return function(Parser) {\n        return $cac1ccf25e6b09cc$var$plugin({\n            allowNamespaces: options.allowNamespaces !== false,\n            allowNamespacedObjects: !!options.allowNamespacedObjects\n        }, Parser);\n    };\n};\n\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty($cac1ccf25e6b09cc$exports, \"tokTypes\", {\n    get: function get_tokTypes() {\n        return $cac1ccf25e6b09cc$var$getJsxTokens((parcelRequire(\"8NOO4\"))).tokTypes;\n    },\n    configurable: true,\n    enumerable: true\n});\n\nfunction $cac1ccf25e6b09cc$var$plugin(options, Parser) {\n    var acorn = Parser.acorn || (parcelRequire(\"8NOO4\"));\n    var acornJsx = $cac1ccf25e6b09cc$var$getJsxTokens(acorn);\n    var tt = acorn.tokTypes;\n    var tok = acornJsx.tokTypes;\n    var tokContexts = acorn.tokContexts;\n    var tc_oTag = acornJsx.tokContexts.tc_oTag;\n    var tc_cTag = acornJsx.tokContexts.tc_cTag;\n    var tc_expr = acornJsx.tokContexts.tc_expr;\n    var isNewLine = acorn.isNewLine;\n    var isIdentifierStart = acorn.isIdentifierStart;\n    var isIdentifierChar = acorn.isIdentifierChar;\n    return /*#__PURE__*/ function(Parser) {\n        (0, $62d828457c3ee45d$export$7e4530ad35d3bb8)(_class, Parser);\n        var _super = (0, $a50710ff550e008d$export$8dd05c13f5255580)(_class);\n        function _class() {\n            (0, $658af1356526cabb$export$2996f80ef42b8419)(this, _class);\n            return _super.apply(this, arguments);\n        }\n        (0, $ee5d5e6879509c9c$export$d60067ff2358eee8)(_class, [\n            {\n                // Reads inline JSX contents token.\n                key: \"jsx_readToken\",\n                value: function jsx_readToken() {\n                    var out = \"\", chunkStart = this.pos;\n                    for(;;){\n                        if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated JSX contents\");\n                        var ch = this.input.charCodeAt(this.pos);\n                        switch(ch){\n                            case 60:\n                            case 123:\n                                if (this.pos === this.start) {\n                                    if (ch === 60 && this.exprAllowed) {\n                                        ++this.pos;\n                                        return this.finishToken(tok.jsxTagStart);\n                                    }\n                                    return this.getTokenFromCode(ch);\n                                }\n                                out += this.input.slice(chunkStart, this.pos);\n                                return this.finishToken(tok.jsxText, out);\n                            case 38:\n                                out += this.input.slice(chunkStart, this.pos);\n                                out += this.jsx_readEntity();\n                                chunkStart = this.pos;\n                                break;\n                            case 62:\n                            case 125:\n                                this.raise(this.pos, \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" + (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + '`{\"' + this.input[this.pos] + '\"}' + \"`?\");\n                            default:\n                                if (isNewLine(ch)) {\n                                    out += this.input.slice(chunkStart, this.pos);\n                                    out += this.jsx_readNewLine(true);\n                                    chunkStart = this.pos;\n                                } else ++this.pos;\n                        }\n                    }\n                }\n            },\n            {\n                key: \"jsx_readNewLine\",\n                value: function jsx_readNewLine(normalizeCRLF) {\n                    var ch = this.input.charCodeAt(this.pos);\n                    var out;\n                    ++this.pos;\n                    if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n                        ++this.pos;\n                        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n                    } else out = String.fromCharCode(ch);\n                    if (this.options.locations) {\n                        ++this.curLine;\n                        this.lineStart = this.pos;\n                    }\n                    return out;\n                }\n            },\n            {\n                key: \"jsx_readString\",\n                value: function jsx_readString(quote) {\n                    var out = \"\", chunkStart = ++this.pos;\n                    for(;;){\n                        if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n                        var ch = this.input.charCodeAt(this.pos);\n                        if (ch === quote) break;\n                        if (ch === 38) {\n                            out += this.input.slice(chunkStart, this.pos);\n                            out += this.jsx_readEntity();\n                            chunkStart = this.pos;\n                        } else if (isNewLine(ch)) {\n                            out += this.input.slice(chunkStart, this.pos);\n                            out += this.jsx_readNewLine(false);\n                            chunkStart = this.pos;\n                        } else ++this.pos;\n                    }\n                    out += this.input.slice(chunkStart, this.pos++);\n                    return this.finishToken(tt.string, out);\n                }\n            },\n            {\n                key: \"jsx_readEntity\",\n                value: function jsx_readEntity() {\n                    var str = \"\", count = 0, entity;\n                    var ch = this.input[this.pos];\n                    if (ch !== \"&\") this.raise(this.pos, \"Entity must start with an ampersand\");\n                    var startPos = ++this.pos;\n                    while(this.pos < this.input.length && count++ < 10){\n                        ch = this.input[this.pos++];\n                        if (ch === \";\") {\n                            if (str[0] === \"#\") {\n                                if (str[1] === \"x\") {\n                                    str = str.substr(2);\n                                    if ($cac1ccf25e6b09cc$var$hexNumber.test(str)) entity = String.fromCharCode(parseInt(str, 16));\n                                } else {\n                                    str = str.substr(1);\n                                    if ($cac1ccf25e6b09cc$var$decimalNumber.test(str)) entity = String.fromCharCode(parseInt(str, 10));\n                                }\n                            } else entity = $41add75b6298aa1c$exports[str];\n                            break;\n                        }\n                        str += ch;\n                    }\n                    if (!entity) {\n                        this.pos = startPos;\n                        return \"&\";\n                    }\n                    return entity;\n                }\n            },\n            {\n                // Read a JSX identifier (valid tag or attribute name).\n                //\n                // Optimized version since JSX identifiers can't contain\n                // escape characters and so can be read as single slice.\n                // Also assumes that first character was already checked\n                // by isIdentifierStart in readToken.\n                key: \"jsx_readWord\",\n                value: function jsx_readWord() {\n                    var ch, start = this.pos;\n                    do ch = this.input.charCodeAt(++this.pos);\n                    while (isIdentifierChar(ch) || ch === 45); // '-'\n                    return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n                }\n            },\n            {\n                // Parse next token as JSX identifier\n                key: \"jsx_parseIdentifier\",\n                value: function jsx_parseIdentifier() {\n                    var node = this.startNode();\n                    if (this.type === tok.jsxName) node.name = this.value;\n                    else if (this.type.keyword) node.name = this.type.keyword;\n                    else this.unexpected();\n                    this.next();\n                    return this.finishNode(node, \"JSXIdentifier\");\n                }\n            },\n            {\n                // Parse namespaced identifier.\n                key: \"jsx_parseNamespacedName\",\n                value: function jsx_parseNamespacedName() {\n                    var startPos = this.start, startLoc = this.startLoc;\n                    var name = this.jsx_parseIdentifier();\n                    if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n                    var node = this.startNodeAt(startPos, startLoc);\n                    node.namespace = name;\n                    node.name = this.jsx_parseIdentifier();\n                    return this.finishNode(node, \"JSXNamespacedName\");\n                }\n            },\n            {\n                // Parses element name in any form - namespaced, member\n                // or single identifier.\n                key: \"jsx_parseElementName\",\n                value: function jsx_parseElementName() {\n                    if (this.type === tok.jsxTagEnd) return \"\";\n                    var startPos = this.start, startLoc = this.startLoc;\n                    var node = this.jsx_parseNamespacedName();\n                    if (this.type === tt.dot && node.type === \"JSXNamespacedName\" && !options.allowNamespacedObjects) this.unexpected();\n                    while(this.eat(tt.dot)){\n                        var newNode = this.startNodeAt(startPos, startLoc);\n                        newNode.object = node;\n                        newNode.property = this.jsx_parseIdentifier();\n                        node = this.finishNode(newNode, \"JSXMemberExpression\");\n                    }\n                    return node;\n                }\n            },\n            {\n                // Parses any type of JSX attribute value.\n                key: \"jsx_parseAttributeValue\",\n                value: function jsx_parseAttributeValue() {\n                    switch(this.type){\n                        case tt.braceL:\n                            var node = this.jsx_parseExpressionContainer();\n                            if (node.expression.type === \"JSXEmptyExpression\") this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n                            return node;\n                        case tok.jsxTagStart:\n                        case tt.string:\n                            return this.parseExprAtom();\n                        default:\n                            this.raise(this.start, \"JSX value should be either an expression or a quoted JSX text\");\n                    }\n                }\n            },\n            {\n                // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n                // and so it should start at the end of last read token (left brace) and finish\n                // at the beginning of the next one (right brace).\n                key: \"jsx_parseEmptyExpression\",\n                value: function jsx_parseEmptyExpression() {\n                    var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n                    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.start, this.startLoc);\n                }\n            },\n            {\n                // Parses JSX expression enclosed into curly brackets.\n                key: \"jsx_parseExpressionContainer\",\n                value: function jsx_parseExpressionContainer() {\n                    var node = this.startNode();\n                    this.next();\n                    node.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();\n                    this.expect(tt.braceR);\n                    return this.finishNode(node, \"JSXExpressionContainer\");\n                }\n            },\n            {\n                // Parses following JSX attribute name-value pair.\n                key: \"jsx_parseAttribute\",\n                value: function jsx_parseAttribute() {\n                    var node = this.startNode();\n                    if (this.eat(tt.braceL)) {\n                        this.expect(tt.ellipsis);\n                        node.argument = this.parseMaybeAssign();\n                        this.expect(tt.braceR);\n                        return this.finishNode(node, \"JSXSpreadAttribute\");\n                    }\n                    node.name = this.jsx_parseNamespacedName();\n                    node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n                    return this.finishNode(node, \"JSXAttribute\");\n                }\n            },\n            {\n                // Parses JSX opening tag starting after '<'.\n                key: \"jsx_parseOpeningElementAt\",\n                value: function jsx_parseOpeningElementAt(startPos, startLoc) {\n                    var node = this.startNodeAt(startPos, startLoc);\n                    node.attributes = [];\n                    var nodeName = this.jsx_parseElementName();\n                    if (nodeName) node.name = nodeName;\n                    while(this.type !== tt.slash && this.type !== tok.jsxTagEnd)node.attributes.push(this.jsx_parseAttribute());\n                    node.selfClosing = this.eat(tt.slash);\n                    this.expect(tok.jsxTagEnd);\n                    return this.finishNode(node, nodeName ? \"JSXOpeningElement\" : \"JSXOpeningFragment\");\n                }\n            },\n            {\n                // Parses JSX closing tag starting after '</'.\n                key: \"jsx_parseClosingElementAt\",\n                value: function jsx_parseClosingElementAt(startPos, startLoc) {\n                    var node = this.startNodeAt(startPos, startLoc);\n                    var nodeName = this.jsx_parseElementName();\n                    if (nodeName) node.name = nodeName;\n                    this.expect(tok.jsxTagEnd);\n                    return this.finishNode(node, nodeName ? \"JSXClosingElement\" : \"JSXClosingFragment\");\n                }\n            },\n            {\n                // Parses entire JSX element, including it's opening tag\n                // (starting after '<'), attributes, contents and closing tag.\n                key: \"jsx_parseElementAt\",\n                value: function jsx_parseElementAt(startPos, startLoc) {\n                    var node = this.startNodeAt(startPos, startLoc);\n                    var children = [];\n                    var openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n                    var closingElement = null;\n                    if (!openingElement.selfClosing) {\n                        contents: for(;;)switch(this.type){\n                            case tok.jsxTagStart:\n                                startPos = this.start;\n                                startLoc = this.startLoc;\n                                this.next();\n                                if (this.eat(tt.slash)) {\n                                    closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n                                    break contents;\n                                }\n                                children.push(this.jsx_parseElementAt(startPos, startLoc));\n                                break;\n                            case tok.jsxText:\n                                children.push(this.parseExprAtom());\n                                break;\n                            case tt.braceL:\n                                children.push(this.jsx_parseExpressionContainer());\n                                break;\n                            default:\n                                this.unexpected();\n                        }\n                        if ($cac1ccf25e6b09cc$var$getQualifiedJSXName(closingElement.name) !== $cac1ccf25e6b09cc$var$getQualifiedJSXName(openingElement.name)) this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + $cac1ccf25e6b09cc$var$getQualifiedJSXName(openingElement.name) + \">\");\n                    }\n                    var fragmentOrElement = openingElement.name ? \"Element\" : \"Fragment\";\n                    node[\"opening\" + fragmentOrElement] = openingElement;\n                    node[\"closing\" + fragmentOrElement] = closingElement;\n                    node.children = children;\n                    if (this.type === tt.relational && this.value === \"<\") this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n                    return this.finishNode(node, \"JSX\" + fragmentOrElement);\n                }\n            },\n            {\n                // Parse JSX text\n                key: \"jsx_parseText\",\n                value: function jsx_parseText() {\n                    var node = this.parseLiteral(this.value);\n                    node.type = \"JSXText\";\n                    return node;\n                }\n            },\n            {\n                // Parses entire JSX element from current position.\n                key: \"jsx_parseElement\",\n                value: function jsx_parseElement() {\n                    var startPos = this.start, startLoc = this.startLoc;\n                    this.next();\n                    return this.jsx_parseElementAt(startPos, startLoc);\n                }\n            },\n            {\n                key: \"parseExprAtom\",\n                value: function parseExprAtom(refShortHandDefaultPos) {\n                    if (this.type === tok.jsxText) return this.jsx_parseText();\n                    else if (this.type === tok.jsxTagStart) return this.jsx_parseElement();\n                    else return (0, $701e72a23173aba5$export$afb3516d9d608401)((0, $678156a147e80dcd$export$f09211a7d3c496a1)(_class.prototype), \"parseExprAtom\", this).call(this, refShortHandDefaultPos);\n                }\n            },\n            {\n                key: \"readToken\",\n                value: function readToken(code) {\n                    var context = this.curContext();\n                    if (context === tc_expr) return this.jsx_readToken();\n                    if (context === tc_oTag || context === tc_cTag) {\n                        if (isIdentifierStart(code)) return this.jsx_readWord();\n                        if (code == 62) {\n                            ++this.pos;\n                            return this.finishToken(tok.jsxTagEnd);\n                        }\n                        if ((code === 34 || code === 39) && context == tc_oTag) return this.jsx_readString(code);\n                    }\n                    if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n                        ++this.pos;\n                        return this.finishToken(tok.jsxTagStart);\n                    }\n                    return (0, $701e72a23173aba5$export$afb3516d9d608401)((0, $678156a147e80dcd$export$f09211a7d3c496a1)(_class.prototype), \"readToken\", this).call(this, code);\n                }\n            },\n            {\n                key: \"updateContext\",\n                value: function updateContext(prevType) {\n                    if (this.type == tt.braceL) {\n                        var curContext = this.curContext();\n                        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n                        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n                        else (0, $701e72a23173aba5$export$afb3516d9d608401)((0, $678156a147e80dcd$export$f09211a7d3c496a1)(_class.prototype), \"updateContext\", this).call(this, prevType);\n                        this.exprAllowed = true;\n                    } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n                        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n                        this.context.push(tc_cTag); // reconsider as closing tag context\n                        this.exprAllowed = false;\n                    } else return (0, $701e72a23173aba5$export$afb3516d9d608401)((0, $678156a147e80dcd$export$f09211a7d3c496a1)(_class.prototype), \"updateContext\", this).call(this, prevType);\n                }\n            }\n        ], [\n            {\n                key: \"acornJsx\",\n                get: // Expose actual `tokTypes` and `tokContexts` to other plugins.\n                function get() {\n                    return acornJsx;\n                }\n            }\n        ]);\n        return _class;\n    }(Parser);\n}\n\n\nvar $2ad2af9d0a7c0bd9$exports = {};\n/**\n * @fileoverview The AST node types produced by the parser.\n * @author Nicholas C. Zakas\n */ \"use strict\";\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n// None!\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n$2ad2af9d0a7c0bd9$exports = {\n    AssignmentExpression: \"AssignmentExpression\",\n    AssignmentPattern: \"AssignmentPattern\",\n    ArrayExpression: \"ArrayExpression\",\n    ArrayPattern: \"ArrayPattern\",\n    ArrowFunctionExpression: \"ArrowFunctionExpression\",\n    AwaitExpression: \"AwaitExpression\",\n    BlockStatement: \"BlockStatement\",\n    BinaryExpression: \"BinaryExpression\",\n    BreakStatement: \"BreakStatement\",\n    CallExpression: \"CallExpression\",\n    CatchClause: \"CatchClause\",\n    ClassBody: \"ClassBody\",\n    ClassDeclaration: \"ClassDeclaration\",\n    ClassExpression: \"ClassExpression\",\n    ConditionalExpression: \"ConditionalExpression\",\n    ContinueStatement: \"ContinueStatement\",\n    DoWhileStatement: \"DoWhileStatement\",\n    DebuggerStatement: \"DebuggerStatement\",\n    EmptyStatement: \"EmptyStatement\",\n    ExpressionStatement: \"ExpressionStatement\",\n    ForStatement: \"ForStatement\",\n    ForInStatement: \"ForInStatement\",\n    ForOfStatement: \"ForOfStatement\",\n    FunctionDeclaration: \"FunctionDeclaration\",\n    FunctionExpression: \"FunctionExpression\",\n    Identifier: \"Identifier\",\n    IfStatement: \"IfStatement\",\n    Literal: \"Literal\",\n    LabeledStatement: \"LabeledStatement\",\n    LogicalExpression: \"LogicalExpression\",\n    MemberExpression: \"MemberExpression\",\n    MetaProperty: \"MetaProperty\",\n    MethodDefinition: \"MethodDefinition\",\n    NewExpression: \"NewExpression\",\n    ObjectExpression: \"ObjectExpression\",\n    ObjectPattern: \"ObjectPattern\",\n    Program: \"Program\",\n    Property: \"Property\",\n    RestElement: \"RestElement\",\n    ReturnStatement: \"ReturnStatement\",\n    SequenceExpression: \"SequenceExpression\",\n    SpreadElement: \"SpreadElement\",\n    Super: \"Super\",\n    SwitchCase: \"SwitchCase\",\n    SwitchStatement: \"SwitchStatement\",\n    TaggedTemplateExpression: \"TaggedTemplateExpression\",\n    TemplateElement: \"TemplateElement\",\n    TemplateLiteral: \"TemplateLiteral\",\n    ThisExpression: \"ThisExpression\",\n    ThrowStatement: \"ThrowStatement\",\n    TryStatement: \"TryStatement\",\n    UnaryExpression: \"UnaryExpression\",\n    UpdateExpression: \"UpdateExpression\",\n    VariableDeclaration: \"VariableDeclaration\",\n    VariableDeclarator: \"VariableDeclarator\",\n    WhileStatement: \"WhileStatement\",\n    WithStatement: \"WithStatement\",\n    YieldExpression: \"YieldExpression\",\n    JSXIdentifier: \"JSXIdentifier\",\n    JSXNamespacedName: \"JSXNamespacedName\",\n    JSXMemberExpression: \"JSXMemberExpression\",\n    JSXEmptyExpression: \"JSXEmptyExpression\",\n    JSXExpressionContainer: \"JSXExpressionContainer\",\n    JSXElement: \"JSXElement\",\n    JSXClosingElement: \"JSXClosingElement\",\n    JSXOpeningElement: \"JSXOpeningElement\",\n    JSXAttribute: \"JSXAttribute\",\n    JSXSpreadAttribute: \"JSXSpreadAttribute\",\n    JSXText: \"JSXText\",\n    ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n    ExportNamedDeclaration: \"ExportNamedDeclaration\",\n    ExportAllDeclaration: \"ExportAllDeclaration\",\n    ExportSpecifier: \"ExportSpecifier\",\n    ImportDeclaration: \"ImportDeclaration\",\n    ImportSpecifier: \"ImportSpecifier\",\n    ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n    ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\"\n};\n\n\nvar $c367f24a2f998695$exports = {};\n\n\n\n\n\n\n\n\"use strict\";\nvar $9501182f9803c280$exports = {};\n/**\n * @fileoverview Translates tokens between Acorn format and Esprima format.\n * @author Nicholas C. Zakas\n */ /* eslint no-underscore-dangle: 0 */ \"use strict\";\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n// none!\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n// Esprima Token Types\nvar $9501182f9803c280$var$Token = {\n    Boolean: \"Boolean\",\n    EOF: \"<end>\",\n    Identifier: \"Identifier\",\n    Keyword: \"Keyword\",\n    Null: \"Null\",\n    Numeric: \"Numeric\",\n    Punctuator: \"Punctuator\",\n    String: \"String\",\n    RegularExpression: \"RegularExpression\",\n    Template: \"Template\",\n    JSXIdentifier: \"JSXIdentifier\",\n    JSXText: \"JSXText\"\n};\n/**\n * Converts part of a template into an Esprima token.\n * @param {AcornToken[]} tokens The Acorn tokens representing the template.\n * @param {string} code The source code.\n * @returns {EsprimaToken} The Esprima equivalent of the template token.\n * @private\n */ function $9501182f9803c280$var$convertTemplatePart(tokens, code) {\n    var firstToken = tokens[0], lastTemplateToken = tokens[tokens.length - 1];\n    var token = {\n        type: $9501182f9803c280$var$Token.Template,\n        value: code.slice(firstToken.start, lastTemplateToken.end)\n    };\n    if (firstToken.loc) token.loc = {\n        start: firstToken.loc.start,\n        end: lastTemplateToken.loc.end\n    };\n    if (firstToken.range) {\n        token.start = firstToken.range[0];\n        token.end = lastTemplateToken.range[1];\n        token.range = [\n            token.start,\n            token.end\n        ];\n    }\n    return token;\n}\n/**\n * Contains logic to translate Acorn tokens into Esprima tokens.\n * @param {Object} acornTokTypes The Acorn token types.\n * @param {string} code The source code Acorn is parsing. This is necessary\n *      to correct the \"value\" property of some tokens.\n * @constructor\n */ function $9501182f9803c280$var$TokenTranslator(acornTokTypes, code) {\n    // token types\n    this._acornTokTypes = acornTokTypes;\n    // token buffer for templates\n    this._tokens = [];\n    // track the last curly brace\n    this._curlyBrace = null;\n    // the source code\n    this._code = code;\n}\n$9501182f9803c280$var$TokenTranslator.prototype = {\n    constructor: $9501182f9803c280$var$TokenTranslator,\n    /**\n     * Translates a single Esprima token to a single Acorn token. This may be\n     * inaccurate due to how templates are handled differently in Esprima and\n     * Acorn, but should be accurate for all other tokens.\n     * @param {AcornToken} token The Acorn token to translate.\n     * @param {Object} extra Espree extra object.\n     * @returns {EsprimaToken} The Esprima version of the token.\n     */ translate: function(token, extra) {\n        var type = token.type, tt = this._acornTokTypes;\n        if (type === tt.name) {\n            token.type = $9501182f9803c280$var$Token.Identifier;\n            // TODO: See if this is an Acorn bug\n            if (token.value === \"static\") token.type = $9501182f9803c280$var$Token.Keyword;\n            if (extra.ecmaVersion > 5 && (token.value === \"yield\" || token.value === \"let\")) token.type = $9501182f9803c280$var$Token.Keyword;\n        } else if (type === tt.semi || type === tt.comma || type === tt.parenL || type === tt.parenR || type === tt.braceL || type === tt.braceR || type === tt.dot || type === tt.bracketL || type === tt.colon || type === tt.question || type === tt.bracketR || type === tt.ellipsis || type === tt.arrow || type === tt.jsxTagStart || type === tt.incDec || type === tt.starstar || type === tt.jsxTagEnd || type === tt.prefix || type === tt.questionDot || type.binop && !type.keyword || type.isAssign) {\n            token.type = $9501182f9803c280$var$Token.Punctuator;\n            token.value = this._code.slice(token.start, token.end);\n        } else if (type === tt.jsxName) token.type = $9501182f9803c280$var$Token.JSXIdentifier;\n        else if (type.label === \"jsxText\" || type === tt.jsxAttrValueToken) token.type = $9501182f9803c280$var$Token.JSXText;\n        else if (type.keyword) {\n            if (type.keyword === \"true\" || type.keyword === \"false\") token.type = $9501182f9803c280$var$Token.Boolean;\n            else if (type.keyword === \"null\") token.type = $9501182f9803c280$var$Token.Null;\n            else token.type = $9501182f9803c280$var$Token.Keyword;\n        } else if (type === tt.num) {\n            token.type = $9501182f9803c280$var$Token.Numeric;\n            token.value = this._code.slice(token.start, token.end);\n        } else if (type === tt.string) {\n            if (extra.jsxAttrValueToken) {\n                extra.jsxAttrValueToken = false;\n                token.type = $9501182f9803c280$var$Token.JSXText;\n            } else token.type = $9501182f9803c280$var$Token.String;\n            token.value = this._code.slice(token.start, token.end);\n        } else if (type === tt.regexp) {\n            token.type = $9501182f9803c280$var$Token.RegularExpression;\n            var value = token.value;\n            token.regex = {\n                flags: value.flags,\n                pattern: value.pattern\n            };\n            token.value = \"/\".concat(value.pattern, \"/\").concat(value.flags);\n        }\n        return token;\n    },\n    /**\n     * Function to call during Acorn's onToken handler.\n     * @param {AcornToken} token The Acorn token.\n     * @param {Object} extra The Espree extra object.\n     * @returns {void}\n     */ onToken: function(token, extra) {\n        var that = this, tt = this._acornTokTypes, tokens = extra.tokens, templateTokens = this._tokens;\n        /**\n         * Flushes the buffered template tokens and resets the template\n         * tracking.\n         * @returns {void}\n         * @private\n         */ function translateTemplateTokens() {\n            tokens.push($9501182f9803c280$var$convertTemplatePart(that._tokens, that._code));\n            that._tokens = [];\n        }\n        if (token.type === tt.eof) {\n            // might be one last curlyBrace\n            if (this._curlyBrace) tokens.push(this.translate(this._curlyBrace, extra));\n            return;\n        }\n        if (token.type === tt.backQuote) {\n            // if there's already a curly, it's not part of the template\n            if (this._curlyBrace) {\n                tokens.push(this.translate(this._curlyBrace, extra));\n                this._curlyBrace = null;\n            }\n            templateTokens.push(token);\n            // it's the end\n            if (templateTokens.length > 1) translateTemplateTokens();\n            return;\n        }\n        if (token.type === tt.dollarBraceL) {\n            templateTokens.push(token);\n            translateTemplateTokens();\n            return;\n        }\n        if (token.type === tt.braceR) {\n            // if there's already a curly, it's not part of the template\n            if (this._curlyBrace) tokens.push(this.translate(this._curlyBrace, extra));\n            // store new curly for later\n            this._curlyBrace = token;\n            return;\n        }\n        if (token.type === tt.template || token.type === tt.invalidTemplate) {\n            if (this._curlyBrace) {\n                templateTokens.push(this._curlyBrace);\n                this._curlyBrace = null;\n            }\n            templateTokens.push(token);\n            return;\n        }\n        if (this._curlyBrace) {\n            tokens.push(this.translate(this._curlyBrace, extra));\n            this._curlyBrace = null;\n        }\n        tokens.push(this.translate(token, extra));\n    }\n};\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n$9501182f9803c280$exports = $9501182f9803c280$var$TokenTranslator;\n\n\nvar $f32cf6d90a2ce49c$exports = {};\n/**\n * @fileoverview A collection of methods for processing Espree's options.\n * @author Kai Cataldo\n */ \n\n\"use strict\";\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nvar $f32cf6d90a2ce49c$var$DEFAULT_ECMA_VERSION = 5;\nvar $f32cf6d90a2ce49c$var$SUPPORTED_VERSIONS = [\n    3,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12\n];\n/**\n * Normalize ECMAScript version from the initial config\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @throws {Error} throws an error if the ecmaVersion is invalid.\n * @returns {number} normalized ECMAScript version\n */ function $f32cf6d90a2ce49c$var$normalizeEcmaVersion() {\n    var ecmaVersion = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : $f32cf6d90a2ce49c$var$DEFAULT_ECMA_VERSION;\n    if (typeof ecmaVersion !== \"number\") throw new Error(\"ecmaVersion must be a number. Received value of type \".concat(typeof ecmaVersion === \"undefined\" ? \"undefined\" : (0, $a15204915df1105f$export$5f0017c582d45a2d)(ecmaVersion), \" instead.\"));\n    var version = ecmaVersion;\n    // Calculate ECMAScript edition number from official year version starting with\n    // ES2015, which corresponds with ES6 (or a difference of 2009).\n    if (version >= 2015) version -= 2009;\n    if (!$f32cf6d90a2ce49c$var$SUPPORTED_VERSIONS.includes(version)) throw new Error(\"Invalid ecmaVersion.\");\n    return version;\n}\n/**\n * Normalize sourceType from the initial config\n * @param {string} sourceType to normalize\n * @throws {Error} throw an error if sourceType is invalid\n * @returns {string} normalized sourceType\n */ function $f32cf6d90a2ce49c$var$normalizeSourceType() {\n    var sourceType = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"script\";\n    if (sourceType === \"script\" || sourceType === \"module\") return sourceType;\n    throw new Error(\"Invalid sourceType.\");\n}\n/**\n * Normalize parserOptions\n * @param {Object} options the parser options to normalize\n * @throws {Error} throw an error if found invalid option.\n * @returns {Object} normalized options\n */ function $f32cf6d90a2ce49c$var$normalizeOptions(options) {\n    var ecmaVersion = $f32cf6d90a2ce49c$var$normalizeEcmaVersion(options.ecmaVersion);\n    var sourceType = $f32cf6d90a2ce49c$var$normalizeSourceType(options.sourceType);\n    var ranges = options.range === true;\n    var locations = options.loc === true;\n    if (sourceType === \"module\" && ecmaVersion < 6) throw new Error(\"sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.\");\n    return Object.assign({}, options, {\n        ecmaVersion: ecmaVersion,\n        sourceType: sourceType,\n        ranges: ranges,\n        locations: locations\n    });\n}\n/**\n * Get the latest ECMAScript version supported by Espree.\n * @returns {number} The latest ECMAScript version.\n */ function $f32cf6d90a2ce49c$var$getLatestEcmaVersion() {\n    return $f32cf6d90a2ce49c$var$SUPPORTED_VERSIONS[$f32cf6d90a2ce49c$var$SUPPORTED_VERSIONS.length - 1];\n}\n/**\n * Get the list of ECMAScript versions supported by Espree.\n * @returns {number[]} An array containing the supported ECMAScript versions.\n */ function $f32cf6d90a2ce49c$var$getSupportedEcmaVersions() {\n    return (0, $8eca4436e0cdcde8$export$1b5e630bc3aea29f)($f32cf6d90a2ce49c$var$SUPPORTED_VERSIONS);\n}\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n$f32cf6d90a2ce49c$exports = {\n    normalizeOptions: $f32cf6d90a2ce49c$var$normalizeOptions,\n    getLatestEcmaVersion: $f32cf6d90a2ce49c$var$getLatestEcmaVersion,\n    getSupportedEcmaVersions: $f32cf6d90a2ce49c$var$getSupportedEcmaVersions\n};\n\n\nvar $c367f24a2f998695$require$normalizeOptions = $f32cf6d90a2ce49c$exports.normalizeOptions;\nvar $c367f24a2f998695$var$STATE = Symbol(\"espree's internal state\");\nvar $c367f24a2f998695$var$ESPRIMA_FINISH_NODE = Symbol(\"espree's esprimaFinishNode\");\n/**\n * Converts an Acorn comment to a Esprima comment.\n * @param {boolean} block True if it's a block comment, false if not.\n * @param {string} text The text of the comment.\n * @param {int} start The index at which the comment starts.\n * @param {int} end The index at which the comment ends.\n * @param {Location} startLoc The location at which the comment starts.\n * @param {Location} endLoc The location at which the comment ends.\n * @returns {Object} The comment object.\n * @private\n */ function $c367f24a2f998695$var$convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text\n    };\n    if (typeof start === \"number\") {\n        comment.start = start;\n        comment.end = end;\n        comment.range = [\n            start,\n            end\n        ];\n    }\n    if (typeof startLoc === \"object\") comment.loc = {\n        start: startLoc,\n        end: endLoc\n    };\n    return comment;\n}\n$c367f24a2f998695$exports = function() {\n    return function(Parser) {\n        var tokTypes = Object.assign({}, Parser.acorn.tokTypes);\n        if (Parser.acornJsx) Object.assign(tokTypes, Parser.acornJsx.tokTypes);\n        return /*#__PURE__*/ function(Parser1) {\n            (0, $62d828457c3ee45d$export$7e4530ad35d3bb8)(Espree, Parser1);\n            var _super = (0, $a50710ff550e008d$export$8dd05c13f5255580)(Espree);\n            function Espree(opts, code) {\n                (0, $658af1356526cabb$export$2996f80ef42b8419)(this, Espree);\n                var _this;\n                if (typeof opts !== \"object\" || opts === null) opts = {};\n                if (typeof code !== \"string\" && !(code instanceof String)) code = String(code);\n                var options = $c367f24a2f998695$require$normalizeOptions(opts);\n                var ecmaFeatures = options.ecmaFeatures || {};\n                var tokenTranslator = options.tokens === true ? new $9501182f9803c280$exports(tokTypes, code) : null;\n                // Initialize acorn parser.\n                _this = _super.call(this, {\n                    // TODO: use {...options} when spread is supported(Node.js >= 8.3.0).\n                    ecmaVersion: options.ecmaVersion,\n                    sourceType: options.sourceType,\n                    ranges: options.ranges,\n                    locations: options.locations,\n                    // Truthy value is true for backward compatibility.\n                    allowReturnOutsideFunction: Boolean(ecmaFeatures.globalReturn),\n                    // Collect tokens\n                    onToken: function(token) {\n                        if (tokenTranslator) // Use `tokens`, `ecmaVersion`, and `jsxAttrValueToken` in the state.\n                        tokenTranslator.onToken(token, _this[$c367f24a2f998695$var$STATE]);\n                        if (token.type !== tokTypes.eof) _this[$c367f24a2f998695$var$STATE].lastToken = token;\n                    },\n                    // Collect comments\n                    onComment: function(block, text, start, end, startLoc, endLoc) {\n                        if (_this[$c367f24a2f998695$var$STATE].comments) {\n                            var comment = $c367f24a2f998695$var$convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc);\n                            _this[$c367f24a2f998695$var$STATE].comments.push(comment);\n                        }\n                    }\n                }, code);\n                // Initialize internal state.\n                _this[$c367f24a2f998695$var$STATE] = {\n                    tokens: tokenTranslator ? [] : null,\n                    comments: options.comment === true ? [] : null,\n                    impliedStrict: ecmaFeatures.impliedStrict === true && _this.options.ecmaVersion >= 5,\n                    ecmaVersion: _this.options.ecmaVersion,\n                    jsxAttrValueToken: false,\n                    lastToken: null\n                };\n                return _this;\n            }\n            (0, $ee5d5e6879509c9c$export$d60067ff2358eee8)(Espree, [\n                {\n                    key: \"tokenize\",\n                    value: function tokenize() {\n                        do this.next();\n                        while (this.type !== tokTypes.eof);\n                        // Consume the final eof token\n                        this.next();\n                        var extra = this[$c367f24a2f998695$var$STATE];\n                        var tokens = extra.tokens;\n                        if (extra.comments) tokens.comments = extra.comments;\n                        return tokens;\n                    }\n                },\n                {\n                    key: \"finishNode\",\n                    value: function finishNode() {\n                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                            args[_key] = arguments[_key];\n                        }\n                        var _$_get;\n                        var result = (_$_get = (0, $701e72a23173aba5$export$afb3516d9d608401)((0, $678156a147e80dcd$export$f09211a7d3c496a1)(Espree.prototype), \"finishNode\", this)).call.apply(_$_get, [\n                            this\n                        ].concat((0, $8eca4436e0cdcde8$export$1b5e630bc3aea29f)(args)));\n                        return this[$c367f24a2f998695$var$ESPRIMA_FINISH_NODE](result);\n                    }\n                },\n                {\n                    key: \"finishNodeAt\",\n                    value: function finishNodeAt() {\n                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                            args[_key] = arguments[_key];\n                        }\n                        var _$_get;\n                        var result = (_$_get = (0, $701e72a23173aba5$export$afb3516d9d608401)((0, $678156a147e80dcd$export$f09211a7d3c496a1)(Espree.prototype), \"finishNodeAt\", this)).call.apply(_$_get, [\n                            this\n                        ].concat((0, $8eca4436e0cdcde8$export$1b5e630bc3aea29f)(args)));\n                        return this[$c367f24a2f998695$var$ESPRIMA_FINISH_NODE](result);\n                    }\n                },\n                {\n                    key: \"parse\",\n                    value: function parse() {\n                        var extra = this[$c367f24a2f998695$var$STATE];\n                        var program = (0, $701e72a23173aba5$export$afb3516d9d608401)((0, $678156a147e80dcd$export$f09211a7d3c496a1)(Espree.prototype), \"parse\", this).call(this);\n                        program.sourceType = this.options.sourceType;\n                        if (extra.comments) program.comments = extra.comments;\n                        if (extra.tokens) program.tokens = extra.tokens;\n                        /*\n             * Adjust opening and closing position of program to match Esprima.\n             * Acorn always starts programs at range 0 whereas Esprima starts at the\n             * first AST node's start (the only real difference is when there's leading\n             * whitespace or leading comments). Acorn also counts trailing whitespace\n             * as part of the program whereas Esprima only counts up to the last token.\n             */ if (program.range) {\n                            program.range[0] = program.body.length ? program.body[0].range[0] : program.range[0];\n                            program.range[1] = extra.lastToken ? extra.lastToken.range[1] : program.range[1];\n                        }\n                        if (program.loc) {\n                            program.loc.start = program.body.length ? program.body[0].loc.start : program.loc.start;\n                            program.loc.end = extra.lastToken ? extra.lastToken.loc.end : program.loc.end;\n                        }\n                        return program;\n                    }\n                },\n                {\n                    key: \"parseTopLevel\",\n                    value: function parseTopLevel(node) {\n                        if (this[$c367f24a2f998695$var$STATE].impliedStrict) this.strict = true;\n                        return (0, $701e72a23173aba5$export$afb3516d9d608401)((0, $678156a147e80dcd$export$f09211a7d3c496a1)(Espree.prototype), \"parseTopLevel\", this).call(this, node);\n                    }\n                },\n                {\n                    /**\n         * Overwrites the default raise method to throw Esprima-style errors.\n         * @param {int} pos The position of the error.\n         * @param {string} message The error message.\n         * @throws {SyntaxError} A syntax error.\n         * @returns {void}\n         */ key: \"raise\",\n                    value: function raise(pos, message) {\n                        var loc = Parser.acorn.getLineInfo(this.input, pos);\n                        var err = new SyntaxError(message);\n                        err.index = pos;\n                        err.lineNumber = loc.line;\n                        err.column = loc.column + 1; // acorn uses 0-based columns\n                        throw err;\n                    }\n                },\n                {\n                    /**\n         * Overwrites the default raise method to throw Esprima-style errors.\n         * @param {int} pos The position of the error.\n         * @param {string} message The error message.\n         * @throws {SyntaxError} A syntax error.\n         * @returns {void}\n         */ key: \"raiseRecoverable\",\n                    value: function raiseRecoverable(pos, message) {\n                        this.raise(pos, message);\n                    }\n                },\n                {\n                    /**\n         * Overwrites the default unexpected method to throw Esprima-style errors.\n         * @param {int} pos The position of the error.\n         * @throws {SyntaxError} A syntax error.\n         * @returns {void}\n         */ key: \"unexpected\",\n                    value: function unexpected(pos) {\n                        var message = \"Unexpected token\";\n                        if (pos !== null && pos !== void 0) {\n                            this.pos = pos;\n                            if (this.options.locations) while(this.pos < this.lineStart){\n                                this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n                                --this.curLine;\n                            }\n                            this.nextToken();\n                        }\n                        if (this.end > this.start) message += \" \".concat(this.input.slice(this.start, this.end));\n                        this.raise(this.start, message);\n                    }\n                },\n                {\n                    /*\n        * Esprima-FB represents JSX strings as tokens called \"JSXText\", but Acorn-JSX\n        * uses regular tt.string without any distinction between this and regular JS\n        * strings. As such, we intercept an attempt to read a JSX string and set a flag\n        * on extra so that when tokens are converted, the next token will be switched\n        * to JSXText via onToken.\n        */ key: \"jsx_readString\",\n                    value: function jsx_readString(quote) {\n                        var result = (0, $701e72a23173aba5$export$afb3516d9d608401)((0, $678156a147e80dcd$export$f09211a7d3c496a1)(Espree.prototype), \"jsx_readString\", this).call(this, quote);\n                        if (this.type === tokTypes.string) this[$c367f24a2f998695$var$STATE].jsxAttrValueToken = true;\n                        return result;\n                    }\n                },\n                {\n                    /**\n         * Performs last-minute Esprima-specific compatibility checks and fixes.\n         * @param {ASTNode} result The node to check.\n         * @returns {ASTNode} The finished node.\n         */ key: $c367f24a2f998695$var$ESPRIMA_FINISH_NODE,\n                    value: function value(result) {\n                        // Acorn doesn't count the opening and closing backticks as part of templates\n                        // so we have to adjust ranges/locations appropriately.\n                        if (result.type === \"TemplateElement\") {\n                            // additional adjustment needed if ${ is the last token\n                            var terminalDollarBraceL = this.input.slice(result.end, result.end + 2) === \"${\";\n                            if (result.range) {\n                                result.range[0]--;\n                                result.range[1] += terminalDollarBraceL ? 2 : 1;\n                            }\n                            if (result.loc) {\n                                result.loc.start.column--;\n                                result.loc.end.column += terminalDollarBraceL ? 2 : 1;\n                            }\n                        }\n                        if (result.type.indexOf(\"Function\") > -1 && !result.generator) result.generator = false;\n                        return result;\n                    }\n                }\n            ]);\n            return Espree;\n        }(Parser);\n    };\n};\n\n\n\nvar $5399481c73497d3e$var$getLatestEcmaVersion = $f32cf6d90a2ce49c$exports.getLatestEcmaVersion, $5399481c73497d3e$var$getSupportedEcmaVersions = $f32cf6d90a2ce49c$exports.getSupportedEcmaVersions;\n// To initialize lazily.\nvar $5399481c73497d3e$var$parsers = {\n    _regular: null,\n    _jsx: null,\n    get regular () {\n        if (this._regular === null) this._regular = $8NOO4.Parser.extend($c367f24a2f998695$exports());\n        return this._regular;\n    },\n    get jsx () {\n        if (this._jsx === null) this._jsx = $8NOO4.Parser.extend($cac1ccf25e6b09cc$exports(), $c367f24a2f998695$exports());\n        return this._jsx;\n    },\n    get: function(options) {\n        var useJsx = Boolean(options && options.ecmaFeatures && options.ecmaFeatures.jsx);\n        return useJsx ? this.jsx : this.regular;\n    }\n};\n//------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */ function $5399481c73497d3e$var$tokenize(code, options) {\n    var Parser = $5399481c73497d3e$var$parsers.get(options);\n    // Ensure to collect tokens.\n    if (!options || options.tokens !== true) options = Object.assign({}, options, {\n        tokens: true\n    }); // eslint-disable-line no-param-reassign\n    return new Parser(options, code).tokenize();\n}\n//------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n */ function $5399481c73497d3e$var$parse(code, options) {\n    var Parser = $5399481c73497d3e$var$parsers.get(options);\n    return new Parser(options, code).parse();\n}\n\n$5399481c73497d3e$export$83d89fbfd8236492 = (parcelRequire(\"80lpX\")).version;\n$5399481c73497d3e$export$660b2ee2d4fb4eff = $5399481c73497d3e$var$tokenize;\n$5399481c73497d3e$export$98e6a39c04603d36 = $5399481c73497d3e$var$parse;\n$5399481c73497d3e$export$1c96bcab62cf7c19 = function() {\n    var name, types = {};\n    if (typeof Object.create === \"function\") types = Object.create(null);\n    for(name in $2ad2af9d0a7c0bd9$exports)if (Object.hasOwnProperty.call($2ad2af9d0a7c0bd9$exports, name)) types[name] = $2ad2af9d0a7c0bd9$exports[name];\n    if (typeof Object.freeze === \"function\") Object.freeze(types);\n    return types;\n}();\n\n$5399481c73497d3e$export$82a60f5880a1bab8 = function() {\n    return (parcelRequire(\"a8cff\")).KEYS;\n}();\n$5399481c73497d3e$export$102192c5050f436d = $5399481c73497d3e$var$getLatestEcmaVersion();\n$5399481c73497d3e$export$167acb9592fb8034 = $5399481c73497d3e$var$getSupportedEcmaVersions();\n\n\nvar $750d4cdc3eb62b07$exports = {};\n\n/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/ /*jslint vars:false, bitwise:true*/ /*jshint indent:4*/ /*global exports:true*/ (function clone(exports1) {\n    \"use strict\";\n    var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;\n    function deepCopy(obj) {\n        var ret = {}, key, val;\n        for(key in obj)if (obj.hasOwnProperty(key)) {\n            val = obj[key];\n            if (typeof val === \"object\" && val !== null) ret[key] = deepCopy(val);\n            else ret[key] = val;\n        }\n        return ret;\n    }\n    // based on LLVM libc++ upper_bound / lower_bound\n    // MIT License\n    function upperBound(array, func) {\n        var diff, len, i, current;\n        len = array.length;\n        i = 0;\n        while(len){\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) len = diff;\n            else {\n                i = current + 1;\n                len -= diff + 1;\n            }\n        }\n        return i;\n    }\n    Syntax = {\n        AssignmentExpression: \"AssignmentExpression\",\n        AssignmentPattern: \"AssignmentPattern\",\n        ArrayExpression: \"ArrayExpression\",\n        ArrayPattern: \"ArrayPattern\",\n        ArrowFunctionExpression: \"ArrowFunctionExpression\",\n        AwaitExpression: \"AwaitExpression\",\n        BlockStatement: \"BlockStatement\",\n        BinaryExpression: \"BinaryExpression\",\n        BreakStatement: \"BreakStatement\",\n        CallExpression: \"CallExpression\",\n        CatchClause: \"CatchClause\",\n        ClassBody: \"ClassBody\",\n        ClassDeclaration: \"ClassDeclaration\",\n        ClassExpression: \"ClassExpression\",\n        ComprehensionBlock: \"ComprehensionBlock\",\n        ComprehensionExpression: \"ComprehensionExpression\",\n        ConditionalExpression: \"ConditionalExpression\",\n        ContinueStatement: \"ContinueStatement\",\n        DebuggerStatement: \"DebuggerStatement\",\n        DirectiveStatement: \"DirectiveStatement\",\n        DoWhileStatement: \"DoWhileStatement\",\n        EmptyStatement: \"EmptyStatement\",\n        ExportAllDeclaration: \"ExportAllDeclaration\",\n        ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n        ExportNamedDeclaration: \"ExportNamedDeclaration\",\n        ExportSpecifier: \"ExportSpecifier\",\n        ExpressionStatement: \"ExpressionStatement\",\n        ForStatement: \"ForStatement\",\n        ForInStatement: \"ForInStatement\",\n        ForOfStatement: \"ForOfStatement\",\n        FunctionDeclaration: \"FunctionDeclaration\",\n        FunctionExpression: \"FunctionExpression\",\n        GeneratorExpression: \"GeneratorExpression\",\n        Identifier: \"Identifier\",\n        IfStatement: \"IfStatement\",\n        ImportExpression: \"ImportExpression\",\n        ImportDeclaration: \"ImportDeclaration\",\n        ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n        ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\",\n        ImportSpecifier: \"ImportSpecifier\",\n        Literal: \"Literal\",\n        LabeledStatement: \"LabeledStatement\",\n        LogicalExpression: \"LogicalExpression\",\n        MemberExpression: \"MemberExpression\",\n        MetaProperty: \"MetaProperty\",\n        MethodDefinition: \"MethodDefinition\",\n        ModuleSpecifier: \"ModuleSpecifier\",\n        NewExpression: \"NewExpression\",\n        ObjectExpression: \"ObjectExpression\",\n        ObjectPattern: \"ObjectPattern\",\n        Program: \"Program\",\n        Property: \"Property\",\n        RestElement: \"RestElement\",\n        ReturnStatement: \"ReturnStatement\",\n        SequenceExpression: \"SequenceExpression\",\n        SpreadElement: \"SpreadElement\",\n        Super: \"Super\",\n        SwitchStatement: \"SwitchStatement\",\n        SwitchCase: \"SwitchCase\",\n        TaggedTemplateExpression: \"TaggedTemplateExpression\",\n        TemplateElement: \"TemplateElement\",\n        TemplateLiteral: \"TemplateLiteral\",\n        ThisExpression: \"ThisExpression\",\n        ThrowStatement: \"ThrowStatement\",\n        TryStatement: \"TryStatement\",\n        UnaryExpression: \"UnaryExpression\",\n        UpdateExpression: \"UpdateExpression\",\n        VariableDeclaration: \"VariableDeclaration\",\n        VariableDeclarator: \"VariableDeclarator\",\n        WhileStatement: \"WhileStatement\",\n        WithStatement: \"WithStatement\",\n        YieldExpression: \"YieldExpression\"\n    };\n    VisitorKeys = {\n        AssignmentExpression: [\n            \"left\",\n            \"right\"\n        ],\n        AssignmentPattern: [\n            \"left\",\n            \"right\"\n        ],\n        ArrayExpression: [\n            \"elements\"\n        ],\n        ArrayPattern: [\n            \"elements\"\n        ],\n        ArrowFunctionExpression: [\n            \"params\",\n            \"body\"\n        ],\n        AwaitExpression: [\n            \"argument\"\n        ],\n        BlockStatement: [\n            \"body\"\n        ],\n        BinaryExpression: [\n            \"left\",\n            \"right\"\n        ],\n        BreakStatement: [\n            \"label\"\n        ],\n        CallExpression: [\n            \"callee\",\n            \"arguments\"\n        ],\n        CatchClause: [\n            \"param\",\n            \"body\"\n        ],\n        ClassBody: [\n            \"body\"\n        ],\n        ClassDeclaration: [\n            \"id\",\n            \"superClass\",\n            \"body\"\n        ],\n        ClassExpression: [\n            \"id\",\n            \"superClass\",\n            \"body\"\n        ],\n        ComprehensionBlock: [\n            \"left\",\n            \"right\"\n        ],\n        ComprehensionExpression: [\n            \"blocks\",\n            \"filter\",\n            \"body\"\n        ],\n        ConditionalExpression: [\n            \"test\",\n            \"consequent\",\n            \"alternate\"\n        ],\n        ContinueStatement: [\n            \"label\"\n        ],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: [\n            \"body\",\n            \"test\"\n        ],\n        EmptyStatement: [],\n        ExportAllDeclaration: [\n            \"source\"\n        ],\n        ExportDefaultDeclaration: [\n            \"declaration\"\n        ],\n        ExportNamedDeclaration: [\n            \"declaration\",\n            \"specifiers\",\n            \"source\"\n        ],\n        ExportSpecifier: [\n            \"exported\",\n            \"local\"\n        ],\n        ExpressionStatement: [\n            \"expression\"\n        ],\n        ForStatement: [\n            \"init\",\n            \"test\",\n            \"update\",\n            \"body\"\n        ],\n        ForInStatement: [\n            \"left\",\n            \"right\",\n            \"body\"\n        ],\n        ForOfStatement: [\n            \"left\",\n            \"right\",\n            \"body\"\n        ],\n        FunctionDeclaration: [\n            \"id\",\n            \"params\",\n            \"body\"\n        ],\n        FunctionExpression: [\n            \"id\",\n            \"params\",\n            \"body\"\n        ],\n        GeneratorExpression: [\n            \"blocks\",\n            \"filter\",\n            \"body\"\n        ],\n        Identifier: [],\n        IfStatement: [\n            \"test\",\n            \"consequent\",\n            \"alternate\"\n        ],\n        ImportExpression: [\n            \"source\"\n        ],\n        ImportDeclaration: [\n            \"specifiers\",\n            \"source\"\n        ],\n        ImportDefaultSpecifier: [\n            \"local\"\n        ],\n        ImportNamespaceSpecifier: [\n            \"local\"\n        ],\n        ImportSpecifier: [\n            \"imported\",\n            \"local\"\n        ],\n        Literal: [],\n        LabeledStatement: [\n            \"label\",\n            \"body\"\n        ],\n        LogicalExpression: [\n            \"left\",\n            \"right\"\n        ],\n        MemberExpression: [\n            \"object\",\n            \"property\"\n        ],\n        MetaProperty: [\n            \"meta\",\n            \"property\"\n        ],\n        MethodDefinition: [\n            \"key\",\n            \"value\"\n        ],\n        ModuleSpecifier: [],\n        NewExpression: [\n            \"callee\",\n            \"arguments\"\n        ],\n        ObjectExpression: [\n            \"properties\"\n        ],\n        ObjectPattern: [\n            \"properties\"\n        ],\n        Program: [\n            \"body\"\n        ],\n        Property: [\n            \"key\",\n            \"value\"\n        ],\n        RestElement: [\n            \"argument\"\n        ],\n        ReturnStatement: [\n            \"argument\"\n        ],\n        SequenceExpression: [\n            \"expressions\"\n        ],\n        SpreadElement: [\n            \"argument\"\n        ],\n        Super: [],\n        SwitchStatement: [\n            \"discriminant\",\n            \"cases\"\n        ],\n        SwitchCase: [\n            \"test\",\n            \"consequent\"\n        ],\n        TaggedTemplateExpression: [\n            \"tag\",\n            \"quasi\"\n        ],\n        TemplateElement: [],\n        TemplateLiteral: [\n            \"quasis\",\n            \"expressions\"\n        ],\n        ThisExpression: [],\n        ThrowStatement: [\n            \"argument\"\n        ],\n        TryStatement: [\n            \"block\",\n            \"handler\",\n            \"finalizer\"\n        ],\n        UnaryExpression: [\n            \"argument\"\n        ],\n        UpdateExpression: [\n            \"argument\"\n        ],\n        VariableDeclaration: [\n            \"declarations\"\n        ],\n        VariableDeclarator: [\n            \"id\",\n            \"init\"\n        ],\n        WhileStatement: [\n            \"test\",\n            \"body\"\n        ],\n        WithStatement: [\n            \"object\",\n            \"body\"\n        ],\n        YieldExpression: [\n            \"argument\"\n        ]\n    };\n    // unique id\n    BREAK = {};\n    SKIP = {};\n    REMOVE = {};\n    VisitorOption = {\n        Break: BREAK,\n        Skip: SKIP,\n        Remove: REMOVE\n    };\n    function Reference(parent, key) {\n        this.parent = parent;\n        this.key = key;\n    }\n    Reference.prototype.replace = function replace(node) {\n        this.parent[this.key] = node;\n    };\n    Reference.prototype.remove = function remove() {\n        if (Array.isArray(this.parent)) {\n            this.parent.splice(this.key, 1);\n            return true;\n        } else {\n            this.replace(null);\n            return false;\n        }\n    };\n    function Element(node, path, wrap, ref) {\n        this.node = node;\n        this.path = path;\n        this.wrap = wrap;\n        this.ref = ref;\n    }\n    function Controller() {}\n    // API:\n    // return property path array from root to current node\n    Controller.prototype.path = function path() {\n        var i, iz, j, jz, result, element;\n        function addToPath(result, path) {\n            if (Array.isArray(path)) for(j = 0, jz = path.length; j < jz; ++j)result.push(path[j]);\n            else result.push(path);\n        }\n        // root node\n        if (!this.__current.path) return null;\n        // first node is sentinel, second node is root element\n        result = [];\n        for(i = 2, iz = this.__leavelist.length; i < iz; ++i){\n            element = this.__leavelist[i];\n            addToPath(result, element.path);\n        }\n        addToPath(result, this.__current.path);\n        return result;\n    };\n    // API:\n    // return type of current node\n    Controller.prototype.type = function() {\n        var node = this.current();\n        return node.type || this.__current.wrap;\n    };\n    // API:\n    // return array of parent elements\n    Controller.prototype.parents = function parents() {\n        var i, iz, result;\n        // first node is sentinel\n        result = [];\n        for(i = 1, iz = this.__leavelist.length; i < iz; ++i)result.push(this.__leavelist[i].node);\n        return result;\n    };\n    // API:\n    // return current node\n    Controller.prototype.current = function current() {\n        return this.__current.node;\n    };\n    Controller.prototype.__execute = function __execute(callback, element) {\n        var previous, result;\n        result = undefined;\n        previous = this.__current;\n        this.__current = element;\n        this.__state = null;\n        if (callback) result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n        this.__current = previous;\n        return result;\n    };\n    // API:\n    // notify control skip / break\n    Controller.prototype.notify = function notify(flag) {\n        this.__state = flag;\n    };\n    // API:\n    // skip child nodes of current node\n    Controller.prototype.skip = function() {\n        this.notify(SKIP);\n    };\n    // API:\n    // break traversals\n    Controller.prototype[\"break\"] = function() {\n        this.notify(BREAK);\n    };\n    // API:\n    // remove node\n    Controller.prototype.remove = function() {\n        this.notify(REMOVE);\n    };\n    Controller.prototype.__initialize = function(root, visitor) {\n        this.visitor = visitor;\n        this.root = root;\n        this.__worklist = [];\n        this.__leavelist = [];\n        this.__current = null;\n        this.__state = null;\n        this.__fallback = null;\n        if (visitor.fallback === \"iteration\") this.__fallback = Object.keys;\n        else if (typeof visitor.fallback === \"function\") this.__fallback = visitor.fallback;\n        this.__keys = VisitorKeys;\n        if (visitor.keys) this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\n    };\n    function isNode(node) {\n        if (node == null) return false;\n        return typeof node === \"object\" && typeof node.type === \"string\";\n    }\n    function isProperty(nodeType, key) {\n        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && \"properties\" === key;\n    }\n    Controller.prototype.traverse = function traverse(root, visitor) {\n        var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;\n        this.__initialize(root, visitor);\n        sentinel = {};\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n        // initialize\n        worklist.push(new Element(root, null, null, null));\n        leavelist.push(new Element(null, null, null, null));\n        while(worklist.length){\n            element = worklist.pop();\n            if (element === sentinel) {\n                element = leavelist.pop();\n                ret = this.__execute(visitor.leave, element);\n                if (this.__state === BREAK || ret === BREAK) return;\n                continue;\n            }\n            if (element.node) {\n                ret = this.__execute(visitor.enter, element);\n                if (this.__state === BREAK || ret === BREAK) return;\n                worklist.push(sentinel);\n                leavelist.push(element);\n                if (this.__state === SKIP || ret === SKIP) continue;\n                node = element.node;\n                nodeType = node.type || element.wrap;\n                candidates = this.__keys[nodeType];\n                if (!candidates) {\n                    if (this.__fallback) candidates = this.__fallback(node);\n                    else throw new Error(\"Unknown node type \" + nodeType + \".\");\n                }\n                current = candidates.length;\n                while((current -= 1) >= 0){\n                    key = candidates[current];\n                    candidate = node[key];\n                    if (!candidate) continue;\n                    if (Array.isArray(candidate)) {\n                        current2 = candidate.length;\n                        while((current2 -= 1) >= 0){\n                            if (!candidate[current2]) continue;\n                            if (isProperty(nodeType, candidates[current])) element = new Element(candidate[current2], [\n                                key,\n                                current2\n                            ], \"Property\", null);\n                            else if (isNode(candidate[current2])) element = new Element(candidate[current2], [\n                                key,\n                                current2\n                            ], null, null);\n                            else continue;\n                            worklist.push(element);\n                        }\n                    } else if (isNode(candidate)) worklist.push(new Element(candidate, key, null, null));\n                }\n            }\n        }\n    };\n    Controller.prototype.replace = function replace(root, visitor) {\n        var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;\n        function removeElem(element) {\n            var i, key, nextElem, parent;\n            if (element.ref.remove()) {\n                // When the reference is an element of an array.\n                key = element.ref.key;\n                parent = element.ref.parent;\n                // If removed from array, then decrease following items' keys.\n                i = worklist.length;\n                while(i--){\n                    nextElem = worklist[i];\n                    if (nextElem.ref && nextElem.ref.parent === parent) {\n                        if (nextElem.ref.key < key) break;\n                        --nextElem.ref.key;\n                    }\n                }\n            }\n        }\n        this.__initialize(root, visitor);\n        sentinel = {};\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n        // initialize\n        outer = {\n            root: root\n        };\n        element = new Element(root, null, null, new Reference(outer, \"root\"));\n        worklist.push(element);\n        leavelist.push(element);\n        while(worklist.length){\n            element = worklist.pop();\n            if (element === sentinel) {\n                element = leavelist.pop();\n                target = this.__execute(visitor.leave, element);\n                // node may be replaced with null,\n                // so distinguish between undefined and null in this place\n                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) // replace\n                element.ref.replace(target);\n                if (this.__state === REMOVE || target === REMOVE) removeElem(element);\n                if (this.__state === BREAK || target === BREAK) return outer.root;\n                continue;\n            }\n            target = this.__execute(visitor.enter, element);\n            // node may be replaced with null,\n            // so distinguish between undefined and null in this place\n            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                // replace\n                element.ref.replace(target);\n                element.node = target;\n            }\n            if (this.__state === REMOVE || target === REMOVE) {\n                removeElem(element);\n                element.node = null;\n            }\n            if (this.__state === BREAK || target === BREAK) return outer.root;\n            // node may be null\n            node = element.node;\n            if (!node) continue;\n            worklist.push(sentinel);\n            leavelist.push(element);\n            if (this.__state === SKIP || target === SKIP) continue;\n            nodeType = node.type || element.wrap;\n            candidates = this.__keys[nodeType];\n            if (!candidates) {\n                if (this.__fallback) candidates = this.__fallback(node);\n                else throw new Error(\"Unknown node type \" + nodeType + \".\");\n            }\n            current = candidates.length;\n            while((current -= 1) >= 0){\n                key = candidates[current];\n                candidate = node[key];\n                if (!candidate) continue;\n                if (Array.isArray(candidate)) {\n                    current2 = candidate.length;\n                    while((current2 -= 1) >= 0){\n                        if (!candidate[current2]) continue;\n                        if (isProperty(nodeType, candidates[current])) element = new Element(candidate[current2], [\n                            key,\n                            current2\n                        ], \"Property\", new Reference(candidate, current2));\n                        else if (isNode(candidate[current2])) element = new Element(candidate[current2], [\n                            key,\n                            current2\n                        ], null, new Reference(candidate, current2));\n                        else continue;\n                        worklist.push(element);\n                    }\n                } else if (isNode(candidate)) worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n            }\n        }\n        return outer.root;\n    };\n    function traverse(root, visitor) {\n        var controller = new Controller();\n        return controller.traverse(root, visitor);\n    }\n    function replace(root, visitor) {\n        var controller = new Controller();\n        return controller.replace(root, visitor);\n    }\n    function extendCommentRange(comment, tokens) {\n        var target;\n        target = upperBound(tokens, function search(token) {\n            return token.range[0] > comment.range[0];\n        });\n        comment.extendedRange = [\n            comment.range[0],\n            comment.range[1]\n        ];\n        if (target !== tokens.length) comment.extendedRange[1] = tokens[target].range[0];\n        target -= 1;\n        if (target >= 0) comment.extendedRange[0] = tokens[target].range[1];\n        return comment;\n    }\n    function attachComments(tree, providedComments, tokens) {\n        // At first, we should calculate extended comment ranges.\n        var comments = [], comment, len, i, cursor;\n        if (!tree.range) throw new Error(\"attachComments needs range information\");\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\n        if (!tokens.length) {\n            if (providedComments.length) {\n                for(i = 0, len = providedComments.length; i < len; i += 1){\n                    comment = deepCopy(providedComments[i]);\n                    comment.extendedRange = [\n                        0,\n                        tree.range[0]\n                    ];\n                    comments.push(comment);\n                }\n                tree.leadingComments = comments;\n            }\n            return tree;\n        }\n        for(i = 0, len = providedComments.length; i < len; i += 1)comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n        // This is based on John Freeman's implementation.\n        cursor = 0;\n        traverse(tree, {\n            enter: function enter(node) {\n                var comment;\n                while(cursor < comments.length){\n                    comment = comments[cursor];\n                    if (comment.extendedRange[1] > node.range[0]) break;\n                    if (comment.extendedRange[1] === node.range[0]) {\n                        if (!node.leadingComments) node.leadingComments = [];\n                        node.leadingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else cursor += 1;\n                }\n                // already out of owned node\n                if (cursor === comments.length) return VisitorOption.Break;\n                if (comments[cursor].extendedRange[0] > node.range[1]) return VisitorOption.Skip;\n            }\n        });\n        cursor = 0;\n        traverse(tree, {\n            leave: function leave(node) {\n                var comment;\n                while(cursor < comments.length){\n                    comment = comments[cursor];\n                    if (node.range[1] < comment.extendedRange[0]) break;\n                    if (node.range[1] === comment.extendedRange[0]) {\n                        if (!node.trailingComments) node.trailingComments = [];\n                        node.trailingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else cursor += 1;\n                }\n                // already out of owned node\n                if (cursor === comments.length) return VisitorOption.Break;\n                if (comments[cursor].extendedRange[0] > node.range[1]) return VisitorOption.Skip;\n            }\n        });\n        return tree;\n    }\n    exports1.version = (parcelRequire(\"4rf7n\")).version;\n    exports1.Syntax = Syntax;\n    exports1.traverse = traverse;\n    exports1.replace = replace;\n    exports1.attachComments = attachComments;\n    exports1.VisitorKeys = VisitorKeys;\n    exports1.VisitorOption = VisitorOption;\n    exports1.Controller = Controller;\n    exports1.cloneEnvironment = function() {\n        return clone({});\n    };\n    return exports1;\n})($750d4cdc3eb62b07$exports); /* vim: set sw=4 ts=4 et tw=80 : */ \n\n\nvar $eda1332171fbf2d4$exports = {};\n\"use strict\";\n// This file is autogenerated. Do not modify manually\n$eda1332171fbf2d4$exports = [\n    \"add\",\n    \"addBack\",\n    \"addClass\",\n    \"after\",\n    \"ajax\",\n    \"ajaxComplete\",\n    \"ajaxError\",\n    \"ajaxPrefilter\",\n    \"ajaxSend\",\n    \"ajaxSetup\",\n    \"ajaxStart\",\n    \"ajaxStop\",\n    \"ajaxSuccess\",\n    \"ajaxTransport\",\n    \"animate\",\n    \"append\",\n    \"appendTo\",\n    \"attr\",\n    \"attr\",\n    \"before\",\n    \"bind\",\n    \"blur\",\n    \"camelCase\",\n    \"change\",\n    \"children\",\n    \"cleanData\",\n    \"clearQueue\",\n    \"click\",\n    \"clone\",\n    \"clone\",\n    \"closest\",\n    \"constructor\",\n    \"contains\",\n    \"contents\",\n    \"contextmenu\",\n    \"css\",\n    \"css\",\n    \"data\",\n    \"data\",\n    \"dblclick\",\n    \"delay\",\n    \"delegate\",\n    \"dequeue\",\n    \"dequeue\",\n    \"detach\",\n    \"each\",\n    \"each\",\n    \"empty\",\n    \"end\",\n    \"eq\",\n    \"error\",\n    \"escapeSelector\",\n    \"even\",\n    \"extend\",\n    \"extend\",\n    \"fadeIn\",\n    \"fadeOut\",\n    \"fadeTo\",\n    \"fadeToggle\",\n    \"filter\",\n    \"filter\",\n    \"find\",\n    \"find\",\n    \"finish\",\n    \"first\",\n    \"focus\",\n    \"focusin\",\n    \"focusout\",\n    \"fx\",\n    \"get\",\n    \"get\",\n    \"getJSON\",\n    \"getScript\",\n    \"globalEval\",\n    \"grep\",\n    \"has\",\n    \"hasClass\",\n    \"hasData\",\n    \"height\",\n    \"hide\",\n    \"holdReady\",\n    \"hover\",\n    \"html\",\n    \"htmlPrefilter\",\n    \"inArray\",\n    \"index\",\n    \"init\",\n    \"innerHeight\",\n    \"innerWidth\",\n    \"insertAfter\",\n    \"insertBefore\",\n    \"is\",\n    \"isArray\",\n    \"isEmptyObject\",\n    \"isFunction\",\n    \"isNumeric\",\n    \"isPlainObject\",\n    \"isWindow\",\n    \"isXMLDoc\",\n    \"keydown\",\n    \"keypress\",\n    \"keyup\",\n    \"last\",\n    \"load\",\n    \"makeArray\",\n    \"map\",\n    \"map\",\n    \"merge\",\n    \"mousedown\",\n    \"mouseenter\",\n    \"mouseleave\",\n    \"mousemove\",\n    \"mouseout\",\n    \"mouseover\",\n    \"mouseup\",\n    \"next\",\n    \"nextAll\",\n    \"nextUntil\",\n    \"noConflict\",\n    \"nodeName\",\n    \"noop\",\n    \"not\",\n    \"now\",\n    \"odd\",\n    \"off\",\n    \"offset\",\n    \"offsetParent\",\n    \"on\",\n    \"one\",\n    \"outerHeight\",\n    \"outerWidth\",\n    \"param\",\n    \"parent\",\n    \"parents\",\n    \"parentsUntil\",\n    \"parseHTML\",\n    \"parseJSON\",\n    \"parseXML\",\n    \"position\",\n    \"post\",\n    \"prepend\",\n    \"prependTo\",\n    \"prev\",\n    \"prevAll\",\n    \"prevUntil\",\n    \"promise\",\n    \"prop\",\n    \"prop\",\n    \"proxy\",\n    \"push\",\n    \"pushStack\",\n    \"queue\",\n    \"queue\",\n    \"ready\",\n    \"ready\",\n    \"readyException\",\n    \"remove\",\n    \"removeAttr\",\n    \"removeAttr\",\n    \"removeClass\",\n    \"removeData\",\n    \"removeData\",\n    \"removeEvent\",\n    \"removeProp\",\n    \"replaceAll\",\n    \"replaceWith\",\n    \"resize\",\n    \"scroll\",\n    \"scrollLeft\",\n    \"scrollTop\",\n    \"select\",\n    \"serialize\",\n    \"serializeArray\",\n    \"show\",\n    \"siblings\",\n    \"slice\",\n    \"slideDown\",\n    \"slideToggle\",\n    \"slideUp\",\n    \"sort\",\n    \"speed\",\n    \"splice\",\n    \"stop\",\n    \"style\",\n    \"submit\",\n    \"text\",\n    \"text\",\n    \"toArray\",\n    \"toggle\",\n    \"toggleClass\",\n    \"trigger\",\n    \"triggerHandler\",\n    \"trim\",\n    \"type\",\n    \"unbind\",\n    \"undelegate\",\n    \"unique\",\n    \"uniqueSort\",\n    \"unwrap\",\n    \"val\",\n    \"when\",\n    \"width\",\n    \"wrap\",\n    \"wrapAll\",\n    \"wrapInner\"\n];\n\n\nfunction $a1963888dea0535a$var$traverse(node) {\n    while(node)switch(node.type){\n        case \"CallExpression\":\n            node = node.callee;\n            break;\n        case \"MemberExpression\":\n            if (node.object.type === \"ThisExpression\") return node.property;\n            node = node.object;\n            break;\n        case \"Identifier\":\n            return node;\n        default:\n            return null;\n    }\n} // Detect jQuery methods\n// @tod Add an option to pass regex for finding jQuery methods\nfunction $a1963888dea0535a$var$isjQuery(node) {\n    var id = $a1963888dea0535a$var$traverse(node);\n    return id && new RegExp(\"^\\\\$.\").test(id && id.name) || [\n        \"$\",\n        \"jQuery\"\n    ].includes(id && id.name);\n}\nfunction $a1963888dea0535a$var$getAST(data) {\n    return $5399481c73497d3e$export$98e6a39c04603d36(data, {\n        ecmaVersion: 2021,\n        sourceType: \"module\",\n        comment: true\n    });\n}\nfunction $a1963888dea0535a$var$getDependedMethods(methodsFileData, baseMethods, generatedMethods, lineRef, outputStart, outputEnd) {\n    return $a1963888dea0535a$var$_getDependedMethods.apply(this, arguments);\n}\nfunction $a1963888dea0535a$var$_getDependedMethods() {\n    $a1963888dea0535a$var$_getDependedMethods = (0, $75c0594ce600fdb1$export$7c398597f8905a1)(function(methodsFileData, baseMethods, generatedMethods, lineRef, outputStart, outputEnd) {\n        var outputAst, dependedMethods, uniqueDependedMethods, methodsData, allMethods, remainingMethodData;\n        return (0, $ee049cf5886b856c$export$67ebef60e6f28a6)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    outputAst = $a1963888dea0535a$var$getAST(outputStart + baseMethods + outputEnd);\n                    dependedMethods = [];\n                    $750d4cdc3eb62b07$exports.traverse(outputAst, {\n                        enter: function(node) {\n                            if (node.callee && node.callee.type === \"MemberExpression\") {\n                                var methodName = node.callee.property.name;\n                                if ((node.callee.object.type === \"ThisExpression\" || node.callee.object.type === \"Identifier\") && generatedMethods.indexOf(methodName) < 0) dependedMethods.push(node.callee.property.name);\n                            }\n                        }\n                    });\n                    uniqueDependedMethods = (0, $8eca4436e0cdcde8$export$1b5e630bc3aea29f)(new Set(dependedMethods));\n                    methodsData = \"\";\n                    uniqueDependedMethods.forEach(function(method) {\n                        if (lineRef[method] && lineRef[method].range) methodsData += methodsFileData.substring(lineRef[method].range.start, lineRef[method].range.end);\n                    });\n                    allMethods = (0, $8eca4436e0cdcde8$export$1b5e630bc3aea29f)(generatedMethods).concat((0, $8eca4436e0cdcde8$export$1b5e630bc3aea29f)(uniqueDependedMethods));\n                    if (!uniqueDependedMethods.length) return [\n                        3,\n                        2\n                    ];\n                    return [\n                        4,\n                        $a1963888dea0535a$var$getDependedMethods(methodsFileData, baseMethods + methodsData, allMethods, lineRef, outputStart, outputEnd)\n                    ];\n                case 1:\n                    remainingMethodData = _state.sent();\n                    methodsData += remainingMethodData.methodsData;\n                    allMethods = (0, $8eca4436e0cdcde8$export$1b5e630bc3aea29f)(allMethods).concat([\n                        remainingMethodData.allMethods\n                    ]);\n                    _state.label = 2;\n                case 2:\n                    return [\n                        2,\n                        {\n                            methodsData: methodsData,\n                            allMethods: allMethods\n                        }\n                    ];\n            }\n        });\n    });\n    return $a1963888dea0535a$var$_getDependedMethods.apply(this, arguments);\n}\nvar $a1963888dea0535a$var$getTemplateData = function(data, astMethods) {\n    var templateLines = {\n        start: 0,\n        end: 0\n    };\n    astMethods.comments.forEach(function(comment) {\n        if (comment.type === \"Block\") {\n            if (comment.value.includes(\"$$ Template START $$\")) templateLines.start = comment.start;\n            else if (comment.value.includes(\"$$ Template END $$\")) templateLines.end = comment.end;\n        }\n    });\n    var outputStart = data.substring(0, templateLines.start);\n    var outputEnd = data.substring(templateLines.end, data.length);\n    return {\n        outputStart: outputStart,\n        outputEnd: outputEnd\n    };\n};\nfunction $a1963888dea0535a$var$generateAlternativeMethods(methodsToGenerate, methodsFileData) {\n    return $a1963888dea0535a$var$_generateAlternativeMethods.apply(this, arguments);\n}\nfunction $a1963888dea0535a$var$_generateAlternativeMethods() {\n    $a1963888dea0535a$var$_generateAlternativeMethods = (0, $75c0594ce600fdb1$export$7c398597f8905a1)(function(methodsToGenerate, methodsFileData) {\n        var lineRef, astMethods, remainingMethods, baseMethods, _getTemplateData, outputStart, outputEnd, remainingMethodData;\n        return (0, $ee049cf5886b856c$export$67ebef60e6f28a6)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    lineRef = {};\n                    astMethods = $a1963888dea0535a$var$getAST(methodsFileData);\n                    $750d4cdc3eb62b07$exports.traverse(astMethods, {\n                        enter: function(node) {\n                            if (node.type === \"MethodDefinition\") {\n                                lineRef[node.key.name] = {\n                                    name: node.key.name,\n                                    range: {\n                                        start: node.start,\n                                        end: node.end\n                                    }\n                                };\n                                return $750d4cdc3eb62b07$exports.VisitorOption.Skip;\n                            }\n                        }\n                    });\n                    remainingMethods = [];\n                    baseMethods = \"\";\n                    methodsToGenerate.forEach(function(method) {\n                        if (lineRef[method]) baseMethods += methodsFileData.substring(lineRef[method].range.start, lineRef[method].range.end);\n                        else remainingMethods.push(method);\n                    });\n                    _getTemplateData = $a1963888dea0535a$var$getTemplateData(methodsFileData, astMethods), outputStart = _getTemplateData.outputStart, outputEnd = _getTemplateData.outputEnd;\n                    return [\n                        4,\n                        $a1963888dea0535a$var$getDependedMethods(methodsFileData, baseMethods, methodsToGenerate, lineRef, outputStart, outputEnd)\n                    ];\n                case 1:\n                    remainingMethodData = _state.sent();\n                    return [\n                        2,\n                        {\n                            data: outputStart + baseMethods + remainingMethodData.methodsData + outputEnd,\n                            remainingMethods: remainingMethods\n                        }\n                    ];\n            }\n        });\n    });\n    return $a1963888dea0535a$var$_generateAlternativeMethods.apply(this, arguments);\n}\nfunction $a1963888dea0535a$var$getJQueryMethodsFromSource(data) {\n    return $a1963888dea0535a$var$_getJQueryMethodsFromSource.apply(this, arguments);\n}\nfunction $a1963888dea0535a$var$_getJQueryMethodsFromSource() {\n    $a1963888dea0535a$var$_getJQueryMethodsFromSource = (0, $75c0594ce600fdb1$export$7c398597f8905a1)(function(data) {\n        var ast, jQFns, jQFnsSet, alljQMethodsSet, intersection;\n        return (0, $ee049cf5886b856c$export$67ebef60e6f28a6)(this, function(_state) {\n            ast = $a1963888dea0535a$var$getAST(data);\n            jQFns = [];\n            $750d4cdc3eb62b07$exports.traverse(ast, {\n                enter: function(node) {\n                    if (node.callee && node.callee.type === \"MemberExpression\") {\n                        if ($a1963888dea0535a$var$isjQuery(node)) jQFns.push(node.callee.property.name);\n                    }\n                }\n            });\n            jQFnsSet = new Set(jQFns);\n            alljQMethodsSet = new Set($eda1332171fbf2d4$exports);\n            intersection = new Set((0, $8eca4436e0cdcde8$export$1b5e630bc3aea29f)(jQFnsSet).filter(function(method) {\n                return alljQMethodsSet.has(method);\n            }));\n            return [\n                2,\n                (0, $8eca4436e0cdcde8$export$1b5e630bc3aea29f)(intersection)\n            ];\n        });\n    });\n    return $a1963888dea0535a$var$_getJQueryMethodsFromSource.apply(this, arguments);\n}\n$a1963888dea0535a$exports = {\n    traverse: $a1963888dea0535a$var$traverse,\n    isjQuery: $a1963888dea0535a$var$isjQuery,\n    getAST: $a1963888dea0535a$var$getAST,\n    generateAlternativeMethods: $a1963888dea0535a$var$generateAlternativeMethods,\n    getJQueryMethodsFromSource: $a1963888dea0535a$var$getJQueryMethodsFromSource\n};\n\n\nfunction $931db40849221e61$var$plugin(source) {\n    return $931db40849221e61$var$_plugin.apply(this, arguments);\n}\nfunction $931db40849221e61$var$_plugin() {\n    $931db40849221e61$var$_plugin = (0, $75c0594ce600fdb1$export$7c398597f8905a1)(function(source) {\n        var methods, generatedMethods, formattedOutput;\n        return (0, $ee049cf5886b856c$export$67ebef60e6f28a6)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        $a1963888dea0535a$exports.getJQueryMethodsFromSource(source)\n                    ];\n                case 1:\n                    methods = _state.sent();\n                    return [\n                        4,\n                        $a1963888dea0535a$exports.generateAlternativeMethods(methods, $931db40849221e61$var$_vanillaJsMethods.default)\n                    ];\n                case 2:\n                    generatedMethods = _state.sent();\n                    return [\n                        4,\n                        prettier.format(generatedMethods.data, {\n                            parser: \"babel\",\n                            tabWidth: 4,\n                            // eslint-disable-next-line no-undef\n                            plugins: prettierPlugins,\n                            singleQuote: true\n                        })\n                    ];\n                case 3:\n                    formattedOutput = _state.sent();\n                    return [\n                        2,\n                        {\n                            formattedOutput: formattedOutput,\n                            methodsFound: methods,\n                            remainingMethods: generatedMethods.remainingMethods\n                        }\n                    ];\n            }\n        });\n    });\n    return $931db40849221e61$var$_plugin.apply(this, arguments);\n}\nwindow.ReplaceJquery = $931db40849221e61$var$plugin;\n\n})();\n//# sourceMappingURL=replace-jquery-browser.js.map\n","module.exports = \"a50359dec3d519d5\";","// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  \"5module\": ecma5AndLessKeywords + \" export import\",\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n  coalesce: binop(\"??\", 1),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\", startsExpr),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\nfunction wordsRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10\n  // (2019). This influences support for strict mode, the set of\n  // reserved words, and support for new syntax features. The default\n  // is 10.\n  ecmaVersion: 10,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion >= 2015)\n    { options.ecmaVersion -= 2009; }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar\n    SCOPE_TOP = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,\n    SCOPE_ASYNC = 4,\n    SCOPE_GENERATOR = 8,\n    SCOPE_ARROW = 16,\n    SCOPE_SIMPLE_CATCH = 32,\n    SCOPE_SUPER = 64,\n    SCOPE_DIRECT_SUPER = 128;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal and declareName to determine the type of a binding\nvar\n    BIND_NONE = 0, // Not a binding\n    BIND_VAR = 1, // Var-style binding\n    BIND_LEXICAL = 2, // Let- or const-style binding\n    BIND_FUNCTION = 3, // Function declaration\n    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n  var reserved = \"\";\n  if (options.allowReserved !== true) {\n    for (var v = options.ecmaVersion;; v--)\n      { if (reserved = reservedWords[v]) { break } }\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = {};\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };\nprototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\n// Switch to a getter for 7.0.0.\nParser.prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };\n\nParser.extend = function extend () {\n    var plugins = [], len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input, options) {\n  return new this(options, input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input, options) {\n  return new this(options, input)\n};\n\nObject.defineProperties( Parser.prototype, prototypeAccessors );\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\npp.strictDirective = function(start) {\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") {\n      skipWhiteSpace.lastIndex = start + match[0].length;\n      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n      var next = this.input.charAt(end);\n      return next === \";\" || next === \"}\" ||\n        (lineBreak.test(spaceAfter[0]) &&\n         !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n    }\n    start += match[0].length;\n\n    // Skip semicolon, if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    if (this.input[start] === \";\")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var exports = {};\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n  if (nextCh === 91) { return true } // '['\n  if (context) { return false }\n\n  if (nextCh === 123) { return true } // '{'\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(context, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet(context)) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works, but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false, !context)\n  case types._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (context && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock(true, node)\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (this.options.ecmaVersion > 10 && starttype === types._import) {\n      skipWhiteSpace.lastIndex = this.pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n      if (nextCh === 40 || nextCh === 46) // '(' or '.'\n        { return this.parseExpressionStatement(node, this.parseExpression()) }\n    }\n\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true, !context)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr, context) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this.type === types._case || this.type === types._default) {\n      var isCase = this.type === types._case;\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types.colon);\n    } else {\n      if (!cur) { this.unexpected(); }\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      var simple = clause.param.type === \"Identifier\";\n      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (this.type !== types.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (exitStrict) { this.strict = false; }\n  this.next();\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var isForIn = this.type === types._in;\n  this.next();\n\n  if (\n    init.type === \"VariableDeclaration\" &&\n    init.declarations[0].init != null &&\n    (\n      !isForIn ||\n      this.options.ecmaVersion < 8 ||\n      this.strict ||\n      init.kind !== \"var\" ||\n      init.declarations[0].id.type !== \"Identifier\"\n    )\n  ) {\n    this.raise(\n      init.start,\n      ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n    );\n  } else if (init.type === \"AssignmentPattern\") {\n    this.raise(init.start, \"Invalid left-hand side in for-loop\");\n  }\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl, kind);\n    if (this.eat(types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT))\n    { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (this.type !== types.braceR) {\n    var element = this.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n        hadConstructor = true;\n      }\n    }\n  }\n  this.strict = oldStrict;\n  this.next();\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassElement = function(constructorAllowsSuper) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) { return null }\n\n  var method = this.startNode();\n  var tryContextual = function (k, noLineBreak) {\n    if ( noLineBreak === void 0 ) noLineBreak = false;\n\n    var start = this$1.start, startLoc = this$1.startLoc;\n    if (!this$1.eatContextual(k)) { return false }\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n    if (method.key) { this$1.unexpected(); }\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n  if (!method.key) { this.parsePropertyName(method); }\n  var key = method.key;\n  var allowsDirectSuper = false;\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n      key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    method.kind = \"constructor\";\n    allowsDirectSuper = constructorAllowsSuper;\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n  this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n  if (method.kind === \"get\" && method.value.params.length !== 0)\n    { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && method.value.params.length !== 1)\n    { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n  return method\n};\n\npp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n  method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n  return this.finishNode(method, \"MethodDefinition\")\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  if (this.type === types.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLVal(node.id, BIND_LEXICAL, false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseIdent(true);\n        this.checkExport(exports, node.exported.name, this.lastTokStart);\n      } else {\n        node.exported = null;\n      }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(null);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this.checkUnreserved(spec.local);\n        // check if export is defined\n        this.checkLocalExport(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this.startNode();\n    node.local = this.parseIdent(true);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    this.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this.startNode();\n    node$2.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node$2.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this.checkLVal(node$2.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this.expect(types.comma); }\n    if (allowEmpty && this.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === types.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n      this.expect(close);\n      break\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\npp$2.checkLVal = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n      { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n      checkClashes[expr.name] = true;\n    }\n    if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n    break\n\n  case \"ChainExpression\":\n    this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n    break\n\n  case \"MemberExpression\":\n    if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1)\n      {\n    var prop = list[i];\n\n    this.checkLVal(prop, bindingType, checkClashes);\n  }\n    break\n\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLVal(expr.value, bindingType, checkClashes);\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this.checkLVal(elem, bindingType, checkClashes); }\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, bindingType, checkClashes);\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, bindingType, checkClashes);\n    break\n\n  default:\n    this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.doubleProto < 0)\n            { refDestructuringErrors.doubleProto = key.start; }\n          // Backwards-compat kludge. Can be removed in version 6.0\n        } else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) { return this.parseYield(noIn) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types.parenL || this.type === types.name)\n    { this.potentialArrowAt = this.start; }\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n    if (!ownDestructuringErrors) {\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n    }\n    if (refDestructuringErrors.shorthandAssign >= node.left.start)\n      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var coalesce = this.type === types.coalesce;\n      if (coalesce) {\n        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n        prec = types.logicalAND.binop;\n      }\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n      if ((logical && this.type === types.coalesce) || (coalesce && (this.type === types.logicalOR || this.type === types.logicalAND))) {\n        this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n      }\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLVal(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLVal(expr);\n      this.next();\n      expr = this.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  else\n    { return expr }\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n    { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n      this.potentialArrowAt === base.start;\n  var optionalChained = false;\n\n  while (true) {\n    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);\n\n    if (element.optional) { optionalChained = true; }\n    if (element === base || element.type === \"ArrowFunctionExpression\") {\n      if (optionalChained) {\n        var chainNode = this.startNodeAt(startPos, startLoc);\n        chainNode.expression = element;\n        element = this.finishNode(chainNode, \"ChainExpression\");\n      }\n      return element\n    }\n\n    base = element;\n  }\n};\n\npp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {\n  var optionalSupported = this.options.ecmaVersion >= 11;\n  var optional = optionalSupported && this.eat(types.questionDot);\n  if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n  var computed = this.eat(types.bracketL);\n  if (computed || (optional && this.type !== types.parenL && this.type !== types.backQuote) || this.eat(types.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");\n    node.computed = !!computed;\n    if (computed) { this.expect(types.bracketR); }\n    if (optionalSupported) {\n      node.optional = optional;\n    }\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)\n    }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    if (optionalSupported) {\n      node$1.optional = optional;\n    }\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types.backQuote) {\n    if (optional || optionalChained) {\n      this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n    }\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n  return base\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types.slash) { this.readRegexp(); }\n\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.allowSuper)\n      { this.raise(this.start, \"'super' keyword outside a method\"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types.parenL && !this.allowDirectSuper)\n      { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super ( Arguments )\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, 0)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  case types._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport()\n    } else {\n      return this.unexpected()\n    }\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseExprImport = function() {\n  var node = this.startNode();\n\n  // Consume `import` as an identifier for `import.meta`.\n  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n  var meta = this.parseIdent(true);\n\n  switch (this.type) {\n  case types.parenL:\n    return this.parseDynamicImport(node)\n  case types.dot:\n    node.meta = meta;\n    return this.parseImportMeta(node)\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseDynamicImport = function(node) {\n  this.next(); // skip `(`\n\n  // Parse node.source.\n  node.source = this.parseMaybeAssign();\n\n  // Verify ending.\n  if (!this.eat(types.parenR)) {\n    var errorPos = this.start;\n    if (this.eat(types.comma) && this.eat(types.parenR)) {\n      this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n    } else {\n      this.unexpected(errorPos);\n    }\n  }\n\n  return this.finishNode(node, \"ImportExpression\")\n};\n\npp$3.parseImportMeta = function(node) {\n  this.next(); // skip `.`\n\n  var containsEsc = this.containsEsc;\n  node.property = this.parseIdent(true);\n\n  if (node.property.name !== \"meta\")\n    { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n  if (containsEsc)\n    { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n  if (this.options.sourceType !== \"module\")\n    { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n  return this.finishNode(node, \"MetaProperty\")\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types.parenR) {\n      first ? first = false : this.expect(types.comma);\n      if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this.type === types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n        if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n    if (!this.inNonArrowFunction())\n      { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (isImport && node.callee.type === \"ImportExpression\") {\n    this.raise(startPos, \"Cannot use new with import()\");\n  }\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this.type === types.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n    this.expect(types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types.comma && this.type !== types.braceR && this.type !== types.eq)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }\n    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var nameHash = {};\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this.type === types.comma)\n      { elt = null; }\n    else if (this.type === types.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this.start; }\n    } else {\n      elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n  if (this.keywords.test(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next(!!liberal);\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function(noIn) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign(noIn);\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, false);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$5.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$5.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$5.declareName = function(name, bindingType, pos) {\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n};\n\npp$5.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$5.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$5.currentVarScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$5.currentThisScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType === types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n    { return true }\n  if (prevType === types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType === types._var || prevType === types._const || prevType === types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n      !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma10BinaryProperties,\n  11: ecma11BinaryProperties\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma10ScriptValues,\n  11: ecma11ScriptValues\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\nbuildUnicodeData(9);\nbuildUnicodeData(10);\nbuildUnicodeData(11);\n\nvar pp$8 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i), next;\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.pos, forceU)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.nextIndex(this.pos, forceU), forceU)\n};\n\nRegExpValidationState.prototype.advance = function advance (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  this.pos = this.nextIndex(this.pos, forceU);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  if (this.current(forceU) === ch) {\n    this.advance(forceU);\n    return true\n  }\n  return false\n};\n\nfunction codePointToString(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$8.validateRegExpFlags = function(state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$8.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$8.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$8.regexp_disjunction = function(state) {\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$8.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    { }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$8.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$8.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$8.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$8.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$8.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$8.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$8.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$8.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$8.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$8.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$8.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$8.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$8.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$8.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$8.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$8.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$8.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$8.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$8.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$8.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$8.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n  if ( forceU === void 0 ) forceU = false;\n\n  var start = state.pos;\n  var switchU = forceU || state.switchU;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$8.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$8.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$8.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$8.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!has(state.unicodeProperties.nonBinary, name))\n    { state.raise(\"Invalid property name\"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise(\"Invalid property value\"); }\n};\npp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (!state.unicodeProperties.binary.test(nameOrValue))\n    { state.raise(\"Invalid property name\"); }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$8.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$8.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* ] */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$8.regexp_classRanges = function(state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$8.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* ] */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$8.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$8.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$8.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$8.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$8.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$9 = Parser.prototype;\n\n// Move to the next token\n\npp$9.next = function(ignoreEscapeSequenceInKeyword) {\n  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n    { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$9.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$9[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$9.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$9.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$9.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$9.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$9.skipBlockComment = function() {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$9.skipLineComment = function(startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$9.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos;\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment();\n        break\n      case 47:\n        this.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$9.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$9.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$9.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$9.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$9.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (this.options.ecmaVersion >= 12) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 === 61) { return this.finishOp(types.assign, 3) }\n    }\n    return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$9.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$9.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$9.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$9.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$9.readToken_question = function() { // '?'\n  var ecmaVersion = this.options.ecmaVersion;\n  if (ecmaVersion >= 11) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 46) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 < 48 || next2 > 57) { return this.finishOp(types.questionDot, 2) }\n    }\n    if (next === 63) {\n      if (ecmaVersion >= 12) {\n        var next2$1 = this.input.charCodeAt(this.pos + 2);\n        if (next2$1 === 61) { return this.finishOp(types.assign, 3) }\n      }\n      return this.finishOp(types.coalesce, 2)\n    }\n  }\n  return this.finishOp(types.question, 1)\n};\n\npp$9.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 63: // '?'\n    return this.readToken_question()\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n};\n\npp$9.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$9.readRegexp = function() {\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n  // `len` is used for character escape sequences. In that case, disallow separators.\n  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n  // and isn't fraction part nor exponent part. In that case, if the first digit\n  // is zero then disallow separators.\n  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n  var start = this.pos, total = 0, lastCode = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n    var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n    if (allowSeparators && code === 95) {\n      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n      if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n      if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n      lastCode = code;\n      continue\n    }\n\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    lastCode = code;\n    total = total * radix + val;\n  }\n\n  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\nfunction stringToNumber(str, isLegacyOctalNumericLiteral) {\n  if (isLegacyOctalNumericLiteral) {\n    return parseInt(str, 8)\n  }\n\n  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n  return parseFloat(str.replace(/_/g, \"\"))\n}\n\nfunction stringToBigInt(str) {\n  if (typeof BigInt !== \"function\") {\n    return null\n  }\n\n  // `BigInt(value)` throws syntax error if the string contains numeric separators.\n  return BigInt(str.replace(/_/g, \"\"))\n}\n\npp$9.readRadixNumber = function(radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$9.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  var next = this.input.charCodeAt(this.pos);\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types.num, val$1)\n  }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var val = stringToNumber(this.input.slice(start, this.pos), octal);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$9.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString$1(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$9.readString = function(quote) {\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$9.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$9.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$9.readTmplToken = function() {\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types.dollarBraceL)\n        } else {\n          ++this.pos;\n          return this.finishToken(types.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$9.readInvalidTemplateToken = function() {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n    case \"\\\\\":\n      ++this.pos;\n      break\n\n    case \"$\":\n      if (this.input[this.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$9.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString$1(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  case 56:\n  case 57:\n    if (inTemplate) {\n      var codePos = this.pos - 1;\n\n      this.invalidStringToken(\n        codePos,\n        \"Invalid escape sequence in template string\"\n      );\n\n      return null\n    }\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      return \"\"\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$9.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$9.readWord1 = function() {\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n        { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString$1(esc);\n      chunkStart = this.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$9.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\nvar version = \"7.4.1\";\n\nParser.acorn = {\n  Parser: Parser,\n  version: version,\n  defaultOptions: defaultOptions,\n  Position: Position,\n  SourceLocation: SourceLocation,\n  getLineInfo: getLineInfo,\n  Node: Node,\n  TokenType: TokenType,\n  tokTypes: types,\n  keywordTypes: keywords$1,\n  TokContext: TokContext,\n  tokContexts: types$1,\n  isIdentifierChar: isIdentifierChar,\n  isIdentifierStart: isIdentifierStart,\n  Token: Token,\n  isNewLine: isNewLine,\n  lineBreak: lineBreak,\n  lineBreakG: lineBreakG,\n  nonASCIIwhitespace: nonASCIIwhitespace\n};\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return Parser.parse(input, options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options)\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return Parser.tokenizer(input, options)\n}\n\nexport { Node, Parser, Position, SourceLocation, TokContext, Token, TokenType, defaultOptions, getLineInfo, isIdentifierChar, isIdentifierStart, isNewLine, keywords$1 as keywordTypes, lineBreak, lineBreakG, nonASCIIwhitespace, parse, parseExpressionAt, types$1 as tokContexts, types as tokTypes, tokenizer, version };\n","{\n  \"name\": \"espree\",\n  \"description\": \"An Esprima-compatible JavaScript parser built on Acorn\",\n  \"author\": \"Nicholas C. Zakas <nicholas+npm@nczconsulting.com>\",\n  \"homepage\": \"https://github.com/eslint/espree\",\n  \"main\": \"espree.js\",\n  \"version\": \"7.3.1\",\n  \"files\": [\n    \"lib\",\n    \"espree.js\"\n  ],\n  \"engines\": {\n    \"node\": \"^10.12.0 || >=12.0.0\"\n  },\n  \"repository\": \"eslint/espree\",\n  \"bugs\": {\n    \"url\": \"http://github.com/eslint/espree.git\"\n  },\n  \"license\": \"BSD-2-Clause\",\n  \"dependencies\": {\n    \"acorn\": \"^7.4.0\",\n    \"acorn-jsx\": \"^5.3.1\",\n    \"eslint-visitor-keys\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"browserify\": \"^16.5.0\",\n    \"chai\": \"^4.2.0\",\n    \"eslint\": \"^6.0.1\",\n    \"eslint-config-eslint\": \"^5.0.1\",\n    \"eslint-plugin-node\": \"^9.1.0\",\n    \"eslint-release\": \"^1.0.0\",\n    \"esprima\": \"latest\",\n    \"esprima-fb\": \"^8001.2001.0-dev-harmony-fb\",\n    \"json-diff\": \"^0.5.4\",\n    \"leche\": \"^2.3.0\",\n    \"mocha\": \"^6.2.0\",\n    \"nyc\": \"^14.1.1\",\n    \"regenerate\": \"^1.4.0\",\n    \"shelljs\": \"^0.3.0\",\n    \"shelljs-nodecli\": \"^0.1.1\",\n    \"unicode-6.3.0\": \"^0.7.5\"\n  },\n  \"keywords\": [\n    \"ast\",\n    \"ecmascript\",\n    \"javascript\",\n    \"parser\",\n    \"syntax\",\n    \"acorn\"\n  ],\n  \"scripts\": {\n    \"generate-regex\": \"node tools/generate-identifier-regex.js\",\n    \"test\": \"npm run-script lint && node Makefile.js test\",\n    \"lint\": \"node Makefile.js lint\",\n    \"fixlint\": \"node Makefile.js lint --fix\",\n    \"sync-docs\": \"node Makefile.js docs\",\n    \"browserify\": \"node Makefile.js browserify\",\n    \"generate-release\": \"eslint-generate-release\",\n    \"generate-alpharelease\": \"eslint-generate-prerelease alpha\",\n    \"generate-betarelease\": \"eslint-generate-prerelease beta\",\n    \"generate-rcrelease\": \"eslint-generate-prerelease rc\",\n    \"publish-release\": \"eslint-publish-release\"\n  }\n}\n","/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\n\"use strict\";\n\nconst KEYS = require(\"./visitor-keys.json\");\n\n// Types.\nconst NODE_TYPES = Object.freeze(Object.keys(KEYS));\n\n// Freeze the keys.\nfor (const type of NODE_TYPES) {\n    Object.freeze(KEYS[type]);\n}\nObject.freeze(KEYS);\n\n// List to ignore keys.\nconst KEY_BLACKLIST = new Set([\n    \"parent\",\n    \"leadingComments\",\n    \"trailingComments\"\n]);\n\n/**\n * Check whether a given key should be used or not.\n * @param {string} key The key to check.\n * @returns {boolean} `true` if the key should be used.\n */\nfunction filterKey(key) {\n    return !KEY_BLACKLIST.has(key) && key[0] !== \"_\";\n}\n\n//------------------------------------------------------------------------------\n// Public interfaces\n//------------------------------------------------------------------------------\n\nmodule.exports = Object.freeze({\n\n    /**\n     * Visitor keys.\n     * @type {{ [type: string]: string[] | undefined }}\n     */\n    KEYS,\n\n    /**\n     * Get visitor keys of a given node.\n     * @param {Object} node The AST node to get keys.\n     * @returns {string[]} Visitor keys of the node.\n     */\n    getKeys(node) {\n        return Object.keys(node).filter(filterKey);\n    },\n\n    // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * Make the union set with `KEYS` and given keys.\n     * @param {Object} additionalKeys The additional keys.\n     * @returns {{ [type: string]: string[] | undefined }} The union set.\n     */\n    unionWith(additionalKeys) {\n        const retv = Object.assign({}, KEYS);\n\n        for (const type of Object.keys(additionalKeys)) {\n            if (retv.hasOwnProperty(type)) {\n                const keys = new Set(additionalKeys[type]);\n\n                for (const key of retv[type]) {\n                    keys.add(key);\n                }\n\n                retv[type] = Object.freeze(Array.from(keys));\n            } else {\n                retv[type] = Object.freeze(Array.from(additionalKeys[type]));\n            }\n        }\n\n        return Object.freeze(retv);\n    }\n});\n","{\n    \"AssignmentExpression\": [\n        \"left\",\n        \"right\"\n    ],\n    \"AssignmentPattern\": [\n        \"left\",\n        \"right\"\n    ],\n    \"ArrayExpression\": [\n        \"elements\"\n    ],\n    \"ArrayPattern\": [\n        \"elements\"\n    ],\n    \"ArrowFunctionExpression\": [\n        \"params\",\n        \"body\"\n    ],\n    \"AwaitExpression\": [\n        \"argument\"\n    ],\n    \"BlockStatement\": [\n        \"body\"\n    ],\n    \"BinaryExpression\": [\n        \"left\",\n        \"right\"\n    ],\n    \"BreakStatement\": [\n        \"label\"\n    ],\n    \"CallExpression\": [\n        \"callee\",\n        \"arguments\"\n    ],\n    \"CatchClause\": [\n        \"param\",\n        \"body\"\n    ],\n    \"ChainExpression\": [\n        \"expression\"\n    ],\n    \"ClassBody\": [\n        \"body\"\n    ],\n    \"ClassDeclaration\": [\n        \"id\",\n        \"superClass\",\n        \"body\"\n    ],\n    \"ClassExpression\": [\n        \"id\",\n        \"superClass\",\n        \"body\"\n    ],\n    \"ConditionalExpression\": [\n        \"test\",\n        \"consequent\",\n        \"alternate\"\n    ],\n    \"ContinueStatement\": [\n        \"label\"\n    ],\n    \"DebuggerStatement\": [],\n    \"DoWhileStatement\": [\n        \"body\",\n        \"test\"\n    ],\n    \"EmptyStatement\": [],\n    \"ExportAllDeclaration\": [\n        \"exported\",\n        \"source\"\n    ],\n    \"ExportDefaultDeclaration\": [\n        \"declaration\"\n    ],\n    \"ExportNamedDeclaration\": [\n        \"declaration\",\n        \"specifiers\",\n        \"source\"\n    ],\n    \"ExportSpecifier\": [\n        \"exported\",\n        \"local\"\n    ],\n    \"ExpressionStatement\": [\n        \"expression\"\n    ],\n    \"ExperimentalRestProperty\": [\n        \"argument\"\n    ],\n    \"ExperimentalSpreadProperty\": [\n        \"argument\"\n    ],\n    \"ForStatement\": [\n        \"init\",\n        \"test\",\n        \"update\",\n        \"body\"\n    ],\n    \"ForInStatement\": [\n        \"left\",\n        \"right\",\n        \"body\"\n    ],\n    \"ForOfStatement\": [\n        \"left\",\n        \"right\",\n        \"body\"\n    ],\n    \"FunctionDeclaration\": [\n        \"id\",\n        \"params\",\n        \"body\"\n    ],\n    \"FunctionExpression\": [\n        \"id\",\n        \"params\",\n        \"body\"\n    ],\n    \"Identifier\": [],\n    \"IfStatement\": [\n        \"test\",\n        \"consequent\",\n        \"alternate\"\n    ],\n    \"ImportDeclaration\": [\n        \"specifiers\",\n        \"source\"\n    ],\n    \"ImportDefaultSpecifier\": [\n        \"local\"\n    ],\n    \"ImportExpression\": [\n        \"source\"\n    ],\n    \"ImportNamespaceSpecifier\": [\n        \"local\"\n    ],\n    \"ImportSpecifier\": [\n        \"imported\",\n        \"local\"\n    ],\n    \"JSXAttribute\": [\n        \"name\",\n        \"value\"\n    ],\n    \"JSXClosingElement\": [\n        \"name\"\n    ],\n    \"JSXElement\": [\n        \"openingElement\",\n        \"children\",\n        \"closingElement\"\n    ],\n    \"JSXEmptyExpression\": [],\n    \"JSXExpressionContainer\": [\n        \"expression\"\n    ],\n    \"JSXIdentifier\": [],\n    \"JSXMemberExpression\": [\n        \"object\",\n        \"property\"\n    ],\n    \"JSXNamespacedName\": [\n        \"namespace\",\n        \"name\"\n    ],\n    \"JSXOpeningElement\": [\n        \"name\",\n        \"attributes\"\n    ],\n    \"JSXSpreadAttribute\": [\n        \"argument\"\n    ],\n    \"JSXText\": [],\n    \"JSXFragment\": [\n        \"openingFragment\",\n        \"children\",\n        \"closingFragment\"\n    ],\n    \"Literal\": [],\n    \"LabeledStatement\": [\n        \"label\",\n        \"body\"\n    ],\n    \"LogicalExpression\": [\n        \"left\",\n        \"right\"\n    ],\n    \"MemberExpression\": [\n        \"object\",\n        \"property\"\n    ],\n    \"MetaProperty\": [\n        \"meta\",\n        \"property\"\n    ],\n    \"MethodDefinition\": [\n        \"key\",\n        \"value\"\n    ],\n    \"NewExpression\": [\n        \"callee\",\n        \"arguments\"\n    ],\n    \"ObjectExpression\": [\n        \"properties\"\n    ],\n    \"ObjectPattern\": [\n        \"properties\"\n    ],\n    \"Program\": [\n        \"body\"\n    ],\n    \"Property\": [\n        \"key\",\n        \"value\"\n    ],\n    \"RestElement\": [\n        \"argument\"\n    ],\n    \"ReturnStatement\": [\n        \"argument\"\n    ],\n    \"SequenceExpression\": [\n        \"expressions\"\n    ],\n    \"SpreadElement\": [\n        \"argument\"\n    ],\n    \"Super\": [],\n    \"SwitchStatement\": [\n        \"discriminant\",\n        \"cases\"\n    ],\n    \"SwitchCase\": [\n        \"test\",\n        \"consequent\"\n    ],\n    \"TaggedTemplateExpression\": [\n        \"tag\",\n        \"quasi\"\n    ],\n    \"TemplateElement\": [],\n    \"TemplateLiteral\": [\n        \"quasis\",\n        \"expressions\"\n    ],\n    \"ThisExpression\": [],\n    \"ThrowStatement\": [\n        \"argument\"\n    ],\n    \"TryStatement\": [\n        \"block\",\n        \"handler\",\n        \"finalizer\"\n    ],\n    \"UnaryExpression\": [\n        \"argument\"\n    ],\n    \"UpdateExpression\": [\n        \"argument\"\n    ],\n    \"VariableDeclaration\": [\n        \"declarations\"\n    ],\n    \"VariableDeclarator\": [\n        \"id\",\n        \"init\"\n    ],\n    \"WhileStatement\": [\n        \"test\",\n        \"body\"\n    ],\n    \"WithStatement\": [\n        \"object\",\n        \"body\"\n    ],\n    \"YieldExpression\": [\n        \"argument\"\n    ]\n}\n","{\n  \"name\": \"estraverse\",\n  \"description\": \"ECMAScript JS AST traversal functions\",\n  \"homepage\": \"https://github.com/estools/estraverse\",\n  \"main\": \"estraverse.js\",\n  \"version\": \"4.3.0\",\n  \"engines\": {\n    \"node\": \">=4.0\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"Yusuke Suzuki\",\n      \"email\": \"utatane.tea@gmail.com\",\n      \"web\": \"http://github.com/Constellation\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://github.com/estools/estraverse.git\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-register\": \"^6.3.13\",\n    \"chai\": \"^2.1.1\",\n    \"espree\": \"^1.11.0\",\n    \"gulp\": \"^3.8.10\",\n    \"gulp-bump\": \"^0.2.2\",\n    \"gulp-filter\": \"^2.0.0\",\n    \"gulp-git\": \"^1.0.1\",\n    \"gulp-tag-version\": \"^1.3.0\",\n    \"jshint\": \"^2.5.6\",\n    \"mocha\": \"^2.1.0\"\n  },\n  \"license\": \"BSD-2-Clause\",\n  \"scripts\": {\n    \"test\": \"npm run-script lint && npm run-script unit-test\",\n    \"lint\": \"jshint estraverse.js\",\n    \"unit-test\": \"mocha --compilers js:babel-register\"\n  }\n}\n","\n\n// eslint-disable-next-line import/no-unresolved\nimport data from \"bundle-text:./methods/vanilla-js-methods.txt\"\n\nconst utils = require('./utils');\n\n\nasync function plugin(source) {\n    const methods = await utils.getJQueryMethodsFromSource(source);\n    const generatedMethods = await utils.generateAlternativeMethods(methods, data);\n\n    // eslint-disable-next-line no-undef\n    const formattedOutput = await prettier.format(\n        generatedMethods.data,\n        {\n            parser: 'babel',\n            tabWidth: 4,\n            // eslint-disable-next-line no-undef\n            plugins: prettierPlugins,\n            singleQuote: true,\n        }\n    );\n\n    return {\n        formattedOutput,\n        methodsFound: methods,\n        remainingMethods: generatedMethods.remainingMethods,\n    };\n}\n\nwindow.ReplaceJquery = plugin;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) resolve(value);\n    else Promise.resolve(value).then(_next, _throw);\n}\nexport function _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n\n            _next(undefined);\n        });\n    };\n}\nexport { _async_to_generator as _ };\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","export function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n","const espree = require('espree');\nconst estraverse = require('estraverse');\nconst alljQueryMethods = require('./all-methods');\n\nfunction traverse(node) {\n    while (node) {\n        switch (node.type) {\n            case 'CallExpression':\n                node = node.callee;\n                break;\n            case 'MemberExpression':\n                if (node.object.type === 'ThisExpression') {\n                    return node.property;\n                }\n                node = node.object;\n                break;\n            case 'Identifier':\n                return node;\n            default:\n                return null;\n        }\n    }\n}\n// Detect jQuery methods\n// @tod Add an option to pass regex for finding jQuery methods\nfunction isjQuery(node) {\n    const id = traverse(node);\n    return (\n        (id && new RegExp('^\\\\$.').test(id && id.name)) ||\n        ['$', 'jQuery'].includes(id && id.name)\n    );\n}\n\nfunction getAST(data) {\n    return espree.parse(data, {\n        ecmaVersion: 2021,\n        sourceType: 'module',\n        comment: true,\n    });\n}\n\nasync function getDependedMethods(\n    methodsFileData,\n    baseMethods,\n    generatedMethods,\n    lineRef,\n    outputStart,\n    outputEnd\n) {\n    const outputAst = getAST(outputStart + baseMethods + outputEnd);\n    const dependedMethods = [];\n    estraverse.traverse(outputAst, {\n        enter(node) {\n            if (node.callee && node.callee.type === 'MemberExpression') {\n                const methodName = node.callee.property.name;\n                if (\n                    (node.callee.object.type === 'ThisExpression' ||\n                        node.callee.object.type === 'Identifier') &&\n                    generatedMethods.indexOf(methodName) < 0\n                ) {\n                    dependedMethods.push(node.callee.property.name);\n                }\n            }\n        },\n    });\n\n    const uniqueDependedMethods = [...new Set(dependedMethods)];\n    let methodsData = '';\n    uniqueDependedMethods.forEach((method) => {\n        if (lineRef[method] && lineRef[method].range) {\n            methodsData += methodsFileData.substring(\n                lineRef[method].range.start,\n                lineRef[method].range.end\n            );\n        }\n    });\n    let allMethods = [...generatedMethods, ...uniqueDependedMethods];\n\n    if (uniqueDependedMethods.length) {\n        const remainingMethodData = await getDependedMethods(\n            methodsFileData,\n            baseMethods + methodsData,\n            allMethods,\n            lineRef,\n            outputStart,\n            outputEnd\n        );\n        methodsData += remainingMethodData.methodsData;\n        allMethods = [...allMethods, remainingMethodData.allMethods];\n    }\n\n    return { methodsData, allMethods };\n}\n\nconst getTemplateData = (data, astMethods) => {\n    const templateLines = {\n        start: 0,\n        end: 0,\n    };\n    astMethods.comments.forEach((comment) => {\n        if (comment.type === 'Block') {\n            if (comment.value.includes('$$ Template START $$')) {\n                templateLines.start = comment.start;\n            } else if (comment.value.includes('$$ Template END $$')) {\n                templateLines.end = comment.end;\n            }\n        }\n    });\n\n    const outputStart = data.substring(0, templateLines.start);\n    const outputEnd = data.substring(templateLines.end, data.length);\n    return {\n        outputStart,\n        outputEnd,\n    };\n};\n\n\nasync function generateAlternativeMethods(methodsToGenerate, methodsFileData) {\n    const lineRef = {};\n    const astMethods = getAST(methodsFileData);\n\n    estraverse.traverse(astMethods, {\n        enter(node) {\n            if (node.type === 'MethodDefinition') {\n                lineRef[node.key.name] = {\n                    name: node.key.name,\n                    range: {\n                        start: node.start,\n                        end: node.end,\n                    },\n                };\n                return estraverse.VisitorOption.Skip;\n            }\n        },\n    });\n    const remainingMethods = [];\n\n    let baseMethods = '';\n    methodsToGenerate.forEach((method) => {\n        if (lineRef[method]) {\n            baseMethods += methodsFileData.substring(\n                lineRef[method].range.start,\n                lineRef[method].range.end\n            );\n        } else {\n            remainingMethods.push(method);\n        }\n    });\n\n    const { outputStart, outputEnd } = getTemplateData(\n        methodsFileData,\n        astMethods\n    );\n\n    const remainingMethodData = await getDependedMethods(\n        methodsFileData,\n        baseMethods,\n        methodsToGenerate,\n        lineRef,\n        outputStart,\n        outputEnd\n    );\n    return {\n        data: outputStart + baseMethods + remainingMethodData.methodsData + outputEnd,\n        remainingMethods,\n    };\n}\n\nasync function getJQueryMethodsFromSource(data) {\n    const ast = getAST(data);\n    const jQFns = [];\n    estraverse.traverse(ast, {\n        enter(node) {\n            if (node.callee && node.callee.type === 'MemberExpression') {\n                if (isjQuery(node)) {\n                    jQFns.push(node.callee.property.name);\n                }\n            }\n        },\n    });\n\n    const jQFnsSet = new Set(jQFns);\n    const alljQMethodsSet = new Set(alljQueryMethods);\n    const intersection = new Set(\n        [...jQFnsSet].filter((method) => alljQMethodsSet.has(method))\n    );\n    return [...intersection];\n}\n\n\nmodule.exports = {\n    traverse,\n    isjQuery,\n    getAST,\n    generateAlternativeMethods,\n    getJQueryMethodsFromSource\n};\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint no-undefined:0, no-use-before-define: 0 */\n\n\"use strict\";\n\nconst acorn = require(\"acorn\");\nconst jsx = require(\"acorn-jsx\");\nconst astNodeTypes = require(\"./lib/ast-node-types\");\nconst espree = require(\"./lib/espree\");\nconst { getLatestEcmaVersion, getSupportedEcmaVersions } = require(\"./lib/options\");\n\n// To initialize lazily.\nconst parsers = {\n    _regular: null,\n    _jsx: null,\n\n    get regular() {\n        if (this._regular === null) {\n            this._regular = acorn.Parser.extend(espree());\n        }\n        return this._regular;\n    },\n\n    get jsx() {\n        if (this._jsx === null) {\n            this._jsx = acorn.Parser.extend(jsx(), espree());\n        }\n        return this._jsx;\n    },\n\n    get(options) {\n        const useJsx = Boolean(\n            options &&\n            options.ecmaFeatures &&\n            options.ecmaFeatures.jsx\n        );\n\n        return useJsx ? this.jsx : this.regular;\n    }\n};\n\n//------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\nfunction tokenize(code, options) {\n    const Parser = parsers.get(options);\n\n    // Ensure to collect tokens.\n    if (!options || options.tokens !== true) {\n        options = Object.assign({}, options, { tokens: true }); // eslint-disable-line no-param-reassign\n    }\n\n    return new Parser(options, code).tokenize();\n}\n\n//------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n */\nfunction parse(code, options) {\n    const Parser = parsers.get(options);\n\n    return new Parser(options, code).parse();\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nexports.version = require(\"./package.json\").version;\n\nexports.tokenize = tokenize;\n\nexports.parse = parse;\n\n// Deep copy.\n/* istanbul ignore next */\nexports.Syntax = (function() {\n    let name,\n        types = {};\n\n    if (typeof Object.create === \"function\") {\n        types = Object.create(null);\n    }\n\n    for (name in astNodeTypes) {\n        if (Object.hasOwnProperty.call(astNodeTypes, name)) {\n            types[name] = astNodeTypes[name];\n        }\n    }\n\n    if (typeof Object.freeze === \"function\") {\n        Object.freeze(types);\n    }\n\n    return types;\n}());\n\n/* istanbul ignore next */\nexports.VisitorKeys = (function() {\n    return require(\"eslint-visitor-keys\").KEYS;\n}());\n\nexports.latestEcmaVersion = getLatestEcmaVersion();\n\nexports.supportedEcmaVersions = getSupportedEcmaVersions();\n","'use strict';\n\nconst XHTMLEntities = require('./xhtml');\n\nconst hexNumber = /^[\\da-fA-F]+$/;\nconst decimalNumber = /^\\d+$/;\n\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nconst acornJsxMap = new WeakMap();\n\n// Get the original tokens for the given `acorn` namespace object.\nfunction getJsxTokens(acorn) {\n  acorn = acorn.Parser.acorn || acorn;\n  let acornJsx = acornJsxMap.get(acorn);\n  if (!acornJsx) {\n    const tt = acorn.tokTypes;\n    const TokContext = acorn.TokContext;\n    const TokenType = acorn.TokenType;\n    const tc_oTag = new TokContext('<tag', false);\n    const tc_cTag = new TokContext('</tag', false);\n    const tc_expr = new TokContext('<tag>...</tag>', true, true);\n    const tokContexts = {\n      tc_oTag: tc_oTag,\n      tc_cTag: tc_cTag,\n      tc_expr: tc_expr\n    };\n    const tokTypes = {\n      jsxName: new TokenType('jsxName'),\n      jsxText: new TokenType('jsxText', {beforeExpr: true}),\n      jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),\n      jsxTagEnd: new TokenType('jsxTagEnd')\n    };\n\n    tokTypes.jsxTagStart.updateContext = function() {\n      this.context.push(tc_expr); // treat as beginning of JSX expression\n      this.context.push(tc_oTag); // start opening tag context\n      this.exprAllowed = false;\n    };\n    tokTypes.jsxTagEnd.updateContext = function(prevType) {\n      let out = this.context.pop();\n      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };\n    acornJsxMap.set(acorn, acornJsx);\n  }\n\n  return acornJsx;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (!object)\n    return object;\n\n  if (object.type === 'JSXIdentifier')\n    return object.name;\n\n  if (object.type === 'JSXNamespacedName')\n    return object.namespace.name + ':' + object.name.name;\n\n  if (object.type === 'JSXMemberExpression')\n    return getQualifiedJSXName(object.object) + '.' +\n    getQualifiedJSXName(object.property);\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n  return function(Parser) {\n    return plugin({\n      allowNamespaces: options.allowNamespaces !== false,\n      allowNamespacedObjects: !!options.allowNamespacedObjects\n    }, Parser);\n  };\n};\n\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty(module.exports, \"tokTypes\", {\n  get: function get_tokTypes() {\n    return getJsxTokens(require(\"acorn\")).tokTypes;\n  },\n  configurable: true,\n  enumerable: true\n});\n\nfunction plugin(options, Parser) {\n  const acorn = Parser.acorn || require(\"acorn\");\n  const acornJsx = getJsxTokens(acorn);\n  const tt = acorn.tokTypes;\n  const tok = acornJsx.tokTypes;\n  const tokContexts = acorn.tokContexts;\n  const tc_oTag = acornJsx.tokContexts.tc_oTag;\n  const tc_cTag = acornJsx.tokContexts.tc_cTag;\n  const tc_expr = acornJsx.tokContexts.tc_expr;\n  const isNewLine = acorn.isNewLine;\n  const isIdentifierStart = acorn.isIdentifierStart;\n  const isIdentifierChar = acorn.isIdentifierChar;\n\n  return class extends Parser {\n    // Expose actual `tokTypes` and `tokContexts` to other plugins.\n    static get acornJsx() {\n      return acornJsx;\n    }\n\n    // Reads inline JSX contents token.\n    jsx_readToken() {\n      let out = '', chunkStart = this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated JSX contents');\n        let ch = this.input.charCodeAt(this.pos);\n\n        switch (ch) {\n        case 60: // '<'\n        case 123: // '{'\n          if (this.pos === this.start) {\n            if (ch === 60 && this.exprAllowed) {\n              ++this.pos;\n              return this.finishToken(tok.jsxTagStart);\n            }\n            return this.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.pos);\n          return this.finishToken(tok.jsxText, out);\n\n        case 38: // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n          break;\n\n        case 62: // '>'\n        case 125: // '}'\n          this.raise(\n            this.pos,\n            \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" +\n              (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + \"`{\\\"\" + this.input[this.pos] + \"\\\"}\" + \"`?\"\n          );\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.jsx_readNewLine(true);\n            chunkStart = this.pos;\n          } else {\n            ++this.pos;\n          }\n        }\n      }\n    }\n\n    jsx_readNewLine(normalizeCRLF) {\n      let ch = this.input.charCodeAt(this.pos);\n      let out;\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out = normalizeCRLF ? '\\n' : '\\r\\n';\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      return out;\n    }\n\n    jsx_readString(quote) {\n      let out = '', chunkStart = ++this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated string constant');\n        let ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 38) { // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(false);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsx_readEntity() {\n      let str = '', count = 0, entity;\n      let ch = this.input[this.pos];\n      if (ch !== '&')\n        this.raise(this.pos, 'Entity must start with an ampersand');\n      let startPos = ++this.pos;\n      while (this.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.pos++];\n        if (ch === ';') {\n          if (str[0] === '#') {\n            if (str[1] === 'x') {\n              str = str.substr(2);\n              if (hexNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 16));\n            } else {\n              str = str.substr(1);\n              if (decimalNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 10));\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.pos = startPos;\n        return '&';\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can't contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsx_readWord() {\n      let ch, start = this.pos;\n      do {\n        ch = this.input.charCodeAt(++this.pos);\n      } while (isIdentifierChar(ch) || ch === 45); // '-'\n      return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsx_parseIdentifier() {\n      let node = this.startNode();\n      if (this.type === tok.jsxName)\n        node.name = this.value;\n      else if (this.type.keyword)\n        node.name = this.type.keyword;\n      else\n        this.unexpected();\n      this.next();\n      return this.finishNode(node, 'JSXIdentifier');\n    }\n\n    // Parse namespaced identifier.\n\n    jsx_parseNamespacedName() {\n      let startPos = this.start, startLoc = this.startLoc;\n      let name = this.jsx_parseIdentifier();\n      if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsx_parseIdentifier();\n      return this.finishNode(node, 'JSXNamespacedName');\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsx_parseElementName() {\n      if (this.type === tok.jsxTagEnd) return '';\n      let startPos = this.start, startLoc = this.startLoc;\n      let node = this.jsx_parseNamespacedName();\n      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\n        this.unexpected();\n      }\n      while (this.eat(tt.dot)) {\n        let newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsx_parseIdentifier();\n        node = this.finishNode(newNode, 'JSXMemberExpression');\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsx_parseAttributeValue() {\n      switch (this.type) {\n      case tt.braceL:\n        let node = this.jsx_parseExpressionContainer();\n        if (node.expression.type === 'JSXEmptyExpression')\n          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n        return node;\n\n      case tok.jsxTagStart:\n      case tt.string:\n        return this.parseExprAtom();\n\n      default:\n        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsx_parseEmptyExpression() {\n      let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsx_parseExpressionContainer() {\n      let node = this.startNode();\n      this.next();\n      node.expression = this.type === tt.braceR\n        ? this.jsx_parseEmptyExpression()\n        : this.parseExpression();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXExpressionContainer');\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsx_parseAttribute() {\n      let node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, 'JSXSpreadAttribute');\n      }\n      node.name = this.jsx_parseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n      return this.finishNode(node, 'JSXAttribute');\n    }\n\n    // Parses JSX opening tag starting after '<'.\n\n    jsx_parseOpeningElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      node.attributes = [];\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)\n        node.attributes.push(this.jsx_parseAttribute());\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\n    }\n\n    // Parses JSX closing tag starting after '</'.\n\n    jsx_parseClosingElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\n    }\n\n    // Parses entire JSX element, including it's opening tag\n    // (starting after '<'), attributes, contents and closing tag.\n\n    jsx_parseElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let children = [];\n      let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.type) {\n          case tok.jsxTagStart:\n            startPos = this.start; startLoc = this.startLoc;\n            this.next();\n            if (this.eat(tt.slash)) {\n              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n            children.push(this.jsx_parseElementAt(startPos, startLoc));\n            break;\n\n          case tok.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case tt.braceL:\n            children.push(this.jsx_parseExpressionContainer());\n            break;\n\n          default:\n            this.unexpected();\n          }\n        }\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(\n            closingElement.start,\n            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n        }\n      }\n      let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\n\n      node['opening' + fragmentOrElement] = openingElement;\n      node['closing' + fragmentOrElement] = closingElement;\n      node.children = children;\n      if (this.type === tt.relational && this.value === \"<\") {\n        this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n      }\n      return this.finishNode(node, 'JSX' + fragmentOrElement);\n    }\n\n    // Parse JSX text\n\n    jsx_parseText() {\n      let node = this.parseLiteral(this.value);\n      node.type = \"JSXText\";\n      return node;\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsx_parseElement() {\n      let startPos = this.start, startLoc = this.startLoc;\n      this.next();\n      return this.jsx_parseElementAt(startPos, startLoc);\n    }\n\n    parseExprAtom(refShortHandDefaultPos) {\n      if (this.type === tok.jsxText)\n        return this.jsx_parseText();\n      else if (this.type === tok.jsxTagStart)\n        return this.jsx_parseElement();\n      else\n        return super.parseExprAtom(refShortHandDefaultPos);\n    }\n\n    readToken(code) {\n      let context = this.curContext();\n\n      if (context === tc_expr) return this.jsx_readToken();\n\n      if (context === tc_oTag || context === tc_cTag) {\n        if (isIdentifierStart(code)) return this.jsx_readWord();\n\n        if (code == 62) {\n          ++this.pos;\n          return this.finishToken(tok.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context == tc_oTag)\n          return this.jsx_readString(code);\n      }\n\n      if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n        ++this.pos;\n        return this.finishToken(tok.jsxTagStart);\n      }\n      return super.readToken(code);\n    }\n\n    updateContext(prevType) {\n      if (this.type == tt.braceL) {\n        var curContext = this.curContext();\n        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n        else super.updateContext(prevType);\n        this.exprAllowed = true;\n      } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.context.push(tc_cTag); // reconsider as closing tag context\n        this.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n}\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _super_prop_base } from \"./_super_prop_base.js\";\n\nexport function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) _get = Reflect.get;\n    else {\n        _get = function get(target, property, receiver) {\n            var base = _super_prop_base(target, property);\n\n            if (!base) return;\n\n            var desc = Object.getOwnPropertyDescriptor(base, property);\n\n            if (desc.get) return desc.get.call(receiver || target);\n\n            return desc.value;\n        };\n    }\n\n    return _get(target, property, receiver || target);\n}\nexport { _get as _ };\n","import { _get_prototype_of } from \"./_get_prototype_of.js\";\n\nexport function _super_prop_base(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n        object = _get_prototype_of(object);\n        if (object === null) break;\n    }\n\n    return object;\n}\nexport { _super_prop_base as _ };\n","export function _get_prototype_of(o) {\n    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n\n    return _get_prototype_of(o);\n}\nexport { _get_prototype_of as _ };\n","import { _set_prototype_of } from \"./_set_prototype_of.js\";\n\nexport function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });\n\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nexport { _inherits as _ };\n","export function _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n\n        return o;\n    };\n\n    return _set_prototype_of(o, p);\n}\nexport { _set_prototype_of as _ };\n","import { _get_prototype_of } from \"./_get_prototype_of.js\";\nimport { _is_native_reflect_construct } from \"./_is_native_reflect_construct.js\";\nimport { _possible_constructor_return } from \"./_possible_constructor_return.js\";\n\nexport function _create_super(Derived) {\n    var hasNativeReflectConstruct = _is_native_reflect_construct();\n\n    return function _createSuperInternal() {\n        var Super = _get_prototype_of(Derived), result;\n\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _get_prototype_of(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n\n        return _possible_constructor_return(this, result);\n    };\n}\nexport { _create_super as _ };\n","export function _is_native_reflect_construct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nexport { _is_native_reflect_construct as _ };\n","import { _assert_this_initialized } from \"./_assert_this_initialized.js\";\nimport { _type_of } from \"./_type_of.js\";\n\nexport function _possible_constructor_return(self, call) {\n    if (call && (_type_of(call) === \"object\" || typeof call === \"function\")) return call;\n\n    return _assert_this_initialized(self);\n}\nexport { _possible_constructor_return as _ };\n","export function _assert_this_initialized(self) {\n    if (self === void 0) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\n    return self;\n}\nexport { _assert_this_initialized as _ };\n","module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n","/**\n * @fileoverview The AST node types produced by the parser.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// None!\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    AssignmentExpression: \"AssignmentExpression\",\n    AssignmentPattern: \"AssignmentPattern\",\n    ArrayExpression: \"ArrayExpression\",\n    ArrayPattern: \"ArrayPattern\",\n    ArrowFunctionExpression: \"ArrowFunctionExpression\",\n    AwaitExpression: \"AwaitExpression\",\n    BlockStatement: \"BlockStatement\",\n    BinaryExpression: \"BinaryExpression\",\n    BreakStatement: \"BreakStatement\",\n    CallExpression: \"CallExpression\",\n    CatchClause: \"CatchClause\",\n    ClassBody: \"ClassBody\",\n    ClassDeclaration: \"ClassDeclaration\",\n    ClassExpression: \"ClassExpression\",\n    ConditionalExpression: \"ConditionalExpression\",\n    ContinueStatement: \"ContinueStatement\",\n    DoWhileStatement: \"DoWhileStatement\",\n    DebuggerStatement: \"DebuggerStatement\",\n    EmptyStatement: \"EmptyStatement\",\n    ExpressionStatement: \"ExpressionStatement\",\n    ForStatement: \"ForStatement\",\n    ForInStatement: \"ForInStatement\",\n    ForOfStatement: \"ForOfStatement\",\n    FunctionDeclaration: \"FunctionDeclaration\",\n    FunctionExpression: \"FunctionExpression\",\n    Identifier: \"Identifier\",\n    IfStatement: \"IfStatement\",\n    Literal: \"Literal\",\n    LabeledStatement: \"LabeledStatement\",\n    LogicalExpression: \"LogicalExpression\",\n    MemberExpression: \"MemberExpression\",\n    MetaProperty: \"MetaProperty\",\n    MethodDefinition: \"MethodDefinition\",\n    NewExpression: \"NewExpression\",\n    ObjectExpression: \"ObjectExpression\",\n    ObjectPattern: \"ObjectPattern\",\n    Program: \"Program\",\n    Property: \"Property\",\n    RestElement: \"RestElement\",\n    ReturnStatement: \"ReturnStatement\",\n    SequenceExpression: \"SequenceExpression\",\n    SpreadElement: \"SpreadElement\",\n    Super: \"Super\",\n    SwitchCase: \"SwitchCase\",\n    SwitchStatement: \"SwitchStatement\",\n    TaggedTemplateExpression: \"TaggedTemplateExpression\",\n    TemplateElement: \"TemplateElement\",\n    TemplateLiteral: \"TemplateLiteral\",\n    ThisExpression: \"ThisExpression\",\n    ThrowStatement: \"ThrowStatement\",\n    TryStatement: \"TryStatement\",\n    UnaryExpression: \"UnaryExpression\",\n    UpdateExpression: \"UpdateExpression\",\n    VariableDeclaration: \"VariableDeclaration\",\n    VariableDeclarator: \"VariableDeclarator\",\n    WhileStatement: \"WhileStatement\",\n    WithStatement: \"WithStatement\",\n    YieldExpression: \"YieldExpression\",\n    JSXIdentifier: \"JSXIdentifier\",\n    JSXNamespacedName: \"JSXNamespacedName\",\n    JSXMemberExpression: \"JSXMemberExpression\",\n    JSXEmptyExpression: \"JSXEmptyExpression\",\n    JSXExpressionContainer: \"JSXExpressionContainer\",\n    JSXElement: \"JSXElement\",\n    JSXClosingElement: \"JSXClosingElement\",\n    JSXOpeningElement: \"JSXOpeningElement\",\n    JSXAttribute: \"JSXAttribute\",\n    JSXSpreadAttribute: \"JSXSpreadAttribute\",\n    JSXText: \"JSXText\",\n    ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n    ExportNamedDeclaration: \"ExportNamedDeclaration\",\n    ExportAllDeclaration: \"ExportAllDeclaration\",\n    ExportSpecifier: \"ExportSpecifier\",\n    ImportDeclaration: \"ImportDeclaration\",\n    ImportSpecifier: \"ImportSpecifier\",\n    ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n    ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\"\n};\n","\"use strict\";\n\n/* eslint-disable no-param-reassign*/\nconst TokenTranslator = require(\"./token-translator\");\nconst { normalizeOptions } = require(\"./options\");\n\nconst STATE = Symbol(\"espree's internal state\");\nconst ESPRIMA_FINISH_NODE = Symbol(\"espree's esprimaFinishNode\");\n\n\n/**\n * Converts an Acorn comment to a Esprima comment.\n * @param {boolean} block True if it's a block comment, false if not.\n * @param {string} text The text of the comment.\n * @param {int} start The index at which the comment starts.\n * @param {int} end The index at which the comment ends.\n * @param {Location} startLoc The location at which the comment starts.\n * @param {Location} endLoc The location at which the comment ends.\n * @returns {Object} The comment object.\n * @private\n */\nfunction convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text\n    };\n\n    if (typeof start === \"number\") {\n        comment.start = start;\n        comment.end = end;\n        comment.range = [start, end];\n    }\n\n    if (typeof startLoc === \"object\") {\n        comment.loc = {\n            start: startLoc,\n            end: endLoc\n        };\n    }\n\n    return comment;\n}\n\nmodule.exports = () => Parser => {\n    const tokTypes = Object.assign({}, Parser.acorn.tokTypes);\n\n    if (Parser.acornJsx) {\n        Object.assign(tokTypes, Parser.acornJsx.tokTypes);\n    }\n\n    return class Espree extends Parser {\n        constructor(opts, code) {\n            if (typeof opts !== \"object\" || opts === null) {\n                opts = {};\n            }\n            if (typeof code !== \"string\" && !(code instanceof String)) {\n                code = String(code);\n            }\n\n            const options = normalizeOptions(opts);\n            const ecmaFeatures = options.ecmaFeatures || {};\n            const tokenTranslator =\n                options.tokens === true\n                    ? new TokenTranslator(tokTypes, code)\n                    : null;\n\n            // Initialize acorn parser.\n            super({\n\n                // TODO: use {...options} when spread is supported(Node.js >= 8.3.0).\n                ecmaVersion: options.ecmaVersion,\n                sourceType: options.sourceType,\n                ranges: options.ranges,\n                locations: options.locations,\n\n                // Truthy value is true for backward compatibility.\n                allowReturnOutsideFunction: Boolean(ecmaFeatures.globalReturn),\n\n                // Collect tokens\n                onToken: token => {\n                    if (tokenTranslator) {\n\n                        // Use `tokens`, `ecmaVersion`, and `jsxAttrValueToken` in the state.\n                        tokenTranslator.onToken(token, this[STATE]);\n                    }\n                    if (token.type !== tokTypes.eof) {\n                        this[STATE].lastToken = token;\n                    }\n                },\n\n                // Collect comments\n                onComment: (block, text, start, end, startLoc, endLoc) => {\n                    if (this[STATE].comments) {\n                        const comment = convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc);\n\n                        this[STATE].comments.push(comment);\n                    }\n                }\n            }, code);\n\n            // Initialize internal state.\n            this[STATE] = {\n                tokens: tokenTranslator ? [] : null,\n                comments: options.comment === true ? [] : null,\n                impliedStrict: ecmaFeatures.impliedStrict === true && this.options.ecmaVersion >= 5,\n                ecmaVersion: this.options.ecmaVersion,\n                jsxAttrValueToken: false,\n                lastToken: null\n            };\n        }\n\n        tokenize() {\n            do {\n                this.next();\n            } while (this.type !== tokTypes.eof);\n\n            // Consume the final eof token\n            this.next();\n\n            const extra = this[STATE];\n            const tokens = extra.tokens;\n\n            if (extra.comments) {\n                tokens.comments = extra.comments;\n            }\n\n            return tokens;\n        }\n\n        finishNode(...args) {\n            const result = super.finishNode(...args);\n\n            return this[ESPRIMA_FINISH_NODE](result);\n        }\n\n        finishNodeAt(...args) {\n            const result = super.finishNodeAt(...args);\n\n            return this[ESPRIMA_FINISH_NODE](result);\n        }\n\n        parse() {\n            const extra = this[STATE];\n            const program = super.parse();\n\n            program.sourceType = this.options.sourceType;\n\n            if (extra.comments) {\n                program.comments = extra.comments;\n            }\n            if (extra.tokens) {\n                program.tokens = extra.tokens;\n            }\n\n            /*\n             * Adjust opening and closing position of program to match Esprima.\n             * Acorn always starts programs at range 0 whereas Esprima starts at the\n             * first AST node's start (the only real difference is when there's leading\n             * whitespace or leading comments). Acorn also counts trailing whitespace\n             * as part of the program whereas Esprima only counts up to the last token.\n             */\n            if (program.range) {\n                program.range[0] = program.body.length ? program.body[0].range[0] : program.range[0];\n                program.range[1] = extra.lastToken ? extra.lastToken.range[1] : program.range[1];\n            }\n            if (program.loc) {\n                program.loc.start = program.body.length ? program.body[0].loc.start : program.loc.start;\n                program.loc.end = extra.lastToken ? extra.lastToken.loc.end : program.loc.end;\n            }\n\n            return program;\n        }\n\n        parseTopLevel(node) {\n            if (this[STATE].impliedStrict) {\n                this.strict = true;\n            }\n            return super.parseTopLevel(node);\n        }\n\n        /**\n         * Overwrites the default raise method to throw Esprima-style errors.\n         * @param {int} pos The position of the error.\n         * @param {string} message The error message.\n         * @throws {SyntaxError} A syntax error.\n         * @returns {void}\n         */\n        raise(pos, message) {\n            const loc = Parser.acorn.getLineInfo(this.input, pos);\n            const err = new SyntaxError(message);\n\n            err.index = pos;\n            err.lineNumber = loc.line;\n            err.column = loc.column + 1; // acorn uses 0-based columns\n            throw err;\n        }\n\n        /**\n         * Overwrites the default raise method to throw Esprima-style errors.\n         * @param {int} pos The position of the error.\n         * @param {string} message The error message.\n         * @throws {SyntaxError} A syntax error.\n         * @returns {void}\n         */\n        raiseRecoverable(pos, message) {\n            this.raise(pos, message);\n        }\n\n        /**\n         * Overwrites the default unexpected method to throw Esprima-style errors.\n         * @param {int} pos The position of the error.\n         * @throws {SyntaxError} A syntax error.\n         * @returns {void}\n         */\n        unexpected(pos) {\n            let message = \"Unexpected token\";\n\n            if (pos !== null && pos !== void 0) {\n                this.pos = pos;\n\n                if (this.options.locations) {\n                    while (this.pos < this.lineStart) {\n                        this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n                        --this.curLine;\n                    }\n                }\n\n                this.nextToken();\n            }\n\n            if (this.end > this.start) {\n                message += ` ${this.input.slice(this.start, this.end)}`;\n            }\n\n            this.raise(this.start, message);\n        }\n\n        /*\n        * Esprima-FB represents JSX strings as tokens called \"JSXText\", but Acorn-JSX\n        * uses regular tt.string without any distinction between this and regular JS\n        * strings. As such, we intercept an attempt to read a JSX string and set a flag\n        * on extra so that when tokens are converted, the next token will be switched\n        * to JSXText via onToken.\n        */\n        jsx_readString(quote) { // eslint-disable-line camelcase\n            const result = super.jsx_readString(quote);\n\n            if (this.type === tokTypes.string) {\n                this[STATE].jsxAttrValueToken = true;\n            }\n            return result;\n        }\n\n        /**\n         * Performs last-minute Esprima-specific compatibility checks and fixes.\n         * @param {ASTNode} result The node to check.\n         * @returns {ASTNode} The finished node.\n         */\n        [ESPRIMA_FINISH_NODE](result) {\n\n            // Acorn doesn't count the opening and closing backticks as part of templates\n            // so we have to adjust ranges/locations appropriately.\n            if (result.type === \"TemplateElement\") {\n\n                // additional adjustment needed if ${ is the last token\n                const terminalDollarBraceL = this.input.slice(result.end, result.end + 2) === \"${\";\n\n                if (result.range) {\n                    result.range[0]--;\n                    result.range[1] += (terminalDollarBraceL ? 2 : 1);\n                }\n\n                if (result.loc) {\n                    result.loc.start.column--;\n                    result.loc.end.column += (terminalDollarBraceL ? 2 : 1);\n                }\n            }\n\n            if (result.type.indexOf(\"Function\") > -1 && !result.generator) {\n                result.generator = false;\n            }\n\n            return result;\n        }\n    };\n};\n","/**\n * @fileoverview Translates tokens between Acorn format and Esprima format.\n * @author Nicholas C. Zakas\n */\n/* eslint no-underscore-dangle: 0 */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// none!\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\n\n// Esprima Token Types\nconst Token = {\n    Boolean: \"Boolean\",\n    EOF: \"<end>\",\n    Identifier: \"Identifier\",\n    Keyword: \"Keyword\",\n    Null: \"Null\",\n    Numeric: \"Numeric\",\n    Punctuator: \"Punctuator\",\n    String: \"String\",\n    RegularExpression: \"RegularExpression\",\n    Template: \"Template\",\n    JSXIdentifier: \"JSXIdentifier\",\n    JSXText: \"JSXText\"\n};\n\n/**\n * Converts part of a template into an Esprima token.\n * @param {AcornToken[]} tokens The Acorn tokens representing the template.\n * @param {string} code The source code.\n * @returns {EsprimaToken} The Esprima equivalent of the template token.\n * @private\n */\nfunction convertTemplatePart(tokens, code) {\n    const firstToken = tokens[0],\n        lastTemplateToken = tokens[tokens.length - 1];\n\n    const token = {\n        type: Token.Template,\n        value: code.slice(firstToken.start, lastTemplateToken.end)\n    };\n\n    if (firstToken.loc) {\n        token.loc = {\n            start: firstToken.loc.start,\n            end: lastTemplateToken.loc.end\n        };\n    }\n\n    if (firstToken.range) {\n        token.start = firstToken.range[0];\n        token.end = lastTemplateToken.range[1];\n        token.range = [token.start, token.end];\n    }\n\n    return token;\n}\n\n/**\n * Contains logic to translate Acorn tokens into Esprima tokens.\n * @param {Object} acornTokTypes The Acorn token types.\n * @param {string} code The source code Acorn is parsing. This is necessary\n *      to correct the \"value\" property of some tokens.\n * @constructor\n */\nfunction TokenTranslator(acornTokTypes, code) {\n\n    // token types\n    this._acornTokTypes = acornTokTypes;\n\n    // token buffer for templates\n    this._tokens = [];\n\n    // track the last curly brace\n    this._curlyBrace = null;\n\n    // the source code\n    this._code = code;\n\n}\n\nTokenTranslator.prototype = {\n    constructor: TokenTranslator,\n\n    /**\n     * Translates a single Esprima token to a single Acorn token. This may be\n     * inaccurate due to how templates are handled differently in Esprima and\n     * Acorn, but should be accurate for all other tokens.\n     * @param {AcornToken} token The Acorn token to translate.\n     * @param {Object} extra Espree extra object.\n     * @returns {EsprimaToken} The Esprima version of the token.\n     */\n    translate(token, extra) {\n\n        const type = token.type,\n            tt = this._acornTokTypes;\n\n        if (type === tt.name) {\n            token.type = Token.Identifier;\n\n            // TODO: See if this is an Acorn bug\n            if (token.value === \"static\") {\n                token.type = Token.Keyword;\n            }\n\n            if (extra.ecmaVersion > 5 && (token.value === \"yield\" || token.value === \"let\")) {\n                token.type = Token.Keyword;\n            }\n\n        } else if (type === tt.semi || type === tt.comma ||\n                 type === tt.parenL || type === tt.parenR ||\n                 type === tt.braceL || type === tt.braceR ||\n                 type === tt.dot || type === tt.bracketL ||\n                 type === tt.colon || type === tt.question ||\n                 type === tt.bracketR || type === tt.ellipsis ||\n                 type === tt.arrow || type === tt.jsxTagStart ||\n                 type === tt.incDec || type === tt.starstar ||\n                 type === tt.jsxTagEnd || type === tt.prefix ||\n                 type === tt.questionDot ||\n                 (type.binop && !type.keyword) ||\n                 type.isAssign) {\n\n            token.type = Token.Punctuator;\n            token.value = this._code.slice(token.start, token.end);\n        } else if (type === tt.jsxName) {\n            token.type = Token.JSXIdentifier;\n        } else if (type.label === \"jsxText\" || type === tt.jsxAttrValueToken) {\n            token.type = Token.JSXText;\n        } else if (type.keyword) {\n            if (type.keyword === \"true\" || type.keyword === \"false\") {\n                token.type = Token.Boolean;\n            } else if (type.keyword === \"null\") {\n                token.type = Token.Null;\n            } else {\n                token.type = Token.Keyword;\n            }\n        } else if (type === tt.num) {\n            token.type = Token.Numeric;\n            token.value = this._code.slice(token.start, token.end);\n        } else if (type === tt.string) {\n\n            if (extra.jsxAttrValueToken) {\n                extra.jsxAttrValueToken = false;\n                token.type = Token.JSXText;\n            } else {\n                token.type = Token.String;\n            }\n\n            token.value = this._code.slice(token.start, token.end);\n        } else if (type === tt.regexp) {\n            token.type = Token.RegularExpression;\n            const value = token.value;\n\n            token.regex = {\n                flags: value.flags,\n                pattern: value.pattern\n            };\n            token.value = `/${value.pattern}/${value.flags}`;\n        }\n\n        return token;\n    },\n\n    /**\n     * Function to call during Acorn's onToken handler.\n     * @param {AcornToken} token The Acorn token.\n     * @param {Object} extra The Espree extra object.\n     * @returns {void}\n     */\n    onToken(token, extra) {\n\n        const that = this,\n            tt = this._acornTokTypes,\n            tokens = extra.tokens,\n            templateTokens = this._tokens;\n\n        /**\n         * Flushes the buffered template tokens and resets the template\n         * tracking.\n         * @returns {void}\n         * @private\n         */\n        function translateTemplateTokens() {\n            tokens.push(convertTemplatePart(that._tokens, that._code));\n            that._tokens = [];\n        }\n\n        if (token.type === tt.eof) {\n\n            // might be one last curlyBrace\n            if (this._curlyBrace) {\n                tokens.push(this.translate(this._curlyBrace, extra));\n            }\n\n            return;\n        }\n\n        if (token.type === tt.backQuote) {\n\n            // if there's already a curly, it's not part of the template\n            if (this._curlyBrace) {\n                tokens.push(this.translate(this._curlyBrace, extra));\n                this._curlyBrace = null;\n            }\n\n            templateTokens.push(token);\n\n            // it's the end\n            if (templateTokens.length > 1) {\n                translateTemplateTokens();\n            }\n\n            return;\n        }\n        if (token.type === tt.dollarBraceL) {\n            templateTokens.push(token);\n            translateTemplateTokens();\n            return;\n        }\n        if (token.type === tt.braceR) {\n\n            // if there's already a curly, it's not part of the template\n            if (this._curlyBrace) {\n                tokens.push(this.translate(this._curlyBrace, extra));\n            }\n\n            // store new curly for later\n            this._curlyBrace = token;\n            return;\n        }\n        if (token.type === tt.template || token.type === tt.invalidTemplate) {\n            if (this._curlyBrace) {\n                templateTokens.push(this._curlyBrace);\n                this._curlyBrace = null;\n            }\n\n            templateTokens.push(token);\n            return;\n        }\n\n        if (this._curlyBrace) {\n            tokens.push(this.translate(this._curlyBrace, extra));\n            this._curlyBrace = null;\n        }\n\n        tokens.push(this.translate(token, extra));\n    }\n};\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = TokenTranslator;\n","/**\n * @fileoverview A collection of methods for processing Espree's options.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_ECMA_VERSION = 5;\nconst SUPPORTED_VERSIONS = [\n    3,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12\n];\n\n/**\n * Normalize ECMAScript version from the initial config\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @throws {Error} throws an error if the ecmaVersion is invalid.\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersion(ecmaVersion = DEFAULT_ECMA_VERSION) {\n    if (typeof ecmaVersion !== \"number\") {\n        throw new Error(`ecmaVersion must be a number. Received value of type ${typeof ecmaVersion} instead.`);\n    }\n\n    let version = ecmaVersion;\n\n    // Calculate ECMAScript edition number from official year version starting with\n    // ES2015, which corresponds with ES6 (or a difference of 2009).\n    if (version >= 2015) {\n        version -= 2009;\n    }\n\n    if (!SUPPORTED_VERSIONS.includes(version)) {\n        throw new Error(\"Invalid ecmaVersion.\");\n    }\n\n    return version;\n}\n\n/**\n * Normalize sourceType from the initial config\n * @param {string} sourceType to normalize\n * @throws {Error} throw an error if sourceType is invalid\n * @returns {string} normalized sourceType\n */\nfunction normalizeSourceType(sourceType = \"script\") {\n    if (sourceType === \"script\" || sourceType === \"module\") {\n        return sourceType;\n    }\n    throw new Error(\"Invalid sourceType.\");\n}\n\n/**\n * Normalize parserOptions\n * @param {Object} options the parser options to normalize\n * @throws {Error} throw an error if found invalid option.\n * @returns {Object} normalized options\n */\nfunction normalizeOptions(options) {\n    const ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);\n    const sourceType = normalizeSourceType(options.sourceType);\n    const ranges = options.range === true;\n    const locations = options.loc === true;\n\n    if (sourceType === \"module\" && ecmaVersion < 6) {\n        throw new Error(\"sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.\");\n    }\n    return Object.assign({}, options, { ecmaVersion, sourceType, ranges, locations });\n}\n\n/**\n * Get the latest ECMAScript version supported by Espree.\n * @returns {number} The latest ECMAScript version.\n */\nfunction getLatestEcmaVersion() {\n    return SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];\n}\n\n/**\n * Get the list of ECMAScript versions supported by Espree.\n * @returns {number[]} An array containing the supported ECMAScript versions.\n */\nfunction getSupportedEcmaVersions() {\n    return [...SUPPORTED_VERSIONS];\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    normalizeOptions,\n    getLatestEcmaVersion,\n    getSupportedEcmaVersions\n};\n","/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*jslint vars:false, bitwise:true*/\n/*jshint indent:4*/\n/*global exports:true*/\n(function clone(exports) {\n    'use strict';\n\n    var Syntax,\n        VisitorOption,\n        VisitorKeys,\n        BREAK,\n        SKIP,\n        REMOVE;\n\n    function deepCopy(obj) {\n        var ret = {}, key, val;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                val = obj[key];\n                if (typeof val === 'object' && val !== null) {\n                    ret[key] = deepCopy(val);\n                } else {\n                    ret[key] = val;\n                }\n            }\n        }\n        return ret;\n    }\n\n    // based on LLVM libc++ upper_bound / lower_bound\n    // MIT License\n\n    function upperBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                len = diff;\n            } else {\n                i = current + 1;\n                len -= diff + 1;\n            }\n        }\n        return i;\n    }\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportExpression: 'ImportExpression',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        ModuleSpecifier: 'ModuleSpecifier',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    VisitorKeys = {\n        AssignmentExpression: ['left', 'right'],\n        AssignmentPattern: ['left', 'right'],\n        ArrayExpression: ['elements'],\n        ArrayPattern: ['elements'],\n        ArrowFunctionExpression: ['params', 'body'],\n        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.\n        BlockStatement: ['body'],\n        BinaryExpression: ['left', 'right'],\n        BreakStatement: ['label'],\n        CallExpression: ['callee', 'arguments'],\n        CatchClause: ['param', 'body'],\n        ClassBody: ['body'],\n        ClassDeclaration: ['id', 'superClass', 'body'],\n        ClassExpression: ['id', 'superClass', 'body'],\n        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\n        ContinueStatement: ['label'],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: ['body', 'test'],\n        EmptyStatement: [],\n        ExportAllDeclaration: ['source'],\n        ExportDefaultDeclaration: ['declaration'],\n        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\n        ExportSpecifier: ['exported', 'local'],\n        ExpressionStatement: ['expression'],\n        ForStatement: ['init', 'test', 'update', 'body'],\n        ForInStatement: ['left', 'right', 'body'],\n        ForOfStatement: ['left', 'right', 'body'],\n        FunctionDeclaration: ['id', 'params', 'body'],\n        FunctionExpression: ['id', 'params', 'body'],\n        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        Identifier: [],\n        IfStatement: ['test', 'consequent', 'alternate'],\n        ImportExpression: ['source'],\n        ImportDeclaration: ['specifiers', 'source'],\n        ImportDefaultSpecifier: ['local'],\n        ImportNamespaceSpecifier: ['local'],\n        ImportSpecifier: ['imported', 'local'],\n        Literal: [],\n        LabeledStatement: ['label', 'body'],\n        LogicalExpression: ['left', 'right'],\n        MemberExpression: ['object', 'property'],\n        MetaProperty: ['meta', 'property'],\n        MethodDefinition: ['key', 'value'],\n        ModuleSpecifier: [],\n        NewExpression: ['callee', 'arguments'],\n        ObjectExpression: ['properties'],\n        ObjectPattern: ['properties'],\n        Program: ['body'],\n        Property: ['key', 'value'],\n        RestElement: [ 'argument' ],\n        ReturnStatement: ['argument'],\n        SequenceExpression: ['expressions'],\n        SpreadElement: ['argument'],\n        Super: [],\n        SwitchStatement: ['discriminant', 'cases'],\n        SwitchCase: ['test', 'consequent'],\n        TaggedTemplateExpression: ['tag', 'quasi'],\n        TemplateElement: [],\n        TemplateLiteral: ['quasis', 'expressions'],\n        ThisExpression: [],\n        ThrowStatement: ['argument'],\n        TryStatement: ['block', 'handler', 'finalizer'],\n        UnaryExpression: ['argument'],\n        UpdateExpression: ['argument'],\n        VariableDeclaration: ['declarations'],\n        VariableDeclarator: ['id', 'init'],\n        WhileStatement: ['test', 'body'],\n        WithStatement: ['object', 'body'],\n        YieldExpression: ['argument']\n    };\n\n    // unique id\n    BREAK = {};\n    SKIP = {};\n    REMOVE = {};\n\n    VisitorOption = {\n        Break: BREAK,\n        Skip: SKIP,\n        Remove: REMOVE\n    };\n\n    function Reference(parent, key) {\n        this.parent = parent;\n        this.key = key;\n    }\n\n    Reference.prototype.replace = function replace(node) {\n        this.parent[this.key] = node;\n    };\n\n    Reference.prototype.remove = function remove() {\n        if (Array.isArray(this.parent)) {\n            this.parent.splice(this.key, 1);\n            return true;\n        } else {\n            this.replace(null);\n            return false;\n        }\n    };\n\n    function Element(node, path, wrap, ref) {\n        this.node = node;\n        this.path = path;\n        this.wrap = wrap;\n        this.ref = ref;\n    }\n\n    function Controller() { }\n\n    // API:\n    // return property path array from root to current node\n    Controller.prototype.path = function path() {\n        var i, iz, j, jz, result, element;\n\n        function addToPath(result, path) {\n            if (Array.isArray(path)) {\n                for (j = 0, jz = path.length; j < jz; ++j) {\n                    result.push(path[j]);\n                }\n            } else {\n                result.push(path);\n            }\n        }\n\n        // root node\n        if (!this.__current.path) {\n            return null;\n        }\n\n        // first node is sentinel, second node is root element\n        result = [];\n        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n            element = this.__leavelist[i];\n            addToPath(result, element.path);\n        }\n        addToPath(result, this.__current.path);\n        return result;\n    };\n\n    // API:\n    // return type of current node\n    Controller.prototype.type = function () {\n        var node = this.current();\n        return node.type || this.__current.wrap;\n    };\n\n    // API:\n    // return array of parent elements\n    Controller.prototype.parents = function parents() {\n        var i, iz, result;\n\n        // first node is sentinel\n        result = [];\n        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n            result.push(this.__leavelist[i].node);\n        }\n\n        return result;\n    };\n\n    // API:\n    // return current node\n    Controller.prototype.current = function current() {\n        return this.__current.node;\n    };\n\n    Controller.prototype.__execute = function __execute(callback, element) {\n        var previous, result;\n\n        result = undefined;\n\n        previous  = this.__current;\n        this.__current = element;\n        this.__state = null;\n        if (callback) {\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n        }\n        this.__current = previous;\n\n        return result;\n    };\n\n    // API:\n    // notify control skip / break\n    Controller.prototype.notify = function notify(flag) {\n        this.__state = flag;\n    };\n\n    // API:\n    // skip child nodes of current node\n    Controller.prototype.skip = function () {\n        this.notify(SKIP);\n    };\n\n    // API:\n    // break traversals\n    Controller.prototype['break'] = function () {\n        this.notify(BREAK);\n    };\n\n    // API:\n    // remove node\n    Controller.prototype.remove = function () {\n        this.notify(REMOVE);\n    };\n\n    Controller.prototype.__initialize = function(root, visitor) {\n        this.visitor = visitor;\n        this.root = root;\n        this.__worklist = [];\n        this.__leavelist = [];\n        this.__current = null;\n        this.__state = null;\n        this.__fallback = null;\n        if (visitor.fallback === 'iteration') {\n            this.__fallback = Object.keys;\n        } else if (typeof visitor.fallback === 'function') {\n            this.__fallback = visitor.fallback;\n        }\n\n        this.__keys = VisitorKeys;\n        if (visitor.keys) {\n            this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\n        }\n    };\n\n    function isNode(node) {\n        if (node == null) {\n            return false;\n        }\n        return typeof node === 'object' && typeof node.type === 'string';\n    }\n\n    function isProperty(nodeType, key) {\n        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\n    }\n\n    Controller.prototype.traverse = function traverse(root, visitor) {\n        var worklist,\n            leavelist,\n            element,\n            node,\n            nodeType,\n            ret,\n            key,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel;\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        worklist.push(new Element(root, null, null, null));\n        leavelist.push(new Element(null, null, null, null));\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                ret = this.__execute(visitor.leave, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n                continue;\n            }\n\n            if (element.node) {\n\n                ret = this.__execute(visitor.enter, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n\n                worklist.push(sentinel);\n                leavelist.push(element);\n\n                if (this.__state === SKIP || ret === SKIP) {\n                    continue;\n                }\n\n                node = element.node;\n                nodeType = node.type || element.wrap;\n                candidates = this.__keys[nodeType];\n                if (!candidates) {\n                    if (this.__fallback) {\n                        candidates = this.__fallback(node);\n                    } else {\n                        throw new Error('Unknown node type ' + nodeType + '.');\n                    }\n                }\n\n                current = candidates.length;\n                while ((current -= 1) >= 0) {\n                    key = candidates[current];\n                    candidate = node[key];\n                    if (!candidate) {\n                        continue;\n                    }\n\n                    if (Array.isArray(candidate)) {\n                        current2 = candidate.length;\n                        while ((current2 -= 1) >= 0) {\n                            if (!candidate[current2]) {\n                                continue;\n                            }\n                            if (isProperty(nodeType, candidates[current])) {\n                                element = new Element(candidate[current2], [key, current2], 'Property', null);\n                            } else if (isNode(candidate[current2])) {\n                                element = new Element(candidate[current2], [key, current2], null, null);\n                            } else {\n                                continue;\n                            }\n                            worklist.push(element);\n                        }\n                    } else if (isNode(candidate)) {\n                        worklist.push(new Element(candidate, key, null, null));\n                    }\n                }\n            }\n        }\n    };\n\n    Controller.prototype.replace = function replace(root, visitor) {\n        var worklist,\n            leavelist,\n            node,\n            nodeType,\n            target,\n            element,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel,\n            outer,\n            key;\n\n        function removeElem(element) {\n            var i,\n                key,\n                nextElem,\n                parent;\n\n            if (element.ref.remove()) {\n                // When the reference is an element of an array.\n                key = element.ref.key;\n                parent = element.ref.parent;\n\n                // If removed from array, then decrease following items' keys.\n                i = worklist.length;\n                while (i--) {\n                    nextElem = worklist[i];\n                    if (nextElem.ref && nextElem.ref.parent === parent) {\n                        if  (nextElem.ref.key < key) {\n                            break;\n                        }\n                        --nextElem.ref.key;\n                    }\n                }\n            }\n        }\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        outer = {\n            root: root\n        };\n        element = new Element(root, null, null, new Reference(outer, 'root'));\n        worklist.push(element);\n        leavelist.push(element);\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                target = this.__execute(visitor.leave, element);\n\n                // node may be replaced with null,\n                // so distinguish between undefined and null in this place\n                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                    // replace\n                    element.ref.replace(target);\n                }\n\n                if (this.__state === REMOVE || target === REMOVE) {\n                    removeElem(element);\n                }\n\n                if (this.__state === BREAK || target === BREAK) {\n                    return outer.root;\n                }\n                continue;\n            }\n\n            target = this.__execute(visitor.enter, element);\n\n            // node may be replaced with null,\n            // so distinguish between undefined and null in this place\n            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\n                // replace\n                element.ref.replace(target);\n                element.node = target;\n            }\n\n            if (this.__state === REMOVE || target === REMOVE) {\n                removeElem(element);\n                element.node = null;\n            }\n\n            if (this.__state === BREAK || target === BREAK) {\n                return outer.root;\n            }\n\n            // node may be null\n            node = element.node;\n            if (!node) {\n                continue;\n            }\n\n            worklist.push(sentinel);\n            leavelist.push(element);\n\n            if (this.__state === SKIP || target === SKIP) {\n                continue;\n            }\n\n            nodeType = node.type || element.wrap;\n            candidates = this.__keys[nodeType];\n            if (!candidates) {\n                if (this.__fallback) {\n                    candidates = this.__fallback(node);\n                } else {\n                    throw new Error('Unknown node type ' + nodeType + '.');\n                }\n            }\n\n            current = candidates.length;\n            while ((current -= 1) >= 0) {\n                key = candidates[current];\n                candidate = node[key];\n                if (!candidate) {\n                    continue;\n                }\n\n                if (Array.isArray(candidate)) {\n                    current2 = candidate.length;\n                    while ((current2 -= 1) >= 0) {\n                        if (!candidate[current2]) {\n                            continue;\n                        }\n                        if (isProperty(nodeType, candidates[current])) {\n                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\n                        } else if (isNode(candidate[current2])) {\n                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\n                        } else {\n                            continue;\n                        }\n                        worklist.push(element);\n                    }\n                } else if (isNode(candidate)) {\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n                }\n            }\n        }\n\n        return outer.root;\n    };\n\n    function traverse(root, visitor) {\n        var controller = new Controller();\n        return controller.traverse(root, visitor);\n    }\n\n    function replace(root, visitor) {\n        var controller = new Controller();\n        return controller.replace(root, visitor);\n    }\n\n    function extendCommentRange(comment, tokens) {\n        var target;\n\n        target = upperBound(tokens, function search(token) {\n            return token.range[0] > comment.range[0];\n        });\n\n        comment.extendedRange = [comment.range[0], comment.range[1]];\n\n        if (target !== tokens.length) {\n            comment.extendedRange[1] = tokens[target].range[0];\n        }\n\n        target -= 1;\n        if (target >= 0) {\n            comment.extendedRange[0] = tokens[target].range[1];\n        }\n\n        return comment;\n    }\n\n    function attachComments(tree, providedComments, tokens) {\n        // At first, we should calculate extended comment ranges.\n        var comments = [], comment, len, i, cursor;\n\n        if (!tree.range) {\n            throw new Error('attachComments needs range information');\n        }\n\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\n        if (!tokens.length) {\n            if (providedComments.length) {\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\n                    comment = deepCopy(providedComments[i]);\n                    comment.extendedRange = [0, tree.range[0]];\n                    comments.push(comment);\n                }\n                tree.leadingComments = comments;\n            }\n            return tree;\n        }\n\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n        }\n\n        // This is based on John Freeman's implementation.\n        cursor = 0;\n        traverse(tree, {\n            enter: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (comment.extendedRange[1] > node.range[0]) {\n                        break;\n                    }\n\n                    if (comment.extendedRange[1] === node.range[0]) {\n                        if (!node.leadingComments) {\n                            node.leadingComments = [];\n                        }\n                        node.leadingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        cursor = 0;\n        traverse(tree, {\n            leave: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (node.range[1] < comment.extendedRange[0]) {\n                        break;\n                    }\n\n                    if (node.range[1] === comment.extendedRange[0]) {\n                        if (!node.trailingComments) {\n                            node.trailingComments = [];\n                        }\n                        node.trailingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        return tree;\n    }\n\n    exports.version = require('./package.json').version;\n    exports.Syntax = Syntax;\n    exports.traverse = traverse;\n    exports.replace = replace;\n    exports.attachComments = attachComments;\n    exports.VisitorKeys = VisitorKeys;\n    exports.VisitorOption = VisitorOption;\n    exports.Controller = Controller;\n    exports.cloneEnvironment = function () { return clone({}); };\n\n    return exports;\n}(exports));\n/* vim: set sw=4 ts=4 et tw=80 : */\n","// This file is autogenerated. Do not modify manually\nmodule.exports = [\n    'add',\n    'addBack',\n    'addClass',\n    'after',\n    'ajax',\n    'ajaxComplete',\n    'ajaxError',\n    'ajaxPrefilter',\n    'ajaxSend',\n    'ajaxSetup',\n    'ajaxStart',\n    'ajaxStop',\n    'ajaxSuccess',\n    'ajaxTransport',\n    'animate',\n    'append',\n    'appendTo',\n    'attr',\n    'attr',\n    'before',\n    'bind',\n    'blur',\n    'camelCase',\n    'change',\n    'children',\n    'cleanData',\n    'clearQueue',\n    'click',\n    'clone',\n    'clone',\n    'closest',\n    'constructor',\n    'contains',\n    'contents',\n    'contextmenu',\n    'css',\n    'css',\n    'data',\n    'data',\n    'dblclick',\n    'delay',\n    'delegate',\n    'dequeue',\n    'dequeue',\n    'detach',\n    'each',\n    'each',\n    'empty',\n    'end',\n    'eq',\n    'error',\n    'escapeSelector',\n    'even',\n    'extend',\n    'extend',\n    'fadeIn',\n    'fadeOut',\n    'fadeTo',\n    'fadeToggle',\n    'filter',\n    'filter',\n    'find',\n    'find',\n    'finish',\n    'first',\n    'focus',\n    'focusin',\n    'focusout',\n    'fx',\n    'get',\n    'get',\n    'getJSON',\n    'getScript',\n    'globalEval',\n    'grep',\n    'has',\n    'hasClass',\n    'hasData',\n    'height',\n    'hide',\n    'holdReady',\n    'hover',\n    'html',\n    'htmlPrefilter',\n    'inArray',\n    'index',\n    'init',\n    'innerHeight',\n    'innerWidth',\n    'insertAfter',\n    'insertBefore',\n    'is',\n    'isArray',\n    'isEmptyObject',\n    'isFunction',\n    'isNumeric',\n    'isPlainObject',\n    'isWindow',\n    'isXMLDoc',\n    'keydown',\n    'keypress',\n    'keyup',\n    'last',\n    'load',\n    'makeArray',\n    'map',\n    'map',\n    'merge',\n    'mousedown',\n    'mouseenter',\n    'mouseleave',\n    'mousemove',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'next',\n    'nextAll',\n    'nextUntil',\n    'noConflict',\n    'nodeName',\n    'noop',\n    'not',\n    'now',\n    'odd',\n    'off',\n    'offset',\n    'offsetParent',\n    'on',\n    'one',\n    'outerHeight',\n    'outerWidth',\n    'param',\n    'parent',\n    'parents',\n    'parentsUntil',\n    'parseHTML',\n    'parseJSON',\n    'parseXML',\n    'position',\n    'post',\n    'prepend',\n    'prependTo',\n    'prev',\n    'prevAll',\n    'prevUntil',\n    'promise',\n    'prop',\n    'prop',\n    'proxy',\n    'push',\n    'pushStack',\n    'queue',\n    'queue',\n    'ready',\n    'ready',\n    'readyException',\n    'remove',\n    'removeAttr',\n    'removeAttr',\n    'removeClass',\n    'removeData',\n    'removeData',\n    'removeEvent',\n    'removeProp',\n    'replaceAll',\n    'replaceWith',\n    'resize',\n    'scroll',\n    'scrollLeft',\n    'scrollTop',\n    'select',\n    'serialize',\n    'serializeArray',\n    'show',\n    'siblings',\n    'slice',\n    'slideDown',\n    'slideToggle',\n    'slideUp',\n    'sort',\n    'speed',\n    'splice',\n    'stop',\n    'style',\n    'submit',\n    'text',\n    'text',\n    'toArray',\n    'toggle',\n    'toggleClass',\n    'trigger',\n    'triggerHandler',\n    'trim',\n    'type',\n    'unbind',\n    'undelegate',\n    'unique',\n    'uniqueSort',\n    'unwrap',\n    'val',\n    'when',\n    'width',\n    'wrap',\n    'wrapAll',\n    'wrapInner',\n];\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","obj","$5399481c73497d3e$export$98e6a39c04603d36","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$75c0594ce600fdb1$var$asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","$75c0594ce600fdb1$export$7c398597f8905a1","fn","args","arguments","apply","undefined","$a15204915df1105f$export$5f0017c582d45a2d","Symbol","constructor","$ee049cf5886b856c$export$67ebef60e6f28a6","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","iterator","step","op","TypeError","pop","length","push","$8b5bb24d71b8b210$export$56b48cc5d7560ffb","$8b5bb24d71b8b210$export$332f4d7bee38db93","$8b5bb24d71b8b210$export$f435f793048e7a0f","$8b5bb24d71b8b210$export$d53f8326294b31d8","$8b5bb24d71b8b210$export$b54c7ea7aabba5c8","$8b5bb24d71b8b210$export$a1aa2dd4ad0d3f6","$8b5bb24d71b8b210$export$866e20207bbc41f2","$8b5bb24d71b8b210$export$2c19a3e3b4008fff","$8b5bb24d71b8b210$export$268622f0f1cbc82b","$8b5bb24d71b8b210$export$13807d9ee5a34a42","$8b5bb24d71b8b210$export$7387db7caf96fcdb","$8b5bb24d71b8b210$export$7af82191547c5ff7","$8b5bb24d71b8b210$export$ba43bf67f3d48107","$8b5bb24d71b8b210$export$7acfa6ed01010e37","$8b5bb24d71b8b210$export$85c928794f8d04d4","$8b5bb24d71b8b210$export$68e7b4c4d99215d9","$8b5bb24d71b8b210$export$2b5f701edfbd6f00","$8b5bb24d71b8b210$export$50792b0e93539fde","$8b5bb24d71b8b210$export$83d89fbfd8236492","$8b5bb24d71b8b210$export$98e6a39c04603d36","$8b5bb24d71b8b210$export$61f24eb03dd7ce92","$8b5bb24d71b8b210$export$5f8c09e3ae6f64e1","$8b5bb24d71b8b210$var$reservedWords","strict","strictBind","$8b5bb24d71b8b210$var$ecma5AndLessKeywords","$8b5bb24d71b8b210$var$keywords","$8b5bb24d71b8b210$var$keywordRelationalOperator","$8b5bb24d71b8b210$var$nonASCIIidentifierStartChars","$8b5bb24d71b8b210$var$nonASCIIidentifierChars","$8b5bb24d71b8b210$var$nonASCIIidentifierStart","RegExp","$8b5bb24d71b8b210$var$nonASCIIidentifier","$8b5bb24d71b8b210$var$astralIdentifierStartCodes","$8b5bb24d71b8b210$var$astralIdentifierCodes","$8b5bb24d71b8b210$var$isInAstralSet","pos","i","astral","test","String","fromCharCode","conf","keyword","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","binop","updateContext","$8b5bb24d71b8b210$var$binop","name","prec","$8b5bb24d71b8b210$var$beforeExpr","$8b5bb24d71b8b210$var$startsExpr","$8b5bb24d71b8b210$var$kw","options","num","regexp","string","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","questionDot","arrow","template","invalidTemplate","ellipsis","backQuote","dollarBraceL","eq","assign","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","coalesce","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","source","ecma2019String","$8b5bb24d71b8b210$var$skipWhiteSpace","$8b5bb24d71b8b210$var$ref","prototype","$8b5bb24d71b8b210$var$hasOwnProperty","hasOwnProperty","$8b5bb24d71b8b210$var$toString","toString","$8b5bb24d71b8b210$var$has","propName","$8b5bb24d71b8b210$var$isArray","Array","isArray","$8b5bb24d71b8b210$var$wordsRegexp","words","replace","line","col","column","offset","p","start","end","sourceFile","input","cur","lastIndex","match","exec","index","ecmaVersion","sourceType","onInsertedSemicolon","onTrailingComma","allowReserved","allowReturnOutsideFunction","allowImportExportEverywhere","allowAwaitOutsideFunction","allowHashBang","locations","onToken","onComment","ranges","program","directSourceFile","preserveParens","$8b5bb24d71b8b210$var$functionFlags","async","generator","$8b5bb24d71b8b210$var$SCOPE_FUNCTION","startPos","$8b5bb24d71b8b210$var$getOptions","opts","array","opt","tokens","token","block","text","startLoc","endLoc","comment","type","loc","range","keywords","reserved","reservedWords","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","lineStart","lastIndexOf","curLine","slice","split","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","context","initialContext","exprAllowed","inModule","strictDirective","potentialArrowAt","yieldPos","awaitPos","awaitIdentPos","labels","undefinedExports","skipLineComment","scopeStack","enterScope","regexpState","$8b5bb24d71b8b210$var$prototypeAccessors","inFunction","inGenerator","inAsync","allowSuper","allowDirectSuper","treatFunctionsAsVar","parse","node","startNode","nextToken","parseTopLevel","currentVarScope","flags","currentThisScope","treatFunctionsAsVarInScope","currentScope","inNonArrowFunction","extend","plugins","len","cls","parseExpressionAt","parser","parseExpression","tokenizer","defineProperties","$8b5bb24d71b8b210$var$pp","$8b5bb24d71b8b210$var$literal","$8b5bb24d71b8b210$var$DestructuringErrors","shorthandAssign","trailingComma","parenthesizedAssign","parenthesizedBind","doubleProto","spaceAfter","charAt","eat","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","notNext","expect","raise","checkPatternErrors","refDestructuringErrors","raiseRecoverable","parens","checkExpressionErrors","andThrow","checkYieldAwaitInDefaultParams","isSimpleAssignTarget","expr","expression","$8b5bb24d71b8b210$var$pp$1","stmt","parseStatement","list","keys","adaptDirectivePrologue","finishNode","$8b5bb24d71b8b210$var$loopLabel","kind","$8b5bb24d71b8b210$var$switchLabel","isLet","skip","nextCh","charCodeAt","ident","isAsyncFunction","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseExpressionStatement","parseImport","parseExport","maybeName","parseLabeledStatement","isBreak","parseIdent","lab","parseParenExpression","awaitAt","parseFor","init$1","parseVar","declarations","await","parseForIn","toAssignable","checkLVal","isAsync","declarationPosition","parseFunction","$8b5bb24d71b8b210$var$FUNC_STATEMENT","$8b5bb24d71b8b210$var$FUNC_HANGING_STATEMENT","consequent","alternate","argument","discriminant","cases","sawDefault","isCase","exitScope","$8b5bb24d71b8b210$var$empty","handler","clause","param","parseBindingAtom","simple","finalizer","object","i$1","label$1","statementStart","indexOf","createNewLexicalScope","exitStrict","update","isForIn","left","right","parseMaybeAssign","isFor","decl","parseVarId","statement","allowExpressionBody","initFunction","oldYieldPos","oldAwaitPos","oldAwaitIdentPos","parseFunctionParams","parseFunctionBody","params","parseBindingList","isStatement","oldStrict","parseClassId","parseClassSuper","classBody","hadConstructor","element","parseClassElement","superClass","constructorAllowsSuper","this$1","method","tryContextual","k","noLineBreak","computed","startNodeAt","static","isGenerator","parsePropertyName","allowsDirectSuper","parseClassMethod","parseMethod","parseExprSubscripts","exported","checkExport","parseExprAtom","fNode","declaration","cNode","shouldParseExportStatement","checkVariableExport","specifiers","parseExportSpecifiers","spec","checkUnreserved","local","checkLocalExport","checkPatternExport","pat","properties","prop","list$1","elements","elt","decls","nodes","first","parseImportSpecifiers","node$1","node$2","imported","statements","isDirectiveCandidate","directive","raw","$8b5bb24d71b8b210$var$pp$2","isBinding","toAssignableList","operator","exprList","last","parseSpread","parseRestBinding","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","bindingType","checkClashes","declareName","$8b5bb24d71b8b210$var$pp$3","checkPropClash","propHash","shorthand","proto","other","noIn","expressions","afterLeftParse","parseYield","ownDestructuringErrors","oldParenAssign","oldTrailingComma","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","buildBinary","sawUnary","parseAwait","result","parseSubscripts","base","noCalls","maybeAsyncArrow","optionalChained","parseSubscript","optional","chainNode","optionalSupported","property","parseExprList","parseArrowExpression","callee","tag","quasi","parseTemplate","isTagged","readRegexp","canBeArrow","parseLiteral","regex","pattern","parseParenAndDistinguishExpression","parseNew","parseExprImport","meta","parseDynamicImport","parseImportMeta","errorPos","bigint","val","spreadStart","innerStartPos","innerStartLoc","lastIsComma","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","par","item","$8b5bb24d71b8b210$var$empty$1","isImport","parseTemplateElement","ref","cooked","tail","curElt","quasis","isAsyncProp","isPattern","parseProperty","parsePropertyValue","paramCount","isArrowFunction","isMethod","isExpression","useStrict","checkParams","nonSimple","isSimpleParamList","oldLabels","allowDuplicates","nameHash","re","liberal","delegate","$8b5bb24d71b8b210$var$pp$4","message","SyntaxError","raisedAt","$8b5bb24d71b8b210$var$pp$5","$8b5bb24d71b8b210$var$Scope","var","lexical","functions","scope","redeclared","scope$1","scope$2","scope$3","$8b5bb24d71b8b210$var$SCOPE_TOP","$8b5bb24d71b8b210$var$pp$6","$8b5bb24d71b8b210$var$finishNodeAt","isExpr","preserveSpace","override","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","tryReadTemplateToken","f_stat","f_expr","f_expr_gen","f_gen","$8b5bb24d71b8b210$var$pp$7","braceIsBlock","prevType","parent","curContext","inGeneratorContext","out","statementParens","allowed","$8b5bb24d71b8b210$var$ecma9BinaryProperties","$8b5bb24d71b8b210$var$ecma10BinaryProperties","$8b5bb24d71b8b210$var$unicodeBinaryProperties","$8b5bb24d71b8b210$var$unicodeGeneralCategoryValues","$8b5bb24d71b8b210$var$ecma9ScriptValues","$8b5bb24d71b8b210$var$ecma10ScriptValues","$8b5bb24d71b8b210$var$unicodeScriptValues","$8b5bb24d71b8b210$var$data","$8b5bb24d71b8b210$var$buildUnicodeData","d","binary","nonBinary","General_Category","Script","Script_Extensions","gc","sc","scx","$8b5bb24d71b8b210$var$pp$8","$8b5bb24d71b8b210$var$RegExpValidationState","validFlags","unicodeProperties","switchU","switchN","lastIntValue","lastStringValue","lastAssertionIsQuantifiable","numCapturingParens","maxBackReference","groupNames","backReferenceNames","$8b5bb24d71b8b210$var$codePointToString","ch","$8b5bb24d71b8b210$var$isSyntaxCharacter","$8b5bb24d71b8b210$var$isControlLetter","$8b5bb24d71b8b210$var$isUnicodePropertyNameCharacter","$8b5bb24d71b8b210$var$isDecimalDigit","$8b5bb24d71b8b210$var$isHexDigit","$8b5bb24d71b8b210$var$hexToInt","$8b5bb24d71b8b210$var$isOctalDigit","reset","unicode","at","forceU","l","c","nextIndex","current","lookahead","advance","validateRegExpFlags","state","flag","validateRegExpPattern","regexp_pattern","regexp_disjunction","regexp_alternative","regexp_eatQuantifier","regexp_eatTerm","regexp_eatAssertion","regexp_eatAtom","regexp_eatExtendedAtom","lookbehind","noError","regexp_eatQuantifierPrefix","regexp_eatBracedQuantifier","min","max","regexp_eatDecimalDigits","regexp_eatPatternCharacters","regexp_eatReverseSolidusAtomEscape","regexp_eatCharacterClass","regexp_eatUncapturingGroup","regexp_eatCapturingGroup","regexp_eatAtomEscape","regexp_groupSpecifier","regexp_eatInvalidBracedQuantifier","regexp_eatExtendedPatternCharacter","regexp_eatSyntaxCharacter","regexp_eatGroupName","regexp_eatRegExpIdentifierName","regexp_eatRegExpIdentifierStart","regexp_eatRegExpIdentifierPart","regexp_eatRegExpUnicodeEscapeSequence","regexp_eatBackReference","regexp_eatCharacterClassEscape","regexp_eatCharacterEscape","regexp_eatKGroupName","regexp_eatDecimalEscape","regexp_eatControlEscape","regexp_eatCControlLetter","regexp_eatZero","regexp_eatHexEscapeSequence","regexp_eatLegacyOctalEscapeSequence","regexp_eatIdentityEscape","regexp_eatControlLetter","regexp_eatFixedHexDigits","lead","leadSurrogateEnd","trail","regexp_eatHexDigits","regexp_eatUnicodePropertyValueExpression","regexp_eatUnicodePropertyName","regexp_eatUnicodePropertyValue","regexp_validateUnicodePropertyNameAndValue","regexp_eatLoneUnicodePropertyNameOrValue","nameOrValue","regexp_validateUnicodePropertyNameOrValue","regexp_classRanges","regexp_eatClassAtom","regexp_eatClassEscape","ch$1","regexp_eatClassControlLetter","regexp_eatOctalDigit","n1","n2","$8b5bb24d71b8b210$var$pp$9","$8b5bb24d71b8b210$var$stringToBigInt","str","BigInt","$8b5bb24d71b8b210$var$codePointToString$1","ignoreEscapeSequenceInKeyword","getToken","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","loop","readToken_dot","readNumber","next2","readToken_slash","finishOp","readToken_mult_modulo_exp","size","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readToken_question","next2$1","readRadixNumber","readString","escaped","inClass","flagsStart","readWord1","readInt","radix","maybeLegacyOctalNumericLiteral","allowSeparators","isLegacyOctalNumericLiteral","total","lastCode","Infinity","startsWithDot","octal","val$1","parseInt","parseFloat","readCodePoint","codePos","readHexChar","invalidStringToken","quote","chunkStart","readEscapedChar","$8b5bb24d71b8b210$var$INVALID_TEMPLATE_ESCAPE_ERROR","inTemplateElement","readTmplToken","readInvalidTemplateToken","position","inTemplate","octalStr","substr","word","escStart","esc","acorn","Parser","version","defaultOptions","Position","SourceLocation","getLineInfo","Node","TokenType","tokTypes","keywordTypes","TokContext","tokContexts","isIdentifierChar","isIdentifierStart","Token","isNewLine","lineBreak","lineBreakG","nonASCIIwhitespace","JSON","$jkWpo","$7604264f734e6b52$var$NODE_TYPES","freeze","$7604264f734e6b52$var$_iteratorNormalCompletion","$7604264f734e6b52$var$_didIteratorError","$7604264f734e6b52$var$_iteratorError","$7604264f734e6b52$var$_step","$7604264f734e6b52$var$_iterator","$7604264f734e6b52$var$type","return","$7604264f734e6b52$var$KEY_BLACKLIST","Set","$7604264f734e6b52$var$filterKey","has","KEYS","getKeys","filter","unionWith","additionalKeys","retv","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","add","from","SuppressedError","$931db40849221e61$var$_vanillaJsMethods","__esModule","default","$a1963888dea0535a$exports","$a18b1d92dfa72a30$export$79e617b1955a2616","arr","arr2","$8eca4436e0cdcde8$export$1b5e630bc3aea29f","iter","o","minLen","$8NOO4","$cac1ccf25e6b09cc$exports","$658af1356526cabb$export$2996f80ef42b8419","instance","Constructor","$ee5d5e6879509c9c$var$_defineProperties","target","props","descriptor","writable","$ee5d5e6879509c9c$export$d60067ff2358eee8","protoProps","staticProps","$678156a147e80dcd$export$f09211a7d3c496a1","setPrototypeOf","getPrototypeOf","__proto__","$701e72a23173aba5$export$afb3516d9d608401","receiver","Reflect","desc","getOwnPropertyDescriptor","$e37950b1393d50f0$export$c2c98ac76e997b63","$62d828457c3ee45d$export$7e4530ad35d3bb8","subClass","create","$a50710ff550e008d$export$8dd05c13f5255580","Derived","hasNativeReflectConstruct","construct","sham","Proxy","Boolean","valueOf","Super","ReferenceError","$41add75b6298aa1c$exports","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","$cac1ccf25e6b09cc$var$hexNumber","$cac1ccf25e6b09cc$var$decimalNumber","$cac1ccf25e6b09cc$var$acornJsxMap","WeakMap","$cac1ccf25e6b09cc$var$getJsxTokens","acornJsx","tt","tc_oTag","tc_cTag","tc_expr","jsxName","jsxText","jsxTagStart","jsxTagEnd","$cac1ccf25e6b09cc$var$getQualifiedJSXName","namespace","tok","allowNamespaces","allowNamespacedObjects","jsx_readEntity","jsx_readNewLine","normalizeCRLF","entity","count","jsx_parseIdentifier","jsx_parseNamespacedName","newNode","jsx_parseExpressionContainer","jsx_parseEmptyExpression","jsx_parseAttributeValue","attributes","nodeName","jsx_parseElementName","jsx_parseAttribute","selfClosing","children","openingElement","jsx_parseOpeningElementAt","closingElement","contents","jsx_parseClosingElementAt","jsx_parseElementAt","fragmentOrElement","refShortHandDefaultPos","jsx_parseText","jsx_parseElement","jsx_readToken","jsx_readWord","jsx_readString","$2ad2af9d0a7c0bd9$exports","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BlockStatement","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExpressionStatement","ForStatement","ForInStatement","ForOfStatement","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","NewExpression","ObjectExpression","ObjectPattern","Program","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","JSXIdentifier","JSXNamespacedName","JSXMemberExpression","JSXEmptyExpression","JSXExpressionContainer","JSXElement","JSXClosingElement","JSXOpeningElement","JSXAttribute","JSXSpreadAttribute","JSXText","ExportDefaultDeclaration","ExportNamedDeclaration","ExportAllDeclaration","ExportSpecifier","ImportDeclaration","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","$c367f24a2f998695$exports","$9501182f9803c280$exports","$9501182f9803c280$var$Token","Keyword","Null","Numeric","Punctuator","RegularExpression","Template","$9501182f9803c280$var$TokenTranslator","acornTokTypes","_acornTokTypes","_tokens","_curlyBrace","_code","translate","extra","jsxAttrValueToken","concat","that","templateTokens","translateTemplateTokens","firstToken","lastTemplateToken","$f32cf6d90a2ce49c$exports","$f32cf6d90a2ce49c$var$SUPPORTED_VERSIONS","$c367f24a2f998695$require$normalizeOptions","normalizeOptions","$f32cf6d90a2ce49c$var$normalizeEcmaVersion","includes","$f32cf6d90a2ce49c$var$normalizeSourceType","getLatestEcmaVersion","getSupportedEcmaVersions","$c367f24a2f998695$var$STATE","$c367f24a2f998695$var$ESPRIMA_FINISH_NODE","Parser1","Espree","ecmaFeatures","tokenTranslator","globalReturn","lastToken","comments","impliedStrict","_$_get","_len","_key","lineNumber","terminalDollarBraceL","$5399481c73497d3e$var$getLatestEcmaVersion","$5399481c73497d3e$var$getSupportedEcmaVersions","$5399481c73497d3e$var$parsers","_regular","_jsx","regular","jsx","useJsx","types","$750d4cdc3eb62b07$exports","clone","exports1","Syntax","VisitorOption","VisitorKeys","BREAK","SKIP","REMOVE","deepCopy","ret","Reference","Element","path","wrap","Controller","isNode","isProperty","nodeType","traverse","root","visitor","controller","ComprehensionBlock","ComprehensionExpression","DirectiveStatement","GeneratorExpression","ImportExpression","ModuleSpecifier","Break","Skip","Remove","remove","splice","iz","j","jz","addToPath","__current","__leavelist","parents","__execute","callback","previous","__state","notify","__initialize","__worklist","__fallback","fallback","__keys","worklist","leavelist","current2","candidates","candidate","sentinel","leave","enter","outer","removeElem","nextElem","attachComments","tree","providedComments","cursor","extendedRange","leadingComments","extendCommentRange","upperBound","func","diff","search","trailingComments","cloneEnvironment","$eda1332171fbf2d4$exports","$a1963888dea0535a$var$traverse","$a1963888dea0535a$var$isjQuery","$a1963888dea0535a$var$getAST","data","$a1963888dea0535a$var$getDependedMethods","methodsFileData","baseMethods","generatedMethods","lineRef","outputStart","outputEnd","$a1963888dea0535a$var$_getDependedMethods","outputAst","dependedMethods","uniqueDependedMethods","methodsData","allMethods","remainingMethodData","_state","methodName","forEach","substring","$a1963888dea0535a$var$getTemplateData","astMethods","templateLines","$a1963888dea0535a$var$_generateAlternativeMethods","methodsToGenerate","remainingMethods","_getTemplateData","$a1963888dea0535a$var$_getJQueryMethodsFromSource","ast","jQFns","jQFnsSet","alljQMethodsSet","intersection","$931db40849221e61$var$_plugin","methods","getJQueryMethodsFromSource","generateAlternativeMethods","prettier","format","tabWidth","prettierPlugins","singleQuote","formattedOutput","methodsFound","isjQuery","getAST","ReplaceJquery","utils","require","plugin","espree","estraverse","alljQueryMethods","getDependedMethods","getTemplateData"],"version":3,"file":"replace-jquery-browser.js.map"}